
Telem_gsm_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009600  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08009790  08009790  0000a790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba0  08009ba0  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009ba0  08009ba0  0000aba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ba8  08009ba8  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ba8  08009ba8  0000aba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bac  08009bac  0000abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009bb0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b068  2**0
                  CONTENTS
 10 .bss          00000c10  20000068  20000068  0000b068  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  20000c78  20000c78  0000b068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cfc  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003def  00000000  00000000  00022d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  00026b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e8  00000000  00000000  00028170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261bc  00000000  00000000  00029258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d4cd  00000000  00000000  0004f414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deece  00000000  00000000  0006c8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b7af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000665c  00000000  00000000  0014b7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  00151e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009778 	.word	0x08009778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08009778 	.word	0x08009778

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d70:	4a2f      	ldr	r2, [pc, #188]	@ (8000e30 <MX_ADC1_Init+0xd4>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d74:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d86:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d94:	4b25      	ldr	r3, [pc, #148]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d9a:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d9c:	4a25      	ldr	r2, [pc, #148]	@ (8000e34 <MX_ADC1_Init+0xd8>)
 8000d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dba:	481c      	ldr	r0, [pc, #112]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000dbc:	f002 f922 	bl	8003004 <HAL_ADC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f001 f881 	bl	8001ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4814      	ldr	r0, [pc, #80]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000ddc:	f002 fad4 	bl	8003388 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000de6:	f001 f871 	bl	8001ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dea:	2309      	movs	r3, #9
 8000dec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000df8:	f002 fac6 	bl	8003388 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e02:	f001 f863 	bl	8001ecc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e06:	2310      	movs	r3, #16
 8000e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000e14:	f002 fab8 	bl	8003388 <HAL_ADC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e1e:	f001 f855 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000084 	.word	0x20000084
 8000e30:	40012000 	.word	0x40012000
 8000e34:	0f000001 	.word	0x0f000001

08000e38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a2e      	ldr	r2, [pc, #184]	@ (8000f10 <HAL_ADC_MspInit+0xd8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d156      	bne.n	8000f08 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	4a2c      	ldr	r2, [pc, #176]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a25      	ldr	r2, [pc, #148]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e92:	2303      	movs	r3, #3
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e96:	2303      	movs	r3, #3
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481c      	ldr	r0, [pc, #112]	@ (8000f18 <HAL_ADC_MspInit+0xe0>)
 8000ea6:	f003 fa2f 	bl	8004308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000eac:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ec4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000eee:	f002 fdfd 	bl	8003aec <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ef8:	f000 ffe8 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000f00:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f02:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	@ 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40012000 	.word	0x40012000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	200000cc 	.word	0x200000cc
 8000f20:	40026410 	.word	0x40026410

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2038      	movs	r0, #56	@ 0x38
 8000f4c:	f002 fd97 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f50:	2038      	movs	r0, #56	@ 0x38
 8000f52:	f002 fdb0 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	203a      	movs	r0, #58	@ 0x3a
 8000f5c:	f002 fd8f 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f60:	203a      	movs	r0, #58	@ 0x3a
 8000f62:	f002 fda8 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2046      	movs	r0, #70	@ 0x46
 8000f6c:	f002 fd87 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f70:	2046      	movs	r0, #70	@ 0x46
 8000f72:	f002 fda0 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	@ 0x30
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	4b89      	ldr	r3, [pc, #548]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a88      	ldr	r2, [pc, #544]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b86      	ldr	r3, [pc, #536]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	4b82      	ldr	r3, [pc, #520]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a81      	ldr	r2, [pc, #516]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a7a      	ldr	r2, [pc, #488]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b78      	ldr	r3, [pc, #480]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b74      	ldr	r3, [pc, #464]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a73      	ldr	r2, [pc, #460]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b71      	ldr	r3, [pc, #452]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b6d      	ldr	r3, [pc, #436]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a6c      	ldr	r2, [pc, #432]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b6a      	ldr	r3, [pc, #424]	@ (80011c4 <MX_GPIO_Init+0x240>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <MX_GPIO_Init+0x240>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a65      	ldr	r2, [pc, #404]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_ON_OFF_Pin|W55_RSTN_Pin|LED_LCD_Pin|DC_LCD_Pin
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8001048:	485f      	ldr	r0, [pc, #380]	@ (80011c8 <MX_GPIO_Init+0x244>)
 800104a:	f003 fb11 	bl	8004670 <HAL_GPIO_WritePin>
                          |CS_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, W55_SCSN_Pin|USB_ON_OFF_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001054:	485d      	ldr	r0, [pc, #372]	@ (80011cc <MX_GPIO_Init+0x248>)
 8001056:	f003 fb0b 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_ETHERNET_GPIO_Port, ON_ETHERNET_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	485c      	ldr	r0, [pc, #368]	@ (80011d0 <MX_GPIO_Init+0x24c>)
 8001060:	f003 fb06 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_UART_CPU_GPIO_Port, ON_UART_CPU_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800106a:	485a      	ldr	r0, [pc, #360]	@ (80011d4 <MX_GPIO_Init+0x250>)
 800106c:	f003 fb00 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT_0_Pin|OUT_1_Pin|WIFI_GPIO_0_Pin|LED_Pin
 8001070:	2200      	movs	r2, #0
 8001072:	f24e 3103 	movw	r1, #58115	@ 0xe303
 8001076:	4858      	ldr	r0, [pc, #352]	@ (80011d8 <MX_GPIO_Init+0x254>)
 8001078:	f003 fafa 	bl	8004670 <HAL_GPIO_WritePin>
                          |RES_LCD_Pin|GATE_V_SIM_Pin|GATE_PWRKEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GATE_485_Pin|BLUETOOTH_RES_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8001082:	4855      	ldr	r0, [pc, #340]	@ (80011d8 <MX_GPIO_Init+0x254>)
 8001084:	f003 faf4 	bl	8004670 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_ON_OFF_Pin LED_LCD_Pin DC_LCD_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = WIFI_ON_OFF_Pin|LED_LCD_Pin|DC_LCD_Pin|CS_LCD_Pin;
 8001088:	f44f 73e4 	mov.w	r3, #456	@ 0x1c8
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4849      	ldr	r0, [pc, #292]	@ (80011c8 <MX_GPIO_Init+0x244>)
 80010a2:	f003 f931 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : W55_SCSN_Pin */
  GPIO_InitStruct.Pin = W55_SCSN_Pin;
 80010a6:	2310      	movs	r3, #16
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(W55_SCSN_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4843      	ldr	r0, [pc, #268]	@ (80011cc <MX_GPIO_Init+0x248>)
 80010be:	f003 f923 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : W55_RSTN_Pin */
  GPIO_InitStruct.Pin = W55_RSTN_Pin;
 80010c2:	2310      	movs	r3, #16
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(W55_RSTN_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	483b      	ldr	r0, [pc, #236]	@ (80011c8 <MX_GPIO_Init+0x244>)
 80010da:	f003 f915 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : W55_INTN_Pin USB_FAULT_Pin */
  GPIO_InitStruct.Pin = W55_INTN_Pin|USB_FAULT_Pin;
 80010de:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4835      	ldr	r0, [pc, #212]	@ (80011c8 <MX_GPIO_Init+0x244>)
 80010f4:	f003 f908 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_ETHERNET_Pin */
  GPIO_InitStruct.Pin = ON_ETHERNET_Pin;
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ON_ETHERNET_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4830      	ldr	r0, [pc, #192]	@ (80011d0 <MX_GPIO_Init+0x24c>)
 8001110:	f003 f8fa 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_UART_CPU_Pin */
  GPIO_InitStruct.Pin = ON_UART_CPU_Pin;
 8001114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ON_UART_CPU_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4829      	ldr	r0, [pc, #164]	@ (80011d4 <MX_GPIO_Init+0x250>)
 800112e:	f003 f8eb 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_0_Pin OUT_1_Pin WIFI_GPIO_0_Pin LED_Pin
                           RES_LCD_Pin GATE_V_SIM_Pin GATE_PWRKEY_Pin BLUETOOTH_RES_Pin */
  GPIO_InitStruct.Pin = OUT_0_Pin|OUT_1_Pin|WIFI_GPIO_0_Pin|LED_Pin
 8001132:	f24e 330b 	movw	r3, #58123	@ 0xe30b
 8001136:	61fb      	str	r3, [r7, #28]
                          |RES_LCD_Pin|GATE_V_SIM_Pin|GATE_PWRKEY_Pin|BLUETOOTH_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4823      	ldr	r0, [pc, #140]	@ (80011d8 <MX_GPIO_Init+0x254>)
 800114c:	f003 f8dc 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : GATE_485_Pin */
  GPIO_InitStruct.Pin = GATE_485_Pin;
 8001150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001156:	2311      	movs	r3, #17
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GATE_485_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	481b      	ldr	r0, [pc, #108]	@ (80011d8 <MX_GPIO_Init+0x254>)
 800116a:	f003 f8cd 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ON_OFF_Pin */
  GPIO_InitStruct.Pin = USB_ON_OFF_Pin;
 800116e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4811      	ldr	r0, [pc, #68]	@ (80011cc <MX_GPIO_Init+0x248>)
 8001188:	f003 f8be 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOOR_Pin */
  GPIO_InitStruct.Pin = DOOR_Pin;
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DOOR_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <MX_GPIO_Init+0x254>)
 80011a0:	f003 f8b2 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_STATUS_Pin GSM_NETLIGHT_Pin BLUETOOTH_LED_Pin */
  GPIO_InitStruct.Pin = GSM_STATUS_Pin|GSM_NETLIGHT_Pin|BLUETOOTH_LED_Pin;
 80011a4:	23d0      	movs	r3, #208	@ 0xd0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <MX_GPIO_Init+0x250>)
 80011b8:	f003 f8a6 	bl	8004308 <HAL_GPIO_Init>

}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	@ 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020c00 	.word	0x40020c00

080011dc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_IWDG_Init+0x2c>)
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <MX_IWDG_Init+0x30>)
 80011e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80011e6:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <MX_IWDG_Init+0x2c>)
 80011e8:	2206      	movs	r2, #6
 80011ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <MX_IWDG_Init+0x2c>)
 80011ee:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_IWDG_Init+0x2c>)
 80011f6:	f003 fa6e 	bl	80046d6 <HAL_IWDG_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001200:	f000 fe64 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2000012c 	.word	0x2000012c
 800120c:	40003000 	.word	0x40003000

08001210 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001218:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800121c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001228:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800122c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001230:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00b      	beq.n	8001250 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001238:	e000      	b.n	800123c <ITM_SendChar+0x2c>
    {
      __NOP();
 800123a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800123c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f9      	beq.n	800123a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001246:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001250:	687b      	ldr	r3, [r7, #4]
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <cbCommand2Receive>:
int flag_sim800_error = 0;
int flagCommand2 = 0;
char command2[15] = {0,};
char strStation[15] = {0,};

void cbCommand2Receive(const char *str){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	flagCommand2 = 1;
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <cbCommand2Receive+0x20>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]
	strncpy( command2, str, 14);
 800126e:	220e      	movs	r2, #14
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4804      	ldr	r0, [pc, #16]	@ (8001284 <cbCommand2Receive+0x24>)
 8001274:	f007 fbcb 	bl	8008a0e <strncpy>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000018c 	.word	0x2000018c
 8001284:	20000190 	.word	0x20000190

08001288 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == USART1 ){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a20      	ldr	r2, [pc, #128]	@ (800131c <HAL_UARTEx_RxEventCallback+0x94>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d104      	bne.n	80012a8 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&gsm, Size);
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	4619      	mov	r1, r3
 80012a2:	481f      	ldr	r0, [pc, #124]	@ (8001320 <HAL_UARTEx_RxEventCallback+0x98>)
 80012a4:	f006 ffbd 	bl	8008222 <ATC_IdleLineCallback>
	}

	if(huart->Instance == UART5){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001324 <HAL_UARTEx_RxEventCallback+0x9c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d122      	bne.n	80012f8 <HAL_UARTEx_RxEventCallback+0x70>
		  uint16_t i;
		  for( i = 0; i < Size; i++){
 80012b2:	2300      	movs	r3, #0
 80012b4:	81fb      	strh	r3, [r7, #14]
 80012b6:	e008      	b.n	80012ca <HAL_UARTEx_RxEventCallback+0x42>
			  temp_buff_fromStation[i] = rx_buff_fromStation[i];
 80012b8:	89fa      	ldrh	r2, [r7, #14]
 80012ba:	89fb      	ldrh	r3, [r7, #14]
 80012bc:	491a      	ldr	r1, [pc, #104]	@ (8001328 <HAL_UARTEx_RxEventCallback+0xa0>)
 80012be:	5c89      	ldrb	r1, [r1, r2]
 80012c0:	4a1a      	ldr	r2, [pc, #104]	@ (800132c <HAL_UARTEx_RxEventCallback+0xa4>)
 80012c2:	54d1      	strb	r1, [r2, r3]
		  for( i = 0; i < Size; i++){
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	3301      	adds	r3, #1
 80012c8:	81fb      	strh	r3, [r7, #14]
 80012ca:	89fa      	ldrh	r2, [r7, #14]
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3f2      	bcc.n	80012b8 <HAL_UARTEx_RxEventCallback+0x30>
		  }
		  temp_buff_fromStation[i] = '\n';
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	4a15      	ldr	r2, [pc, #84]	@ (800132c <HAL_UARTEx_RxEventCallback+0xa4>)
 80012d6:	210a      	movs	r1, #10
 80012d8:	54d1      	strb	r1, [r2, r3]
		  i++;
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	3301      	adds	r3, #1
 80012de:	81fb      	strh	r3, [r7, #14]
		  temp_buff_fromStation[i] = '\0';
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	4a12      	ldr	r2, [pc, #72]	@ (800132c <HAL_UARTEx_RxEventCallback+0xa4>)
 80012e4:	2100      	movs	r1, #0
 80012e6:	54d1      	strb	r1, [r2, r3]
		  flagReceiveFromStation = 1;
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <HAL_UARTEx_RxEventCallback+0xa8>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]

		  //delete
		  //printf( (char *)temp_buff_rs485 );

		  HAL_UARTEx_ReceiveToIdle_IT(&huart5, rx_buff_fromStation, 50);
 80012ee:	2232      	movs	r2, #50	@ 0x32
 80012f0:	490d      	ldr	r1, [pc, #52]	@ (8001328 <HAL_UARTEx_RxEventCallback+0xa0>)
 80012f2:	4810      	ldr	r0, [pc, #64]	@ (8001334 <HAL_UARTEx_RxEventCallback+0xac>)
 80012f4:	f004 fde4 	bl	8005ec0 <HAL_UARTEx_ReceiveToIdle_IT>
	}

	// from Bluetooth
	if(huart->Instance == USART2){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001338 <HAL_UARTEx_RxEventCallback+0xb0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d107      	bne.n	8001312 <HAL_UARTEx_RxEventCallback+0x8a>

		  //delete
		  printf( (char *)rx_buff_fromBluetooth );
 8001302:	480e      	ldr	r0, [pc, #56]	@ (800133c <HAL_UARTEx_RxEventCallback+0xb4>)
 8001304:	f007 fa04 	bl	8008710 <iprintf>

		  HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_buff_fromBluetooth, 50);
 8001308:	2232      	movs	r2, #50	@ 0x32
 800130a:	490c      	ldr	r1, [pc, #48]	@ (800133c <HAL_UARTEx_RxEventCallback+0xb4>)
 800130c:	480c      	ldr	r0, [pc, #48]	@ (8001340 <HAL_UARTEx_RxEventCallback+0xb8>)
 800130e:	f004 fdd7 	bl	8005ec0 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40011000 	.word	0x40011000
 8001320:	20000144 	.word	0x20000144
 8001324:	40005000 	.word	0x40005000
 8001328:	200002c4 	.word	0x200002c4
 800132c:	200002f8 	.word	0x200002f8
 8001330:	2000032a 	.word	0x2000032a
 8001334:	20000464 	.word	0x20000464
 8001338:	40004400 	.word	0x40004400
 800133c:	2000032c 	.word	0x2000032c
 8001340:	200004f4 	.word	0x200004f4

08001344 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <HAL_ADC_ConvCpltCallback+0x24>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d102      	bne.n	800135c <HAL_ADC_ConvCpltCallback+0x18>
        flagAdcDmaComplit = 1;
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_ADC_ConvCpltCallback+0x28>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
    }
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40012000 	.word	0x40012000
 800136c:	2000035e 	.word	0x2000035e

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	@ 0x38
 8001374:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f001 fdaf 	bl	8002ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f000 fb09 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f7ff fe01 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001382:	f7ff fdcf 	bl	8000f24 <MX_DMA_Init>
  MX_TIM2_Init();
 8001386:	f001 f9ed 	bl	8002764 <MX_TIM2_Init>
  MX_ADC1_Init();
 800138a:	f7ff fce7 	bl	8000d5c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800138e:	f001 fadb 	bl	8002948 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8001392:	f001 fa85 	bl	80028a0 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001396:	f001 fb01 	bl	800299c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800139a:	f001 faab 	bl	80028f4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800139e:	f000 fd9b 	bl	8001ed8 <MX_SPI1_Init>
  MX_UART4_Init();
 80013a2:	f001 fa53 	bl	800284c <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013a6:	f001 fcf3 	bl	8002d90 <MX_USB_OTG_FS_PCD_Init>
  MX_IWDG_Init();
 80013aa:	f7ff ff17 	bl	80011dc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */


//------ Off all device ---------------------------------------------------------------

	printf( "\n =====> Start! \n\n" );
 80013ae:	4859      	ldr	r0, [pc, #356]	@ (8001514 <main+0x1a4>)
 80013b0:	f007 fa16 	bl	80087e0 <puts>


  	while(1){
  		u220 = startAdcGetU220();
 80013b4:	f000 fd34 	bl	8001e20 <startAdcGetU220>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a57      	ldr	r2, [pc, #348]	@ (8001518 <main+0x1a8>)
 80013bc:	6013      	str	r3, [r2, #0]
  		if (u220 > 40) {
 80013be:	4b56      	ldr	r3, [pc, #344]	@ (8001518 <main+0x1a8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b28      	cmp	r3, #40	@ 0x28
 80013c4:	dc06      	bgt.n	80013d4 <main+0x64>
  			break;
  		}
  		HAL_Delay(500);
 80013c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013ca:	f001 fdf7 	bl	8002fbc <HAL_Delay>
  		HAL_PWR_EnterSTANDBYMode();
 80013ce:	f003 fae3 	bl	8004998 <HAL_PWR_EnterSTANDBYMode>
  		u220 = startAdcGetU220();
 80013d2:	e7ef      	b.n	80013b4 <main+0x44>
  			break;
 80013d4:	bf00      	nop
//-------------------------------------------------------------------------------------
  //  //Ethernet on!
  //  HAL_GPIO_WritePin(ON_ETHERNET_GPIO_Port, ON_ETHERNET_Pin, GPIO_PIN_RESET);

    //Bluetooth Reset!
    HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RES_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2108      	movs	r1, #8
 80013da:	4850      	ldr	r0, [pc, #320]	@ (800151c <main+0x1ac>)
 80013dc:	f003 f948 	bl	8004670 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80013e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e4:	f001 fdea 	bl	8002fbc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RES_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2108      	movs	r1, #8
 80013ec:	484b      	ldr	r0, [pc, #300]	@ (800151c <main+0x1ac>)
 80013ee:	f003 f93f 	bl	8004670 <HAL_GPIO_WritePin>

    //RS485 on!
    HAL_GPIO_WritePin(GPIOD, GATE_485_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f8:	4848      	ldr	r0, [pc, #288]	@ (800151c <main+0x1ac>)
 80013fa:	f003 f939 	bl	8004670 <HAL_GPIO_WritePin>
    //RS485 off!
    //HAL_GPIO_WritePin(GPIOD, GATE_485_Pin, GPIO_PIN_SET);

    //On Uart CPU
    HAL_GPIO_WritePin(ON_UART_CPU_GPIO_Port, ON_UART_CPU_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001404:	4846      	ldr	r0, [pc, #280]	@ (8001520 <main+0x1b0>)
 8001406:	f003 f933 	bl	8004670 <HAL_GPIO_WritePin>
  ////  WIFI on
  //  HAL_GPIO_WritePin(GPIOC, WIFI_ON_OFF_Pin, GPIO_PIN_SET);
//-----------------------------------------------------------------------------------------


	HAL_UARTEx_ReceiveToIdle_IT(&huart5, rx_buff_fromStation, 50);
 800140a:	2232      	movs	r2, #50	@ 0x32
 800140c:	4945      	ldr	r1, [pc, #276]	@ (8001524 <main+0x1b4>)
 800140e:	4846      	ldr	r0, [pc, #280]	@ (8001528 <main+0x1b8>)
 8001410:	f004 fd56 	bl	8005ec0 <HAL_UARTEx_ReceiveToIdle_IT>




    //gsm modem
    ATC_Init(&gsm, &huart1, 512, "GSM");
 8001414:	4b45      	ldr	r3, [pc, #276]	@ (800152c <main+0x1bc>)
 8001416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800141a:	4945      	ldr	r1, [pc, #276]	@ (8001530 <main+0x1c0>)
 800141c:	4845      	ldr	r0, [pc, #276]	@ (8001534 <main+0x1c4>)
 800141e:	f006 fd3b 	bl	8007e98 <ATC_Init>
    ATC_SetEvents(&gsm, events);
 8001422:	4945      	ldr	r1, [pc, #276]	@ (8001538 <main+0x1c8>)
 8001424:	4843      	ldr	r0, [pc, #268]	@ (8001534 <main+0x1c4>)
 8001426:	f006 fddb 	bl	8007fe0 <ATC_SetEvents>

    for(int i = 0; i < 10; i++) {
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e00f      	b.n	8001450 <main+0xe0>
    	if( reset_sim800_connect_to_server() == 1 ){
 8001430:	f000 fb64 	bl	8001afc <reset_sim800_connect_to_server>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d104      	bne.n	8001444 <main+0xd4>
    		printf( "reset_sim800_connect_to_server(pos0) == 1  => connection Ok!\n" );
 800143a:	4840      	ldr	r0, [pc, #256]	@ (800153c <main+0x1cc>)
 800143c:	f007 f9d0 	bl	80087e0 <puts>
    		break;
 8001440:	bf00      	nop
 8001442:	e008      	b.n	8001456 <main+0xe6>
    	} else {
    		printf( "reset_sim800_connect_to_server(pos0) != 1  => connection Err!\n" );
 8001444:	483e      	ldr	r0, [pc, #248]	@ (8001540 <main+0x1d0>)
 8001446:	f007 f9cb 	bl	80087e0 <puts>
    for(int i = 0; i < 10; i++) {
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3301      	adds	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b09      	cmp	r3, #9
 8001454:	ddec      	ble.n	8001430 <main+0xc0>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if((HAL_GetTick() - timer1) > 500) { //  500ms
 8001456:	f001 fda5 	bl	8002fa4 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	4b39      	ldr	r3, [pc, #228]	@ (8001544 <main+0x1d4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001466:	d909      	bls.n	800147c <main+0x10c>

			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001468:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800146c:	482b      	ldr	r0, [pc, #172]	@ (800151c <main+0x1ac>)
 800146e:	f003 f918 	bl	80046a2 <HAL_GPIO_TogglePin>
			timer1 = HAL_GetTick();
 8001472:	f001 fd97 	bl	8002fa4 <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	4a32      	ldr	r2, [pc, #200]	@ (8001544 <main+0x1d4>)
 800147a:	6013      	str	r3, [r2, #0]
		}



		if((HAL_GetTick() - timer3) > 200) { //  200ms
 800147c:	f001 fd92 	bl	8002fa4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	4b31      	ldr	r3, [pc, #196]	@ (8001548 <main+0x1d8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2bc8      	cmp	r3, #200	@ 0xc8
 800148a:	d921      	bls.n	80014d0 <main+0x160>
			//is '$2|' command receive?
			ATC_Loop(&gsm);
 800148c:	4829      	ldr	r0, [pc, #164]	@ (8001534 <main+0x1c4>)
 800148e:	f006 fddb 	bl	8008048 <ATC_Loop>

			//check command receive
			if (flagCommand2 == 1){
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <main+0x1dc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d115      	bne.n	80014c6 <main+0x156>
				flagCommand2 = 0;
 800149a:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <main+0x1dc>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

 				if ( strServerToStation(strStation, command2, 15) == 0 ){
 80014a0:	220f      	movs	r2, #15
 80014a2:	492b      	ldr	r1, [pc, #172]	@ (8001550 <main+0x1e0>)
 80014a4:	482b      	ldr	r0, [pc, #172]	@ (8001554 <main+0x1e4>)
 80014a6:	f000 ff47 	bl	8002338 <strServerToStation>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <main+0x156>
 					// query data from station change current
 					HAL_UART_Transmit(&huart5, (uint8_t *)strStation, strlen(strStation), 400);
 80014b0:	4828      	ldr	r0, [pc, #160]	@ (8001554 <main+0x1e4>)
 80014b2:	f7fe fe8d 	bl	80001d0 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80014be:	4925      	ldr	r1, [pc, #148]	@ (8001554 <main+0x1e4>)
 80014c0:	4819      	ldr	r0, [pc, #100]	@ (8001528 <main+0x1b8>)
 80014c2:	f004 fc01 	bl	8005cc8 <HAL_UART_Transmit>
 				}

			}

			timer3 = HAL_GetTick();
 80014c6:	f001 fd6d 	bl	8002fa4 <HAL_GetTick>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <main+0x1d8>)
 80014ce:	6013      	str	r3, [r2, #0]
		}




		if((HAL_GetTick() - timer2) > 30000) { //  30sec
 80014d0:	f001 fd68 	bl	8002fa4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <main+0x1e8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f247 5230 	movw	r2, #30000	@ 0x7530
 80014e0:	4293      	cmp	r3, r2
 80014e2:	f240 81f8 	bls.w	80018d6 <main+0x566>
			//
			// query data from station
			HAL_UART_Transmit(&huart5, (uint8_t *)"$?;", 3, 200);
 80014e6:	23c8      	movs	r3, #200	@ 0xc8
 80014e8:	2203      	movs	r2, #3
 80014ea:	491c      	ldr	r1, [pc, #112]	@ (800155c <main+0x1ec>)
 80014ec:	480e      	ldr	r0, [pc, #56]	@ (8001528 <main+0x1b8>)
 80014ee:	f004 fbeb 	bl	8005cc8 <HAL_UART_Transmit>
			HAL_Delay(200);
 80014f2:	20c8      	movs	r0, #200	@ 0xc8
 80014f4:	f001 fd62 	bl	8002fbc <HAL_Delay>

			if( flagReceiveFromStation ) {
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <main+0x1f0>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d034      	beq.n	800156c <main+0x1fc>
				decodeStrToStruct(&telData, (char *)temp_buff_fromStation);
 8001502:	4918      	ldr	r1, [pc, #96]	@ (8001564 <main+0x1f4>)
 8001504:	4818      	ldr	r0, [pc, #96]	@ (8001568 <main+0x1f8>)
 8001506:	f000 fe03 	bl	8002110 <decodeStrToStruct>
				flagReceiveFromStation = 0;
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <main+0x1f0>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	e02f      	b.n	8001572 <main+0x202>
 8001512:	bf00      	nop
 8001514:	08009794 	.word	0x08009794
 8001518:	20000374 	.word	0x20000374
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40020400 	.word	0x40020400
 8001524:	200002c4 	.word	0x200002c4
 8001528:	20000464 	.word	0x20000464
 800152c:	080097a8 	.word	0x080097a8
 8001530:	200004ac 	.word	0x200004ac
 8001534:	20000144 	.word	0x20000144
 8001538:	08009a44 	.word	0x08009a44
 800153c:	080097ac 	.word	0x080097ac
 8001540:	080097ec 	.word	0x080097ec
 8001544:	20000138 	.word	0x20000138
 8001548:	20000140 	.word	0x20000140
 800154c:	2000018c 	.word	0x2000018c
 8001550:	20000190 	.word	0x20000190
 8001554:	200001a0 	.word	0x200001a0
 8001558:	2000013c 	.word	0x2000013c
 800155c:	0800982c 	.word	0x0800982c
 8001560:	2000032a 	.word	0x2000032a
 8001564:	200002f8 	.word	0x200002f8
 8001568:	200001b0 	.word	0x200001b0
			} else{
				defaultStrToStruct(&telData);
 800156c:	488c      	ldr	r0, [pc, #560]	@ (80017a0 <main+0x430>)
 800156e:	f000 fd6b 	bl	8002048 <defaultStrToStruct>
			}

			// signal quality
			resp = ATC_SendReceive(&gsm, "AT+CSQ\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001572:	4b8c      	ldr	r3, [pc, #560]	@ (80017a4 <main+0x434>)
 8001574:	9303      	str	r3, [sp, #12]
 8001576:	4b8c      	ldr	r3, [pc, #560]	@ (80017a8 <main+0x438>)
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	2302      	movs	r3, #2
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	2364      	movs	r3, #100	@ 0x64
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2300      	movs	r3, #0
 8001584:	2264      	movs	r2, #100	@ 0x64
 8001586:	4989      	ldr	r1, [pc, #548]	@ (80017ac <main+0x43c>)
 8001588:	4889      	ldr	r0, [pc, #548]	@ (80017b0 <main+0x440>)
 800158a:	f006 fd6b 	bl	8008064 <ATC_SendReceive>
 800158e:	4603      	mov	r3, r0
 8001590:	4a88      	ldr	r2, [pc, #544]	@ (80017b4 <main+0x444>)
 8001592:	6013      	str	r3, [r2, #0]
			if(resp) {
 8001594:	4b87      	ldr	r3, [pc, #540]	@ (80017b4 <main+0x444>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d011      	beq.n	80015c0 <main+0x250>
				//printf( (char *)gsm.pReadBuff );
				if (gsm.pReadBuff[5] == 'Q'){
 800159c:	4b84      	ldr	r3, [pc, #528]	@ (80017b0 <main+0x440>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	3305      	adds	r3, #5
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b51      	cmp	r3, #81	@ 0x51
 80015a6:	d10b      	bne.n	80015c0 <main+0x250>
					gsm.pReadBuff[10] = '\0';
 80015a8:	4b81      	ldr	r3, [pc, #516]	@ (80017b0 <main+0x440>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	330a      	adds	r3, #10
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
					strcpy( telData.sq, (char *)&gsm.pReadBuff[8]);
 80015b2:	4b7f      	ldr	r3, [pc, #508]	@ (80017b0 <main+0x440>)
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	3308      	adds	r3, #8
 80015b8:	4619      	mov	r1, r3
 80015ba:	487f      	ldr	r0, [pc, #508]	@ (80017b8 <main+0x448>)
 80015bc:	f007 fad3 	bl	8008b66 <strcpy>
				}
			}

			// u_bat; 220v; temperature (run adc)
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc, 3); // run ADC
 80015c0:	2203      	movs	r2, #3
 80015c2:	497e      	ldr	r1, [pc, #504]	@ (80017bc <main+0x44c>)
 80015c4:	487e      	ldr	r0, [pc, #504]	@ (80017c0 <main+0x450>)
 80015c6:	f001 fd61 	bl	800308c <HAL_ADC_Start_DMA>
			HAL_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f001 fcf6 	bl	8002fbc <HAL_Delay>
			if( flagAdcDmaComplit ) {
 80015d0:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <main+0x454>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80bc 	beq.w	8001754 <main+0x3e4>

				flagAdcDmaComplit = 0;
 80015dc:	4b79      	ldr	r3, [pc, #484]	@ (80017c4 <main+0x454>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Stop_DMA(&hadc1);
 80015e2:	4877      	ldr	r0, [pc, #476]	@ (80017c0 <main+0x450>)
 80015e4:	f001 fe62 	bl	80032ac <HAL_ADC_Stop_DMA>

				u_bat = (int)(((adc[0] * 6.6) / 409.5) + 0.5) ;	// batery
 80015e8:	4b74      	ldr	r3, [pc, #464]	@ (80017bc <main+0x44c>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff98 	bl	8000524 <__aeabi_i2d>
 80015f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8001770 <main+0x400>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fffd 	bl	80005f8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	a35c      	add	r3, pc, #368	@ (adr r3, 8001778 <main+0x408>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f91e 	bl	800084c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b6a      	ldr	r3, [pc, #424]	@ (80017c8 <main+0x458>)
 800161e:	f7fe fe35 	bl	800028c <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff f9f7 	bl	8000a1c <__aeabi_d2iz>
 800162e:	4603      	mov	r3, r0
 8001630:	4a66      	ldr	r2, [pc, #408]	@ (80017cc <main+0x45c>)
 8001632:	6013      	str	r3, [r2, #0]
				u_5v = (int)(((adc[1] * 6.6) / 409.5) + 0.5) ;	// 5 volt
 8001634:	4b61      	ldr	r3, [pc, #388]	@ (80017bc <main+0x44c>)
 8001636:	885b      	ldrh	r3, [r3, #2]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff72 	bl	8000524 <__aeabi_i2d>
 8001640:	a34b      	add	r3, pc, #300	@ (adr r3, 8001770 <main+0x400>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ffd7 	bl	80005f8 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	a349      	add	r3, pc, #292	@ (adr r3, 8001778 <main+0x408>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7ff f8f8 	bl	800084c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b57      	ldr	r3, [pc, #348]	@ (80017c8 <main+0x458>)
 800166a:	f7fe fe0f 	bl	800028c <__adddf3>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff f9d1 	bl	8000a1c <__aeabi_d2iz>
 800167a:	4603      	mov	r3, r0
 800167c:	4a54      	ldr	r2, [pc, #336]	@ (80017d0 <main+0x460>)
 800167e:	6013      	str	r3, [r2, #0]
				temperature = (int)((((adc[2] * 3.3) / 4095) - 0.76) / 0.0025 + 25.0) ;	// temperature
 8001680:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <main+0x44c>)
 8001682:	889b      	ldrh	r3, [r3, #4]
 8001684:	b29b      	uxth	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff4c 	bl	8000524 <__aeabi_i2d>
 800168c:	a33c      	add	r3, pc, #240	@ (adr r3, 8001780 <main+0x410>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ffb1 	bl	80005f8 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001788 <main+0x418>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7ff f8d2 	bl	800084c <__aeabi_ddiv>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	a337      	add	r3, pc, #220	@ (adr r3, 8001790 <main+0x420>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe fde7 	bl	8000288 <__aeabi_dsub>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	a335      	add	r3, pc, #212	@ (adr r3, 8001798 <main+0x428>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7ff f8c0 	bl	800084c <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <main+0x464>)
 80016da:	f7fe fdd7 	bl	800028c <__adddf3>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff f999 	bl	8000a1c <__aeabi_d2iz>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a3a      	ldr	r2, [pc, #232]	@ (80017d8 <main+0x468>)
 80016ee:	6013      	str	r3, [r2, #0]
				//
				sprintf(tempString, "%i", u_bat);
 80016f0:	4b36      	ldr	r3, [pc, #216]	@ (80017cc <main+0x45c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4939      	ldr	r1, [pc, #228]	@ (80017dc <main+0x46c>)
 80016f8:	4839      	ldr	r0, [pc, #228]	@ (80017e0 <main+0x470>)
 80016fa:	f007 f879 	bl	80087f0 <siprintf>
				strcpy( telData.u_bat, tempString);
 80016fe:	4938      	ldr	r1, [pc, #224]	@ (80017e0 <main+0x470>)
 8001700:	4838      	ldr	r0, [pc, #224]	@ (80017e4 <main+0x474>)
 8001702:	f007 fa30 	bl	8008b66 <strcpy>
				//
				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				//todo del:
				//strcpy( telData.u_bat, "42");
				//
				if( u_5v > 40) sprintf(tempString, "%s", "1");
 8001706:	4b32      	ldr	r3, [pc, #200]	@ (80017d0 <main+0x460>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b28      	cmp	r3, #40	@ 0x28
 800170c:	dd05      	ble.n	800171a <main+0x3aa>
 800170e:	4a36      	ldr	r2, [pc, #216]	@ (80017e8 <main+0x478>)
 8001710:	4936      	ldr	r1, [pc, #216]	@ (80017ec <main+0x47c>)
 8001712:	4833      	ldr	r0, [pc, #204]	@ (80017e0 <main+0x470>)
 8001714:	f007 f86c 	bl	80087f0 <siprintf>
 8001718:	e004      	b.n	8001724 <main+0x3b4>
				else sprintf(tempString, "%s", "0");
 800171a:	4a35      	ldr	r2, [pc, #212]	@ (80017f0 <main+0x480>)
 800171c:	4933      	ldr	r1, [pc, #204]	@ (80017ec <main+0x47c>)
 800171e:	4830      	ldr	r0, [pc, #192]	@ (80017e0 <main+0x470>)
 8001720:	f007 f866 	bl	80087f0 <siprintf>
				strcpy( telData.u220, tempString);
 8001724:	492e      	ldr	r1, [pc, #184]	@ (80017e0 <main+0x470>)
 8001726:	4833      	ldr	r0, [pc, #204]	@ (80017f4 <main+0x484>)
 8001728:	f007 fa1d 	bl	8008b66 <strcpy>
				//
				sprintf(tempString, "%+i", temperature);
 800172c:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <main+0x468>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4931      	ldr	r1, [pc, #196]	@ (80017f8 <main+0x488>)
 8001734:	482a      	ldr	r0, [pc, #168]	@ (80017e0 <main+0x470>)
 8001736:	f007 f85b 	bl	80087f0 <siprintf>
				strcpy( telData.temperature, tempString);
 800173a:	4929      	ldr	r1, [pc, #164]	@ (80017e0 <main+0x470>)
 800173c:	482f      	ldr	r0, [pc, #188]	@ (80017fc <main+0x48c>)
 800173e:	f007 fa12 	bl	8008b66 <strcpy>

				adc[0] = 0;
 8001742:	4b1e      	ldr	r3, [pc, #120]	@ (80017bc <main+0x44c>)
 8001744:	2200      	movs	r2, #0
 8001746:	801a      	strh	r2, [r3, #0]
				adc[1] = 0;
 8001748:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <main+0x44c>)
 800174a:	2200      	movs	r2, #0
 800174c:	805a      	strh	r2, [r3, #2]
				adc[2] = 0;
 800174e:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <main+0x44c>)
 8001750:	2200      	movs	r2, #0
 8001752:	809a      	strh	r2, [r3, #4]
			}

			// door
			if ( HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin) ) {
 8001754:	2180      	movs	r1, #128	@ 0x80
 8001756:	482a      	ldr	r0, [pc, #168]	@ (8001800 <main+0x490>)
 8001758:	f002 ff72 	bl	8004640 <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d050      	beq.n	8001804 <main+0x494>
				//close
				sprintf(tempString, "%s", "0");
 8001762:	4a23      	ldr	r2, [pc, #140]	@ (80017f0 <main+0x480>)
 8001764:	4921      	ldr	r1, [pc, #132]	@ (80017ec <main+0x47c>)
 8001766:	481e      	ldr	r0, [pc, #120]	@ (80017e0 <main+0x470>)
 8001768:	f007 f842 	bl	80087f0 <siprintf>
 800176c:	e04f      	b.n	800180e <main+0x49e>
 800176e:	bf00      	nop
 8001770:	66666666 	.word	0x66666666
 8001774:	401a6666 	.word	0x401a6666
 8001778:	00000000 	.word	0x00000000
 800177c:	40799800 	.word	0x40799800
 8001780:	66666666 	.word	0x66666666
 8001784:	400a6666 	.word	0x400a6666
 8001788:	00000000 	.word	0x00000000
 800178c:	40affe00 	.word	0x40affe00
 8001790:	851eb852 	.word	0x851eb852
 8001794:	3fe851eb 	.word	0x3fe851eb
 8001798:	47ae147b 	.word	0x47ae147b
 800179c:	3f647ae1 	.word	0x3f647ae1
 80017a0:	200001b0 	.word	0x200001b0
 80017a4:	0800983c 	.word	0x0800983c
 80017a8:	08009848 	.word	0x08009848
 80017ac:	08009830 	.word	0x08009830
 80017b0:	20000144 	.word	0x20000144
 80017b4:	20000180 	.word	0x20000180
 80017b8:	200001e2 	.word	0x200001e2
 80017bc:	20000360 	.word	0x20000360
 80017c0:	20000084 	.word	0x20000084
 80017c4:	2000035e 	.word	0x2000035e
 80017c8:	3fe00000 	.word	0x3fe00000
 80017cc:	20000368 	.word	0x20000368
 80017d0:	2000036c 	.word	0x2000036c
 80017d4:	40390000 	.word	0x40390000
 80017d8:	20000370 	.word	0x20000370
 80017dc:	08009850 	.word	0x08009850
 80017e0:	200002b4 	.word	0x200002b4
 80017e4:	200001d8 	.word	0x200001d8
 80017e8:	08009854 	.word	0x08009854
 80017ec:	08009858 	.word	0x08009858
 80017f0:	0800985c 	.word	0x0800985c
 80017f4:	200001ec 	.word	0x200001ec
 80017f8:	08009860 	.word	0x08009860
 80017fc:	20000200 	.word	0x20000200
 8001800:	40020c00 	.word	0x40020c00
			}else {
				//open
				sprintf(tempString, "%s", "1");
 8001804:	4a44      	ldr	r2, [pc, #272]	@ (8001918 <main+0x5a8>)
 8001806:	4945      	ldr	r1, [pc, #276]	@ (800191c <main+0x5ac>)
 8001808:	4845      	ldr	r0, [pc, #276]	@ (8001920 <main+0x5b0>)
 800180a:	f006 fff1 	bl	80087f0 <siprintf>
			}
			strcpy( telData.door, tempString);
 800180e:	4944      	ldr	r1, [pc, #272]	@ (8001920 <main+0x5b0>)
 8001810:	4844      	ldr	r0, [pc, #272]	@ (8001924 <main+0x5b4>)
 8001812:	f007 f9a8 	bl	8008b66 <strcpy>


			sprintf(telString, "%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|",
 8001816:	4b44      	ldr	r3, [pc, #272]	@ (8001928 <main+0x5b8>)
 8001818:	9309      	str	r3, [sp, #36]	@ 0x24
 800181a:	4b44      	ldr	r3, [pc, #272]	@ (800192c <main+0x5bc>)
 800181c:	9308      	str	r3, [sp, #32]
 800181e:	4b44      	ldr	r3, [pc, #272]	@ (8001930 <main+0x5c0>)
 8001820:	9307      	str	r3, [sp, #28]
 8001822:	4b44      	ldr	r3, [pc, #272]	@ (8001934 <main+0x5c4>)
 8001824:	9306      	str	r3, [sp, #24]
 8001826:	4b3f      	ldr	r3, [pc, #252]	@ (8001924 <main+0x5b4>)
 8001828:	9305      	str	r3, [sp, #20]
 800182a:	4b43      	ldr	r3, [pc, #268]	@ (8001938 <main+0x5c8>)
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	4b43      	ldr	r3, [pc, #268]	@ (800193c <main+0x5cc>)
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	4b43      	ldr	r3, [pc, #268]	@ (8001940 <main+0x5d0>)
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	4b43      	ldr	r3, [pc, #268]	@ (8001944 <main+0x5d4>)
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	4b43      	ldr	r3, [pc, #268]	@ (8001948 <main+0x5d8>)
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	4b43      	ldr	r3, [pc, #268]	@ (800194c <main+0x5dc>)
 8001840:	4a43      	ldr	r2, [pc, #268]	@ (8001950 <main+0x5e0>)
 8001842:	4944      	ldr	r1, [pc, #272]	@ (8001954 <main+0x5e4>)
 8001844:	4844      	ldr	r0, [pc, #272]	@ (8001958 <main+0x5e8>)
 8001846:	f006 ffd3 	bl	80087f0 <siprintf>
					telData.temperature,
					telData.power,
					telData.i_max,
					telData.t_max
					);
			uint8_t crc = crc_8(telString);
 800184a:	4843      	ldr	r0, [pc, #268]	@ (8001958 <main+0x5e8>)
 800184c:	f000 fbc2 	bl	8001fd4 <crc_8>
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
			sprintf(tempString, "%u;\x1A", crc);
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	461a      	mov	r2, r3
 8001858:	4940      	ldr	r1, [pc, #256]	@ (800195c <main+0x5ec>)
 800185a:	4831      	ldr	r0, [pc, #196]	@ (8001920 <main+0x5b0>)
 800185c:	f006 ffc8 	bl	80087f0 <siprintf>
			strcat(telString, tempString);
 8001860:	492f      	ldr	r1, [pc, #188]	@ (8001920 <main+0x5b0>)
 8001862:	483d      	ldr	r0, [pc, #244]	@ (8001958 <main+0x5e8>)
 8001864:	f007 f8c4 	bl	80089f0 <strcat>


			resp = ATC_SendReceive(&gsm, "AT+CIPSEND\r\n", 100, NULL, 100, 2, "\r\n> ", "\r\nERROR\r\n");
 8001868:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <main+0x5f0>)
 800186a:	9303      	str	r3, [sp, #12]
 800186c:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <main+0x5f4>)
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	2302      	movs	r3, #2
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2364      	movs	r3, #100	@ 0x64
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2300      	movs	r3, #0
 800187a:	2264      	movs	r2, #100	@ 0x64
 800187c:	493a      	ldr	r1, [pc, #232]	@ (8001968 <main+0x5f8>)
 800187e:	483b      	ldr	r0, [pc, #236]	@ (800196c <main+0x5fc>)
 8001880:	f006 fbf0 	bl	8008064 <ATC_SendReceive>
 8001884:	4603      	mov	r3, r0
 8001886:	4a3a      	ldr	r2, [pc, #232]	@ (8001970 <main+0x600>)
 8001888:	6013      	str	r3, [r2, #0]

			resp2 = ATC_SendReceive(&gsm, telString, 100, NULL, 2000, 2, "\r\nSEND OK\r\n", "\r\nERROR\r\n");
 800188a:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <main+0x5f0>)
 800188c:	9303      	str	r3, [sp, #12]
 800188e:	4b39      	ldr	r3, [pc, #228]	@ (8001974 <main+0x604>)
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	2302      	movs	r3, #2
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	2264      	movs	r2, #100	@ 0x64
 80018a0:	492d      	ldr	r1, [pc, #180]	@ (8001958 <main+0x5e8>)
 80018a2:	4832      	ldr	r0, [pc, #200]	@ (800196c <main+0x5fc>)
 80018a4:	f006 fbde 	bl	8008064 <ATC_SendReceive>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a33      	ldr	r2, [pc, #204]	@ (8001978 <main+0x608>)
 80018ac:	6013      	str	r3, [r2, #0]

			if ( (resp == 1) && (resp2 == 1) ){
 80018ae:	4b30      	ldr	r3, [pc, #192]	@ (8001970 <main+0x600>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d107      	bne.n	80018c6 <main+0x556>
 80018b6:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <main+0x608>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d103      	bne.n	80018c6 <main+0x556>
				flag_sim800_error = 0;
 80018be:	4b2f      	ldr	r3, [pc, #188]	@ (800197c <main+0x60c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e002      	b.n	80018cc <main+0x55c>
			} else {
				flag_sim800_error = 1;
 80018c6:	4b2d      	ldr	r3, [pc, #180]	@ (800197c <main+0x60c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
			}

			timer2 = HAL_GetTick();
 80018cc:	f001 fb6a 	bl	8002fa4 <HAL_GetTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001980 <main+0x610>)
 80018d4:	6013      	str	r3, [r2, #0]
		}


		if ( flag_sim800_error == 1 ){
 80018d6:	4b29      	ldr	r3, [pc, #164]	@ (800197c <main+0x60c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d117      	bne.n	800190e <main+0x59e>
			flag_sim800_error = 0;
 80018de:	4b27      	ldr	r3, [pc, #156]	@ (800197c <main+0x60c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

		    for(int i = 0; i < 10; i++) {
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	e00e      	b.n	8001908 <main+0x598>
		    	if( reset_sim800_connect_to_server() == 1 ){
 80018ea:	f000 f907 	bl	8001afc <reset_sim800_connect_to_server>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d103      	bne.n	80018fc <main+0x58c>
		    		printf( "reset_sim800_connect_to_server(pos1) == 1  => connection Ok!\n" );
 80018f4:	4823      	ldr	r0, [pc, #140]	@ (8001984 <main+0x614>)
 80018f6:	f006 ff73 	bl	80087e0 <puts>
		    		break;
 80018fa:	e008      	b.n	800190e <main+0x59e>
		    	} else {
		    		printf( "reset_sim800_connect_to_server(pos1) != 1  => connection Err!\n" );
 80018fc:	4822      	ldr	r0, [pc, #136]	@ (8001988 <main+0x618>)
 80018fe:	f006 ff6f 	bl	80087e0 <puts>
		    for(int i = 0; i < 10; i++) {
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3301      	adds	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b09      	cmp	r3, #9
 800190c:	dded      	ble.n	80018ea <main+0x57a>
//		    }
//			timer4 = HAL_GetTick();
//		}


		HAL_IWDG_Refresh(&hiwdg); //reset watchdog
 800190e:	481f      	ldr	r0, [pc, #124]	@ (800198c <main+0x61c>)
 8001910:	f002 ff23 	bl	800475a <HAL_IWDG_Refresh>
		if((HAL_GetTick() - timer1) > 500) { //  500ms
 8001914:	e59f      	b.n	8001456 <main+0xe6>
 8001916:	bf00      	nop
 8001918:	08009854 	.word	0x08009854
 800191c:	08009858 	.word	0x08009858
 8001920:	200002b4 	.word	0x200002b4
 8001924:	200001f6 	.word	0x200001f6
 8001928:	20000223 	.word	0x20000223
 800192c:	20000219 	.word	0x20000219
 8001930:	2000020a 	.word	0x2000020a
 8001934:	20000200 	.word	0x20000200
 8001938:	200001ec 	.word	0x200001ec
 800193c:	200001e2 	.word	0x200001e2
 8001940:	200001d8 	.word	0x200001d8
 8001944:	200001ce 	.word	0x200001ce
 8001948:	200001c4 	.word	0x200001c4
 800194c:	200001ba 	.word	0x200001ba
 8001950:	200001b0 	.word	0x200001b0
 8001954:	08009864 	.word	0x08009864
 8001958:	20000230 	.word	0x20000230
 800195c:	0800988c 	.word	0x0800988c
 8001960:	0800983c 	.word	0x0800983c
 8001964:	080098a4 	.word	0x080098a4
 8001968:	08009894 	.word	0x08009894
 800196c:	20000144 	.word	0x20000144
 8001970:	20000180 	.word	0x20000180
 8001974:	080098ac 	.word	0x080098ac
 8001978:	20000184 	.word	0x20000184
 800197c:	20000188 	.word	0x20000188
 8001980:	2000013c 	.word	0x2000013c
 8001984:	080098b8 	.word	0x080098b8
 8001988:	080098f8 	.word	0x080098f8
 800198c:	2000012c 	.word	0x2000012c

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	@ 0x50
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	2230      	movs	r2, #48	@ 0x30
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 f81e 	bl	80089e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <SystemClock_Config+0xd0>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	4a28      	ldr	r2, [pc, #160]	@ (8001a60 <SystemClock_Config+0xd0>)
 80019be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <SystemClock_Config+0xd0>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <SystemClock_Config+0xd4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a22      	ldr	r2, [pc, #136]	@ (8001a64 <SystemClock_Config+0xd4>)
 80019da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <SystemClock_Config+0xd4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019ec:	2309      	movs	r3, #9
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019f6:	2301      	movs	r3, #1
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fa:	2302      	movs	r3, #2
 80019fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a04:	2304      	movs	r3, #4
 8001a06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001a08:	2360      	movs	r3, #96	@ 0x60
 8001a0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a10:	2304      	movs	r3, #4
 8001a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 ffd5 	bl	80049c8 <HAL_RCC_OscConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a24:	f000 fa52 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a28:	230f      	movs	r3, #15
 8001a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2101      	movs	r1, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fa36 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a52:	f000 fa3b 	bl	8001ecc <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3750      	adds	r7, #80	@ 0x50
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000

08001a68 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e009      	b.n	8001a8e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	60ba      	str	r2, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fbc4 	bl	8001210 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dbf1      	blt.n	8001a7a <_write+0x12>
  }
  return len;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <sim800_power_on>:


void sim800_power_on() {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

    //Sim800 PWRKEY = hight
    HAL_GPIO_WritePin(GPIOD, GATE_PWRKEY_Pin, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <sim800_power_on+0x40>)
 8001aaa:	f002 fde1 	bl	8004670 <HAL_GPIO_WritePin>
    //Sim800 PowerOn = On
    HAL_GPIO_WritePin(GPIOD, GATE_V_SIM_Pin, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <sim800_power_on+0x40>)
 8001ab4:	f002 fddc 	bl	8004670 <HAL_GPIO_WritePin>
    HAL_Delay(700);
 8001ab8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001abc:	f001 fa7e 	bl	8002fbc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GATE_PWRKEY_Pin, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <sim800_power_on+0x40>)
 8001ac6:	f002 fdd3 	bl	8004670 <HAL_GPIO_WritePin>
    HAL_Delay(1200);
 8001aca:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001ace:	f001 fa75 	bl	8002fbc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GATE_PWRKEY_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <sim800_power_on+0x40>)
 8001ad8:	f002 fdca 	bl	8004670 <HAL_GPIO_WritePin>
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <sim800_power_off>:


void sim800_power_off() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    //Sim800 PowerOn = Off
    HAL_GPIO_WritePin(GPIOD, GATE_V_SIM_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2101      	movs	r1, #1
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <sim800_power_off+0x14>)
 8001aee:	f002 fdbf 	bl	8004670 <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40020c00 	.word	0x40020c00

08001afc <reset_sim800_connect_to_server>:


int reset_sim800_connect_to_server() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af04      	add	r7, sp, #16

	int resp = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]

	HAL_IWDG_Refresh(&hiwdg); //reset wdg
 8001b06:	4899      	ldr	r0, [pc, #612]	@ (8001d6c <reset_sim800_connect_to_server+0x270>)
 8001b08:	f002 fe27 	bl	800475a <HAL_IWDG_Refresh>

    sim800_power_off();
 8001b0c:	f7ff ffea 	bl	8001ae4 <sim800_power_off>
    HAL_Delay(5000);
 8001b10:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001b14:	f001 fa52 	bl	8002fbc <HAL_Delay>
    sim800_power_on();
 8001b18:	f7ff ffc2 	bl	8001aa0 <sim800_power_on>
    HAL_Delay(5000);
 8001b1c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001b20:	f001 fa4c 	bl	8002fbc <HAL_Delay>

    HAL_IWDG_Refresh(&hiwdg); //reset wdg
 8001b24:	4891      	ldr	r0, [pc, #580]	@ (8001d6c <reset_sim800_connect_to_server+0x270>)
 8001b26:	f002 fe18 	bl	800475a <HAL_IWDG_Refresh>

    for(int i = 0; i < 1000; i++) {
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	e01a      	b.n	8001b66 <reset_sim800_connect_to_server+0x6a>
    	HAL_Delay(100);
 8001b30:	2064      	movs	r0, #100	@ 0x64
 8001b32:	f001 fa43 	bl	8002fbc <HAL_Delay>
    	HAL_IWDG_Refresh(&hiwdg); //reset wdg
 8001b36:	488d      	ldr	r0, [pc, #564]	@ (8001d6c <reset_sim800_connect_to_server+0x270>)
 8001b38:	f002 fe0f 	bl	800475a <HAL_IWDG_Refresh>
    	resp = ATC_SendReceive(&gsm, "AT\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001b3e:	9303      	str	r3, [sp, #12]
 8001b40:	4b8c      	ldr	r3, [pc, #560]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	2302      	movs	r3, #2
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2364      	movs	r3, #100	@ 0x64
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2264      	movs	r2, #100	@ 0x64
 8001b50:	4989      	ldr	r1, [pc, #548]	@ (8001d78 <reset_sim800_connect_to_server+0x27c>)
 8001b52:	488a      	ldr	r0, [pc, #552]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001b54:	f006 fa86 	bl	8008064 <ATC_SendReceive>
 8001b58:	6038      	str	r0, [r7, #0]
    	if( resp == 1 ) break;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d007      	beq.n	8001b70 <reset_sim800_connect_to_server+0x74>
    for(int i = 0; i < 1000; i++) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b6c:	dbe0      	blt.n	8001b30 <reset_sim800_connect_to_server+0x34>
 8001b6e:	e000      	b.n	8001b72 <reset_sim800_connect_to_server+0x76>
    	if( resp == 1 ) break;
 8001b70:	bf00      	nop
    }

    HAL_IWDG_Refresh(&hiwdg); //reset wdg
 8001b72:	487e      	ldr	r0, [pc, #504]	@ (8001d6c <reset_sim800_connect_to_server+0x270>)
 8001b74:	f002 fdf1 	bl	800475a <HAL_IWDG_Refresh>

    HAL_Delay(25000);
 8001b78:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 8001b7c:	f001 fa1e 	bl	8002fbc <HAL_Delay>

    HAL_IWDG_Refresh(&hiwdg); //reset wdg
 8001b80:	487a      	ldr	r0, [pc, #488]	@ (8001d6c <reset_sim800_connect_to_server+0x270>)
 8001b82:	f002 fdea 	bl	800475a <HAL_IWDG_Refresh>

    resp = ATC_SendReceive(&gsm, "AT\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001b86:	4b7a      	ldr	r3, [pc, #488]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001b88:	9303      	str	r3, [sp, #12]
 8001b8a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2364      	movs	r3, #100	@ 0x64
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	2264      	movs	r2, #100	@ 0x64
 8001b9a:	4977      	ldr	r1, [pc, #476]	@ (8001d78 <reset_sim800_connect_to_server+0x27c>)
 8001b9c:	4877      	ldr	r0, [pc, #476]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001b9e:	f006 fa61 	bl	8008064 <ATC_SendReceive>
 8001ba2:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <reset_sim800_connect_to_server+0xb2>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	e124      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // echo off
    resp = ATC_SendReceive(&gsm, "ATE0\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001bae:	4b70      	ldr	r3, [pc, #448]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001bb0:	9303      	str	r3, [sp, #12]
 8001bb2:	4b70      	ldr	r3, [pc, #448]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001bb4:	9302      	str	r3, [sp, #8]
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2364      	movs	r3, #100	@ 0x64
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2264      	movs	r2, #100	@ 0x64
 8001bc2:	496f      	ldr	r1, [pc, #444]	@ (8001d80 <reset_sim800_connect_to_server+0x284>)
 8001bc4:	486d      	ldr	r0, [pc, #436]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001bc6:	f006 fa4d 	bl	8008064 <ATC_SendReceive>
 8001bca:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <reset_sim800_connect_to_server+0xda>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	e110      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // off all calls
    resp = ATC_SendReceive(&gsm, "AT+GSMBUSY=1\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001bd6:	4b66      	ldr	r3, [pc, #408]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001bd8:	9303      	str	r3, [sp, #12]
 8001bda:	4b66      	ldr	r3, [pc, #408]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2302      	movs	r3, #2
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	2364      	movs	r3, #100	@ 0x64
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	2264      	movs	r2, #100	@ 0x64
 8001bea:	4966      	ldr	r1, [pc, #408]	@ (8001d84 <reset_sim800_connect_to_server+0x288>)
 8001bec:	4863      	ldr	r0, [pc, #396]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001bee:	f006 fa39 	bl	8008064 <ATC_SendReceive>
 8001bf2:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <reset_sim800_connect_to_server+0x102>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	e0fc      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // sms not in TE
    resp = ATC_SendReceive(&gsm, "AT+CNMI=0,0\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001c00:	9303      	str	r3, [sp, #12]
 8001c02:	4b5c      	ldr	r3, [pc, #368]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	2302      	movs	r3, #2
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	2364      	movs	r3, #100	@ 0x64
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2264      	movs	r2, #100	@ 0x64
 8001c12:	495d      	ldr	r1, [pc, #372]	@ (8001d88 <reset_sim800_connect_to_server+0x28c>)
 8001c14:	4859      	ldr	r0, [pc, #356]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001c16:	f006 fa25 	bl	8008064 <ATC_SendReceive>
 8001c1a:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d001      	beq.n	8001c26 <reset_sim800_connect_to_server+0x12a>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	e0e8      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // sms text mode
    resp = ATC_SendReceive(&gsm, "AT+CMGF=1\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001c26:	4b52      	ldr	r3, [pc, #328]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	4b52      	ldr	r3, [pc, #328]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2302      	movs	r3, #2
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2364      	movs	r3, #100	@ 0x64
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	2264      	movs	r2, #100	@ 0x64
 8001c3a:	4954      	ldr	r1, [pc, #336]	@ (8001d8c <reset_sim800_connect_to_server+0x290>)
 8001c3c:	484f      	ldr	r0, [pc, #316]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001c3e:	f006 fa11 	bl	8008064 <ATC_SendReceive>
 8001c42:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <reset_sim800_connect_to_server+0x152>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	e0d4      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // signal quality
    resp = ATC_SendReceive(&gsm, "AT+CSQ\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001c4e:	4b48      	ldr	r3, [pc, #288]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001c50:	9303      	str	r3, [sp, #12]
 8001c52:	4b48      	ldr	r3, [pc, #288]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	2302      	movs	r3, #2
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	2364      	movs	r3, #100	@ 0x64
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2264      	movs	r2, #100	@ 0x64
 8001c62:	494b      	ldr	r1, [pc, #300]	@ (8001d90 <reset_sim800_connect_to_server+0x294>)
 8001c64:	4845      	ldr	r0, [pc, #276]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001c66:	f006 f9fd 	bl	8008064 <ATC_SendReceive>
 8001c6a:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <reset_sim800_connect_to_server+0x17a>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	e0c0      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // phone activity status
    resp = ATC_SendReceive(&gsm, "AT+CPAS\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001c76:	4b3e      	ldr	r3, [pc, #248]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001c78:	9303      	str	r3, [sp, #12]
 8001c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001c7c:	9302      	str	r3, [sp, #8]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	2364      	movs	r3, #100	@ 0x64
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2300      	movs	r3, #0
 8001c88:	2264      	movs	r2, #100	@ 0x64
 8001c8a:	4942      	ldr	r1, [pc, #264]	@ (8001d94 <reset_sim800_connect_to_server+0x298>)
 8001c8c:	483b      	ldr	r0, [pc, #236]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001c8e:	f006 f9e9 	bl	8008064 <ATC_SendReceive>
 8001c92:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d001      	beq.n	8001c9e <reset_sim800_connect_to_server+0x1a2>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	e0ac      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>


    // deactivate gprs context
    resp = ATC_SendReceive(&gsm, "AT+CIPSHUT\r\n", 100, NULL, 5000, 2, "\r\nSHUT OK\r\n", "\r\nERROR\r\n");
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001ca0:	9303      	str	r3, [sp, #12]
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <reset_sim800_connect_to_server+0x29c>)
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2264      	movs	r2, #100	@ 0x64
 8001cb4:	4939      	ldr	r1, [pc, #228]	@ (8001d9c <reset_sim800_connect_to_server+0x2a0>)
 8001cb6:	4831      	ldr	r0, [pc, #196]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001cb8:	f006 f9d4 	bl	8008064 <ATC_SendReceive>
 8001cbc:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d001      	beq.n	8001cc8 <reset_sim800_connect_to_server+0x1cc>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	e097      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // single ip conection
    resp = ATC_SendReceive(&gsm, "AT+CIPMUX=0\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001cc8:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001cca:	9303      	str	r3, [sp, #12]
 8001ccc:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2364      	movs	r3, #100	@ 0x64
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2264      	movs	r2, #100	@ 0x64
 8001cdc:	4930      	ldr	r1, [pc, #192]	@ (8001da0 <reset_sim800_connect_to_server+0x2a4>)
 8001cde:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001ce0:	f006 f9c0 	bl	8008064 <ATC_SendReceive>
 8001ce4:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <reset_sim800_connect_to_server+0x1f4>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	e083      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // attach gprs
    resp = ATC_SendReceive(&gsm, "AT+CGATT=1\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001cf2:	9303      	str	r3, [sp, #12]
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2364      	movs	r3, #100	@ 0x64
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	2264      	movs	r2, #100	@ 0x64
 8001d04:	4927      	ldr	r1, [pc, #156]	@ (8001da4 <reset_sim800_connect_to_server+0x2a8>)
 8001d06:	481d      	ldr	r0, [pc, #116]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001d08:	f006 f9ac 	bl	8008064 <ATC_SendReceive>
 8001d0c:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d001      	beq.n	8001d18 <reset_sim800_connect_to_server+0x21c>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	e06f      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // apn
    resp = ATC_SendReceive(&gsm, "AT+CSTT=\"wap.orange.md\"\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001d1a:	9303      	str	r3, [sp, #12]
 8001d1c:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2364      	movs	r3, #100	@ 0x64
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2264      	movs	r2, #100	@ 0x64
 8001d2c:	491e      	ldr	r1, [pc, #120]	@ (8001da8 <reset_sim800_connect_to_server+0x2ac>)
 8001d2e:	4813      	ldr	r0, [pc, #76]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001d30:	f006 f998 	bl	8008064 <ATC_SendReceive>
 8001d34:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d001      	beq.n	8001d40 <reset_sim800_connect_to_server+0x244>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	e05b      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
    // bring wireless connection
    resp = ATC_SendReceive(&gsm, "AT+CIICR\r\n", 100, NULL, 5000, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <reset_sim800_connect_to_server+0x274>)
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <reset_sim800_connect_to_server+0x278>)
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	2264      	movs	r2, #100	@ 0x64
 8001d56:	4915      	ldr	r1, [pc, #84]	@ (8001dac <reset_sim800_connect_to_server+0x2b0>)
 8001d58:	4808      	ldr	r0, [pc, #32]	@ (8001d7c <reset_sim800_connect_to_server+0x280>)
 8001d5a:	f006 f983 	bl	8008064 <ATC_SendReceive>
 8001d5e:	6038      	str	r0, [r7, #0]
    if (resp != 1) return resp;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d024      	beq.n	8001db0 <reset_sim800_connect_to_server+0x2b4>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	e046      	b.n	8001df8 <reset_sim800_connect_to_server+0x2fc>
 8001d6a:	bf00      	nop
 8001d6c:	2000012c 	.word	0x2000012c
 8001d70:	0800983c 	.word	0x0800983c
 8001d74:	08009848 	.word	0x08009848
 8001d78:	08009938 	.word	0x08009938
 8001d7c:	20000144 	.word	0x20000144
 8001d80:	08009940 	.word	0x08009940
 8001d84:	08009948 	.word	0x08009948
 8001d88:	08009958 	.word	0x08009958
 8001d8c:	08009968 	.word	0x08009968
 8001d90:	08009830 	.word	0x08009830
 8001d94:	08009974 	.word	0x08009974
 8001d98:	08009990 	.word	0x08009990
 8001d9c:	08009980 	.word	0x08009980
 8001da0:	0800999c 	.word	0x0800999c
 8001da4:	080099ac 	.word	0x080099ac
 8001da8:	080099bc 	.word	0x080099bc
 8001dac:	080099d8 	.word	0x080099d8
    // get local ip address => resp==0 no OK
    resp = ATC_SendReceive(&gsm, "AT+CIFSR\r\n", 100, NULL, 1000, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001db0:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <reset_sim800_connect_to_server+0x304>)
 8001db2:	9303      	str	r3, [sp, #12]
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <reset_sim800_connect_to_server+0x308>)
 8001db6:	9302      	str	r3, [sp, #8]
 8001db8:	2302      	movs	r3, #2
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2264      	movs	r2, #100	@ 0x64
 8001dc6:	4910      	ldr	r1, [pc, #64]	@ (8001e08 <reset_sim800_connect_to_server+0x30c>)
 8001dc8:	4810      	ldr	r0, [pc, #64]	@ (8001e0c <reset_sim800_connect_to_server+0x310>)
 8001dca:	f006 f94b 	bl	8008064 <ATC_SendReceive>
 8001dce:	6038      	str	r0, [r7, #0]
    //if (resp != 1) return resp;

    resp = ATC_SendReceive(&gsm, "AT+CIPSTART=\"TCP\",\"scz.pge.md\",\"16992\"\r\n", 100, NULL, 5000, 2, "\r\nCONNECT OK\r\n", "\r\nERROR\r\n");
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <reset_sim800_connect_to_server+0x304>)
 8001dd2:	9303      	str	r3, [sp, #12]
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <reset_sim800_connect_to_server+0x314>)
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2300      	movs	r3, #0
 8001de4:	2264      	movs	r2, #100	@ 0x64
 8001de6:	490b      	ldr	r1, [pc, #44]	@ (8001e14 <reset_sim800_connect_to_server+0x318>)
 8001de8:	4808      	ldr	r0, [pc, #32]	@ (8001e0c <reset_sim800_connect_to_server+0x310>)
 8001dea:	f006 f93b 	bl	8008064 <ATC_SendReceive>
 8001dee:	6038      	str	r0, [r7, #0]

    HAL_IWDG_Refresh(&hiwdg); //reset wdg
 8001df0:	4809      	ldr	r0, [pc, #36]	@ (8001e18 <reset_sim800_connect_to_server+0x31c>)
 8001df2:	f002 fcb2 	bl	800475a <HAL_IWDG_Refresh>

    return resp;
 8001df6:	683b      	ldr	r3, [r7, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	0800983c 	.word	0x0800983c
 8001e04:	08009848 	.word	0x08009848
 8001e08:	080099e4 	.word	0x080099e4
 8001e0c:	20000144 	.word	0x20000144
 8001e10:	08009a1c 	.word	0x08009a1c
 8001e14:	080099f0 	.word	0x080099f0
 8001e18:	2000012c 	.word	0x2000012c
 8001e1c:	00000000 	.word	0x00000000

08001e20 <startAdcGetU220>:

int startAdcGetU220() {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	// u_bat; 220v; temperature (run adc)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc, 3); // run ADC
 8001e24:	2203      	movs	r2, #3
 8001e26:	4924      	ldr	r1, [pc, #144]	@ (8001eb8 <startAdcGetU220+0x98>)
 8001e28:	4824      	ldr	r0, [pc, #144]	@ (8001ebc <startAdcGetU220+0x9c>)
 8001e2a:	f001 f92f 	bl	800308c <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f001 f8c4 	bl	8002fbc <HAL_Delay>
	if( flagAdcDmaComplit ) {
 8001e34:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <startAdcGetU220+0xa0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d02e      	beq.n	8001e9c <startAdcGetU220+0x7c>

		flagAdcDmaComplit = 0;
 8001e3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <startAdcGetU220+0xa0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Stop_DMA(&hadc1);
 8001e44:	481d      	ldr	r0, [pc, #116]	@ (8001ebc <startAdcGetU220+0x9c>)
 8001e46:	f001 fa31 	bl	80032ac <HAL_ADC_Stop_DMA>

		u_5v = (int)(((adc[1] * 6.6) / 409.5) + 0.5) ;	// 5 volt
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <startAdcGetU220+0x98>)
 8001e4c:	885b      	ldrh	r3, [r3, #2]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb67 	bl	8000524 <__aeabi_i2d>
 8001e56:	a314      	add	r3, pc, #80	@ (adr r3, 8001ea8 <startAdcGetU220+0x88>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	a311      	add	r3, pc, #68	@ (adr r3, 8001eb0 <startAdcGetU220+0x90>)
 8001e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6e:	f7fe fced 	bl	800084c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <startAdcGetU220+0xa4>)
 8001e80:	f7fe fa04 	bl	800028c <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fdc6 	bl	8000a1c <__aeabi_d2iz>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <startAdcGetU220+0xa8>)
 8001e94:	6013      	str	r3, [r2, #0]

		return u_5v;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <startAdcGetU220+0xa8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	e001      	b.n	8001ea0 <startAdcGetU220+0x80>
	} else{
		return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	66666666 	.word	0x66666666
 8001eac:	401a6666 	.word	0x401a6666
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40799800 	.word	0x40799800
 8001eb8:	20000360 	.word	0x20000360
 8001ebc:	20000084 	.word	0x20000084
 8001ec0:	2000035e 	.word	0x2000035e
 8001ec4:	3fe00000 	.word	0x3fe00000
 8001ec8:	2000036c 	.word	0x2000036c

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <Error_Handler+0x8>

08001ed8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001ede:	4a18      	ldr	r2, [pc, #96]	@ (8001f40 <MX_SPI1_Init+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001ee4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001f24:	220a      	movs	r2, #10
 8001f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	@ (8001f3c <MX_SPI1_Init+0x64>)
 8001f2a:	f003 f9e5 	bl	80052f8 <HAL_SPI_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f34:	f7ff ffca 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000378 	.word	0x20000378
 8001f40:	40013000 	.word	0x40013000

08001f44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a19      	ldr	r2, [pc, #100]	@ (8001fc8 <HAL_SPI_MspInit+0x84>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d12b      	bne.n	8001fbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a17      	ldr	r2, [pc, #92]	@ (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_SPI_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f9e:	23e0      	movs	r3, #224	@ 0xe0
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <HAL_SPI_MspInit+0x8c>)
 8001fba:	f002 f9a5 	bl	8004308 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3728      	adds	r7, #40	@ 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40013000 	.word	0x40013000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020000 	.word	0x40020000

08001fd4 <crc_8>:
#include "station.h"

uint8_t crc_8(char *str){
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0xFF;
 8001fdc:	23ff      	movs	r3, #255	@ 0xff
 8001fde:	73fb      	strb	r3, [r7, #15]
	for(uint8_t e = 0; str[e] != '\0'; e++){
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73bb      	strb	r3, [r7, #14]
 8001fe4:	e022      	b.n	800202c <crc_8+0x58>
		crc = crc ^ str[e];
 8001fe6:	7bbb      	ldrb	r3, [r7, #14]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	4053      	eors	r3, r2
 8001ff2:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i =0; i < 8; i++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	737b      	strb	r3, [r7, #13]
 8001ff8:	e012      	b.n	8002020 <crc_8+0x4c>
			if((crc & 0x01) != 0){
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <crc_8+0x40>
				crc = (crc>>1) ^ 0x8C;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 800200e:	43db      	mvns	r3, r3
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	e002      	b.n	800201a <crc_8+0x46>
			} else {
				crc >>= 1;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i =0; i < 8; i++){
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	3301      	adds	r3, #1
 800201e:	737b      	strb	r3, [r7, #13]
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	2b07      	cmp	r3, #7
 8002024:	d9e9      	bls.n	8001ffa <crc_8+0x26>
	for(uint8_t e = 0; str[e] != '\0'; e++){
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	3301      	adds	r3, #1
 800202a:	73bb      	strb	r3, [r7, #14]
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1d6      	bne.n	8001fe6 <crc_8+0x12>
			}
		}
	}
	return crc;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <defaultStrToStruct>:

void defaultStrToStruct(TelData *telData){
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	strcpy(telData->id, ID);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	492d      	ldr	r1, [pc, #180]	@ (8002108 <defaultStrToStruct+0xc0>)
 8002054:	461a      	mov	r2, r3
 8002056:	460b      	mov	r3, r1
 8002058:	cb03      	ldmia	r3!, {r0, r1}
 800205a:	6010      	str	r0, [r2, #0]
 800205c:	6051      	str	r1, [r2, #4]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	7213      	strb	r3, [r2, #8]
	strcpy(telData->i, "0");
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	330a      	adds	r3, #10
 8002066:	4929      	ldr	r1, [pc, #164]	@ (800210c <defaultStrToStruct+0xc4>)
 8002068:	461a      	mov	r2, r3
 800206a:	460b      	mov	r3, r1
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u, "0");
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3314      	adds	r3, #20
 8002074:	4925      	ldr	r1, [pc, #148]	@ (800210c <defaultStrToStruct+0xc4>)
 8002076:	461a      	mov	r2, r3
 8002078:	460b      	mov	r3, r1
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	8013      	strh	r3, [r2, #0]
	strcpy(telData->p, "0");
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	331e      	adds	r3, #30
 8002082:	4922      	ldr	r1, [pc, #136]	@ (800210c <defaultStrToStruct+0xc4>)
 8002084:	461a      	mov	r2, r3
 8002086:	460b      	mov	r3, r1
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u_bat, "0");
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3328      	adds	r3, #40	@ 0x28
 8002090:	491e      	ldr	r1, [pc, #120]	@ (800210c <defaultStrToStruct+0xc4>)
 8002092:	461a      	mov	r2, r3
 8002094:	460b      	mov	r3, r1
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	8013      	strh	r3, [r2, #0]
	strcpy(telData->sq, "0");
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3332      	adds	r3, #50	@ 0x32
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <defaultStrToStruct+0xc4>)
 80020a0:	461a      	mov	r2, r3
 80020a2:	460b      	mov	r3, r1
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u220, "0");
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	333c      	adds	r3, #60	@ 0x3c
 80020ac:	4917      	ldr	r1, [pc, #92]	@ (800210c <defaultStrToStruct+0xc4>)
 80020ae:	461a      	mov	r2, r3
 80020b0:	460b      	mov	r3, r1
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	8013      	strh	r3, [r2, #0]
	strcpy(telData->door, "0");
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3346      	adds	r3, #70	@ 0x46
 80020ba:	4914      	ldr	r1, [pc, #80]	@ (800210c <defaultStrToStruct+0xc4>)
 80020bc:	461a      	mov	r2, r3
 80020be:	460b      	mov	r3, r1
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	8013      	strh	r3, [r2, #0]
	strcpy(telData->temperature, "0");
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3350      	adds	r3, #80	@ 0x50
 80020c8:	4910      	ldr	r1, [pc, #64]	@ (800210c <defaultStrToStruct+0xc4>)
 80020ca:	461a      	mov	r2, r3
 80020cc:	460b      	mov	r3, r1
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	8013      	strh	r3, [r2, #0]
	strcpy(telData->power, "0");
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	335a      	adds	r3, #90	@ 0x5a
 80020d6:	490d      	ldr	r1, [pc, #52]	@ (800210c <defaultStrToStruct+0xc4>)
 80020d8:	461a      	mov	r2, r3
 80020da:	460b      	mov	r3, r1
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	8013      	strh	r3, [r2, #0]
	strcpy(telData->i_max, "0");
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3369      	adds	r3, #105	@ 0x69
 80020e4:	4909      	ldr	r1, [pc, #36]	@ (800210c <defaultStrToStruct+0xc4>)
 80020e6:	461a      	mov	r2, r3
 80020e8:	460b      	mov	r3, r1
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	8013      	strh	r3, [r2, #0]
	strcpy(telData->t_max, "0");
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3373      	adds	r3, #115	@ 0x73
 80020f2:	4906      	ldr	r1, [pc, #24]	@ (800210c <defaultStrToStruct+0xc4>)
 80020f4:	461a      	mov	r2, r3
 80020f6:	460b      	mov	r3, r1
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	8013      	strh	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	08009a2c 	.word	0x08009a2c
 800210c:	08009a38 	.word	0x08009a38

08002110 <decodeStrToStruct>:

void decodeStrToStruct(TelData *telData, char *str){
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]

	char tempStr[10];

	strcpy(telData->id, ID);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4984      	ldr	r1, [pc, #528]	@ (8002330 <decodeStrToStruct+0x220>)
 800211e:	461a      	mov	r2, r3
 8002120:	460b      	mov	r3, r1
 8002122:	cb03      	ldmia	r3!, {r0, r1}
 8002124:	6010      	str	r0, [r2, #0]
 8002126:	6051      	str	r1, [r2, #4]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	7213      	strb	r3, [r2, #8]
	strcpy(telData->i, "0");
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	330a      	adds	r3, #10
 8002130:	4980      	ldr	r1, [pc, #512]	@ (8002334 <decodeStrToStruct+0x224>)
 8002132:	461a      	mov	r2, r3
 8002134:	460b      	mov	r3, r1
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u, "0");
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3314      	adds	r3, #20
 800213e:	497d      	ldr	r1, [pc, #500]	@ (8002334 <decodeStrToStruct+0x224>)
 8002140:	461a      	mov	r2, r3
 8002142:	460b      	mov	r3, r1
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	8013      	strh	r3, [r2, #0]
	strcpy(telData->p, "0");
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	331e      	adds	r3, #30
 800214c:	4979      	ldr	r1, [pc, #484]	@ (8002334 <decodeStrToStruct+0x224>)
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u_bat, "0");
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3328      	adds	r3, #40	@ 0x28
 800215a:	4976      	ldr	r1, [pc, #472]	@ (8002334 <decodeStrToStruct+0x224>)
 800215c:	461a      	mov	r2, r3
 800215e:	460b      	mov	r3, r1
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	8013      	strh	r3, [r2, #0]
	strcpy(telData->sq, "0");
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3332      	adds	r3, #50	@ 0x32
 8002168:	4972      	ldr	r1, [pc, #456]	@ (8002334 <decodeStrToStruct+0x224>)
 800216a:	461a      	mov	r2, r3
 800216c:	460b      	mov	r3, r1
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u220, "0");
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	333c      	adds	r3, #60	@ 0x3c
 8002176:	496f      	ldr	r1, [pc, #444]	@ (8002334 <decodeStrToStruct+0x224>)
 8002178:	461a      	mov	r2, r3
 800217a:	460b      	mov	r3, r1
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	8013      	strh	r3, [r2, #0]
	strcpy(telData->door, "0");
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3346      	adds	r3, #70	@ 0x46
 8002184:	496b      	ldr	r1, [pc, #428]	@ (8002334 <decodeStrToStruct+0x224>)
 8002186:	461a      	mov	r2, r3
 8002188:	460b      	mov	r3, r1
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	8013      	strh	r3, [r2, #0]
	strcpy(telData->temperature, "0");
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3350      	adds	r3, #80	@ 0x50
 8002192:	4968      	ldr	r1, [pc, #416]	@ (8002334 <decodeStrToStruct+0x224>)
 8002194:	461a      	mov	r2, r3
 8002196:	460b      	mov	r3, r1
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	8013      	strh	r3, [r2, #0]
	strcpy(telData->power, "0");
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	335a      	adds	r3, #90	@ 0x5a
 80021a0:	4964      	ldr	r1, [pc, #400]	@ (8002334 <decodeStrToStruct+0x224>)
 80021a2:	461a      	mov	r2, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	8013      	strh	r3, [r2, #0]
	strcpy(telData->i_max, "0");
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3369      	adds	r3, #105	@ 0x69
 80021ae:	4961      	ldr	r1, [pc, #388]	@ (8002334 <decodeStrToStruct+0x224>)
 80021b0:	461a      	mov	r2, r3
 80021b2:	460b      	mov	r3, r1
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	8013      	strh	r3, [r2, #0]
	strcpy(telData->t_max, "0");
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3373      	adds	r3, #115	@ 0x73
 80021bc:	495d      	ldr	r1, [pc, #372]	@ (8002334 <decodeStrToStruct+0x224>)
 80021be:	461a      	mov	r2, r3
 80021c0:	460b      	mov	r3, r1
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	8013      	strh	r3, [r2, #0]

	if (str[0] != '$') return;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b24      	cmp	r3, #36	@ 0x24
 80021cc:	f040 80aa 	bne.w	8002324 <decodeStrToStruct+0x214>
	uint8_t j,k = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i = 1; (str[i] != '\0') && (i < 50); i++){
 80021d4:	2301      	movs	r3, #1
 80021d6:	757b      	strb	r3, [r7, #21]
 80021d8:	e099      	b.n	800230e <decodeStrToStruct+0x1fe>
		if( str[i] != '|') {
 80021da:	7d7b      	ldrb	r3, [r7, #21]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b7c      	cmp	r3, #124	@ 0x7c
 80021e4:	d013      	beq.n	800220e <decodeStrToStruct+0xfe>
			if( str[i] == ';') break;
 80021e6:	7d7b      	ldrb	r3, [r7, #21]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80021f0:	f000 809a 	beq.w	8002328 <decodeStrToStruct+0x218>
			tempStr[k] = str[i];
 80021f4:	7d7b      	ldrb	r3, [r7, #21]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	441a      	add	r2, r3
 80021fa:	7dbb      	ldrb	r3, [r7, #22]
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	3318      	adds	r3, #24
 8002200:	443b      	add	r3, r7
 8002202:	f803 2c10 	strb.w	r2, [r3, #-16]
			k++;
 8002206:	7dbb      	ldrb	r3, [r7, #22]
 8002208:	3301      	adds	r3, #1
 800220a:	75bb      	strb	r3, [r7, #22]
 800220c:	e07c      	b.n	8002308 <decodeStrToStruct+0x1f8>
		}
		else {
			tempStr[k] = '\0';
 800220e:	7dbb      	ldrb	r3, [r7, #22]
 8002210:	3318      	adds	r3, #24
 8002212:	443b      	add	r3, r7
 8002214:	2200      	movs	r2, #0
 8002216:	f803 2c10 	strb.w	r2, [r3, #-16]
			if( j == 0) if(strlen(tempStr)<9) strcpy( telData->i, tempStr );
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <decodeStrToStruct+0x130>
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	4618      	mov	r0, r3
 8002226:	f7fd ffd3 	bl	80001d0 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	2b08      	cmp	r3, #8
 800222e:	d807      	bhi.n	8002240 <decodeStrToStruct+0x130>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	330a      	adds	r3, #10
 8002234:	f107 0208 	add.w	r2, r7, #8
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f006 fc93 	bl	8008b66 <strcpy>
			if( j == 1) if(strlen(tempStr)<9) strcpy( telData->u, tempStr );
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10f      	bne.n	8002266 <decodeStrToStruct+0x156>
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	4618      	mov	r0, r3
 800224c:	f7fd ffc0 	bl	80001d0 <strlen>
 8002250:	4603      	mov	r3, r0
 8002252:	2b08      	cmp	r3, #8
 8002254:	d807      	bhi.n	8002266 <decodeStrToStruct+0x156>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3314      	adds	r3, #20
 800225a:	f107 0208 	add.w	r2, r7, #8
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f006 fc80 	bl	8008b66 <strcpy>
			if( j == 2) if(strlen(tempStr)<9) strcpy( telData->p, tempStr );
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d10f      	bne.n	800228c <decodeStrToStruct+0x17c>
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	4618      	mov	r0, r3
 8002272:	f7fd ffad 	bl	80001d0 <strlen>
 8002276:	4603      	mov	r3, r0
 8002278:	2b08      	cmp	r3, #8
 800227a:	d807      	bhi.n	800228c <decodeStrToStruct+0x17c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	331e      	adds	r3, #30
 8002280:	f107 0208 	add.w	r2, r7, #8
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f006 fc6d 	bl	8008b66 <strcpy>
			if( j == 3) if(strlen(tempStr)<9) strcpy( telData->i_max, tempStr );
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d10f      	bne.n	80022b2 <decodeStrToStruct+0x1a2>
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ff9a 	bl	80001d0 <strlen>
 800229c:	4603      	mov	r3, r0
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d807      	bhi.n	80022b2 <decodeStrToStruct+0x1a2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3369      	adds	r3, #105	@ 0x69
 80022a6:	f107 0208 	add.w	r2, r7, #8
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f006 fc5a 	bl	8008b66 <strcpy>
			if( j == 4) if(strlen(tempStr)<9) strcpy( telData->t_max, tempStr );
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d10f      	bne.n	80022d8 <decodeStrToStruct+0x1c8>
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fd ff87 	bl	80001d0 <strlen>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d807      	bhi.n	80022d8 <decodeStrToStruct+0x1c8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3373      	adds	r3, #115	@ 0x73
 80022cc:	f107 0208 	add.w	r2, r7, #8
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f006 fc47 	bl	8008b66 <strcpy>
			if( j == 5) if(strlen(tempStr)<14) strcpy( telData->power, tempStr );
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d10f      	bne.n	80022fe <decodeStrToStruct+0x1ee>
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fd ff74 	bl	80001d0 <strlen>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b0d      	cmp	r3, #13
 80022ec:	d807      	bhi.n	80022fe <decodeStrToStruct+0x1ee>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	335a      	adds	r3, #90	@ 0x5a
 80022f2:	f107 0208 	add.w	r2, r7, #8
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f006 fc34 	bl	8008b66 <strcpy>
			k = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	75bb      	strb	r3, [r7, #22]
			j++;
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	3301      	adds	r3, #1
 8002306:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 1; (str[i] != '\0') && (i < 50); i++){
 8002308:	7d7b      	ldrb	r3, [r7, #21]
 800230a:	3301      	adds	r3, #1
 800230c:	757b      	strb	r3, [r7, #21]
 800230e:	7d7b      	ldrb	r3, [r7, #21]
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <decodeStrToStruct+0x21a>
 800231a:	7d7b      	ldrb	r3, [r7, #21]
 800231c:	2b31      	cmp	r3, #49	@ 0x31
 800231e:	f67f af5c 	bls.w	80021da <decodeStrToStruct+0xca>
 8002322:	e002      	b.n	800232a <decodeStrToStruct+0x21a>
	if (str[0] != '$') return;
 8002324:	bf00      	nop
 8002326:	e000      	b.n	800232a <decodeStrToStruct+0x21a>
			if( str[i] == ';') break;
 8002328:	bf00      	nop
		}
	}
}
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	08009a2c 	.word	0x08009a2c
 8002334:	08009a38 	.word	0x08009a38

08002338 <strServerToStation>:

int strServerToStation(char * station, char * server, int lenStation){
 8002338:	b580      	push	{r7, lr}
 800233a:	b092      	sub	sp, #72	@ 0x48
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	char val[5] = {0,};
 8002344:	2300      	movs	r3, #0
 8002346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002348:	2300      	movs	r3, #0
 800234a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	char crc[5] = {0,};
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	2300      	movs	r3, #0
 8002354:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	char str[15] = {0,};
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	f8c3 2007 	str.w	r2, [r3, #7]
	int value = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int crc_int = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	63bb      	str	r3, [r7, #56]	@ 0x38

	int lenServer = strlen(server);
 8002372:	68b8      	ldr	r0, [r7, #8]
 8002374:	f7fd ff2c 	bl	80001d0 <strlen>
 8002378:	4603      	mov	r3, r0
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
	int position2 = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	@ 0x30
	int i,k = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	643b      	str	r3, [r7, #64]	@ 0x40
	for(i=0; i < lenStation; i++){
 8002384:	2300      	movs	r3, #0
 8002386:	647b      	str	r3, [r7, #68]	@ 0x44
 8002388:	e007      	b.n	800239a <strServerToStation+0x62>
		station[i] = '\0';
 800238a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
	for(i=0; i < lenStation; i++){
 8002394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002396:	3301      	adds	r3, #1
 8002398:	647b      	str	r3, [r7, #68]	@ 0x44
 800239a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	dbf3      	blt.n	800238a <strServerToStation+0x52>
	}
	if (server[0] != '$') return 1;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b24      	cmp	r3, #36	@ 0x24
 80023a8:	d001      	beq.n	80023ae <strServerToStation+0x76>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e087      	b.n	80024be <strServerToStation+0x186>
	if (server[1] != '2') return 1;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3301      	adds	r3, #1
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b32      	cmp	r3, #50	@ 0x32
 80023b6:	d001      	beq.n	80023bc <strServerToStation+0x84>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e080      	b.n	80024be <strServerToStation+0x186>
	if (server[2] != '|') return 1;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	3302      	adds	r3, #2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b7c      	cmp	r3, #124	@ 0x7c
 80023c4:	d001      	beq.n	80023ca <strServerToStation+0x92>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e079      	b.n	80024be <strServerToStation+0x186>

	for( i=3,k=0; i < lenServer; i++,k++ ){
 80023ca:	2303      	movs	r3, #3
 80023cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ce:	2300      	movs	r3, #0
 80023d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80023d2:	e015      	b.n	8002400 <strServerToStation+0xc8>
		if(server[i] != '|') val[k] = server[i];
 80023d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b7c      	cmp	r3, #124	@ 0x7c
 80023de:	d014      	beq.n	800240a <strServerToStation+0xd2>
 80023e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4413      	add	r3, r2
 80023e6:	7819      	ldrb	r1, [r3, #0]
 80023e8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80023ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ee:	4413      	add	r3, r2
 80023f0:	460a      	mov	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
	for( i=3,k=0; i < lenServer; i++,k++ ){
 80023f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023f6:	3301      	adds	r3, #1
 80023f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80023fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fc:	3301      	adds	r3, #1
 80023fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002404:	429a      	cmp	r2, r3
 8002406:	dbe5      	blt.n	80023d4 <strServerToStation+0x9c>
 8002408:	e000      	b.n	800240c <strServerToStation+0xd4>
		else break;
 800240a:	bf00      	nop
	}
	position2 = i;
 800240c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
	i++;
 8002410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002412:	3301      	adds	r3, #1
 8002414:	647b      	str	r3, [r7, #68]	@ 0x44
	for( k=0; i < lenServer; i++,k++ ){
 8002416:	2300      	movs	r3, #0
 8002418:	643b      	str	r3, [r7, #64]	@ 0x40
 800241a:	e00f      	b.n	800243c <strServerToStation+0x104>
		crc[k] = server[i];
 800241c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	7819      	ldrb	r1, [r3, #0]
 8002424:	f107 0220 	add.w	r2, r7, #32
 8002428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800242a:	4413      	add	r3, r2
 800242c:	460a      	mov	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
	for( k=0; i < lenServer; i++,k++ ){
 8002430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002432:	3301      	adds	r3, #1
 8002434:	647b      	str	r3, [r7, #68]	@ 0x44
 8002436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002438:	3301      	adds	r3, #1
 800243a:	643b      	str	r3, [r7, #64]	@ 0x40
 800243c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800243e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002440:	429a      	cmp	r2, r3
 8002442:	dbeb      	blt.n	800241c <strServerToStation+0xe4>
	}
	for(i = 0; i <= position2; i++){
 8002444:	2300      	movs	r3, #0
 8002446:	647b      	str	r3, [r7, #68]	@ 0x44
 8002448:	e00c      	b.n	8002464 <strServerToStation+0x12c>
		str[i] = server[i];
 800244a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	4413      	add	r3, r2
 8002450:	7819      	ldrb	r1, [r3, #0]
 8002452:	f107 0210 	add.w	r2, r7, #16
 8002456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002458:	4413      	add	r3, r2
 800245a:	460a      	mov	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i <= position2; i++){
 800245e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002460:	3301      	adds	r3, #1
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
 8002464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002468:	429a      	cmp	r2, r3
 800246a:	ddee      	ble.n	800244a <strServerToStation+0x112>
	}
	str[i] = '\0';
 800246c:	f107 0210 	add.w	r2, r7, #16
 8002470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002472:	4413      	add	r3, r2
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
	//
	value = atoi(val);
 8002478:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800247c:	4618      	mov	r0, r3
 800247e:	f005 ff3e 	bl	80082fe <atoi>
 8002482:	63f8      	str	r0, [r7, #60]	@ 0x3c
	crc_int = atoi(crc);
 8002484:	f107 0320 	add.w	r3, r7, #32
 8002488:	4618      	mov	r0, r3
 800248a:	f005 ff38 	bl	80082fe <atoi>
 800248e:	63b8      	str	r0, [r7, #56]	@ 0x38
	//
	if ( crc_int != crc_8(str)) return 1;
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fd9d 	bl	8001fd4 <crc_8>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d001      	beq.n	80024a8 <strServerToStation+0x170>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e00a      	b.n	80024be <strServerToStation+0x186>
	value *= 3;
 80024a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sprintf( station, "$R%03d;", value);
 80024b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024b4:	4904      	ldr	r1, [pc, #16]	@ (80024c8 <strServerToStation+0x190>)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f006 f99a 	bl	80087f0 <siprintf>
	return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3748      	adds	r7, #72	@ 0x48
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	08009a3c 	.word	0x08009a3c

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <HAL_MspInit+0x4c>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	4a0f      	ldr	r2, [pc, #60]	@ (8002518 <HAL_MspInit+0x4c>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <HAL_MspInit+0x4c>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <HAL_MspInit+0x4c>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	4a08      	ldr	r2, [pc, #32]	@ (8002518 <HAL_MspInit+0x4c>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_MspInit+0x4c>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <NMI_Handler+0x4>

08002524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <MemManage_Handler+0x4>

08002534 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <UsageFault_Handler+0x4>

08002544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002572:	f000 fd03 	bl	8002f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <TIM2_IRQHandler+0x10>)
 8002582:	f002 ff91 	bl	80054a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200003d4 	.word	0x200003d4

08002590 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <USART1_IRQHandler+0x10>)
 8002596:	f003 fe59 	bl	800624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200004ac 	.word	0x200004ac

080025a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <USART2_IRQHandler+0x10>)
 80025aa:	f003 fe4f 	bl	800624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200004f4 	.word	0x200004f4

080025b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <USART3_IRQHandler+0x10>)
 80025be:	f003 fe45 	bl	800624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	2000053c 	.word	0x2000053c

080025cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <UART4_IRQHandler+0x10>)
 80025d2:	f003 fe3b 	bl	800624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000041c 	.word	0x2000041c

080025e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <UART5_IRQHandler+0x10>)
 80025e6:	f003 fe31 	bl	800624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000464 	.word	0x20000464

080025f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <DMA2_Stream0_IRQHandler+0x10>)
 80025fa:	f001 fc0f 	bl	8003e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200000cc 	.word	0x200000cc

08002608 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800260c:	4802      	ldr	r0, [pc, #8]	@ (8002618 <DMA2_Stream2_IRQHandler+0x10>)
 800260e:	f001 fc05 	bl	8003e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000584 	.word	0x20000584

0800261c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002620:	4802      	ldr	r0, [pc, #8]	@ (800262c <DMA2_Stream7_IRQHandler+0x10>)
 8002622:	f001 fbfb 	bl	8003e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200005e4 	.word	0x200005e4

08002630 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e00a      	b.n	8002658 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002642:	f3af 8000 	nop.w
 8002646:	4601      	mov	r1, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	60ba      	str	r2, [r7, #8]
 800264e:	b2ca      	uxtb	r2, r1
 8002650:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	dbf0      	blt.n	8002642 <_read+0x12>
  }

  return len;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <_close>:
  }
  return len;
}

int _close(int file)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002692:	605a      	str	r2, [r3, #4]
  return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_isatty>:

int _isatty(int file)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026dc:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <_sbrk+0x5c>)
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <_sbrk+0x60>)
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <_sbrk+0x64>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	@ (800273c <_sbrk+0x68>)
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	429a      	cmp	r2, r3
 8002702:	d207      	bcs.n	8002714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002704:	f006 fa02 	bl	8008b0c <__errno>
 8002708:	4603      	mov	r3, r0
 800270a:	220c      	movs	r2, #12
 800270c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	e009      	b.n	8002728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002714:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <_sbrk+0x64>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	4a05      	ldr	r2, [pc, #20]	@ (8002738 <_sbrk+0x64>)
 8002724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20020000 	.word	0x20020000
 8002734:	00001000 	.word	0x00001000
 8002738:	200003d0 	.word	0x200003d0
 800273c:	20000c78 	.word	0x20000c78

08002740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <SystemInit+0x20>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274a:	4a05      	ldr	r2, [pc, #20]	@ (8002760 <SystemInit+0x20>)
 800274c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002750:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0308 	add.w	r3, r7, #8
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	463b      	mov	r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002780:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <MX_TIM2_Init+0x98>)
 8002782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8002788:	4b1c      	ldr	r3, [pc, #112]	@ (80027fc <MX_TIM2_Init+0x98>)
 800278a:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 800278e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002790:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <MX_TIM2_Init+0x98>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8002796:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <MX_TIM2_Init+0x98>)
 8002798:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800279c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279e:	4b17      	ldr	r3, [pc, #92]	@ (80027fc <MX_TIM2_Init+0x98>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a4:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <MX_TIM2_Init+0x98>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027aa:	4814      	ldr	r0, [pc, #80]	@ (80027fc <MX_TIM2_Init+0x98>)
 80027ac:	f002 fe2d 	bl	800540a <HAL_TIM_Base_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80027b6:	f7ff fb89 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c0:	f107 0308 	add.w	r3, r7, #8
 80027c4:	4619      	mov	r1, r3
 80027c6:	480d      	ldr	r0, [pc, #52]	@ (80027fc <MX_TIM2_Init+0x98>)
 80027c8:	f002 ff5e 	bl	8005688 <HAL_TIM_ConfigClockSource>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80027d2:	f7ff fb7b 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027de:	463b      	mov	r3, r7
 80027e0:	4619      	mov	r1, r3
 80027e2:	4806      	ldr	r0, [pc, #24]	@ (80027fc <MX_TIM2_Init+0x98>)
 80027e4:	f003 f990 	bl	8005b08 <HAL_TIMEx_MasterConfigSynchronization>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027ee:	f7ff fb6d 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200003d4 	.word	0x200003d4

08002800 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002810:	d115      	bne.n	800283e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <HAL_TIM_Base_MspInit+0x48>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_TIM_Base_MspInit+0x48>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_TIM_Base_MspInit+0x48>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	201c      	movs	r0, #28
 8002834:	f001 f923 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002838:	201c      	movs	r0, #28
 800283a:	f001 f93c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800

0800284c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <MX_UART4_Init+0x50>)
 8002854:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <MX_UART4_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <MX_UART4_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002882:	4805      	ldr	r0, [pc, #20]	@ (8002898 <MX_UART4_Init+0x4c>)
 8002884:	f003 f9d0 	bl	8005c28 <HAL_UART_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800288e:	f7ff fb1d 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000041c 	.word	0x2000041c
 800289c:	40004c00 	.word	0x40004c00

080028a0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <MX_UART5_Init+0x50>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2400;
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028ac:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80028b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	@ (80028ec <MX_UART5_Init+0x4c>)
 80028d8:	f003 f9a6 	bl	8005c28 <HAL_UART_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80028e2:	f7ff faf3 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000464 	.word	0x20000464
 80028f0:	40005000 	.word	0x40005000

080028f4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	@ (8002944 <MX_USART1_UART_Init+0x50>)
 80028fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 8002900:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002906:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002918:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 800291a:	220c      	movs	r2, #12
 800291c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	@ (8002940 <MX_USART1_UART_Init+0x4c>)
 800292c:	f003 f97c 	bl	8005c28 <HAL_UART_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002936:	f7ff fac9 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200004ac 	.word	0x200004ac
 8002944:	40011000 	.word	0x40011000

08002948 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 800294e:	4a12      	ldr	r2, [pc, #72]	@ (8002998 <MX_USART2_UART_Init+0x50>)
 8002950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002952:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 8002954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	@ (8002994 <MX_USART2_UART_Init+0x4c>)
 8002980:	f003 f952 	bl	8005c28 <HAL_UART_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800298a:	f7ff fa9f 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200004f4 	.word	0x200004f4
 8002998:	40004400 	.word	0x40004400

0800299c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029a2:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <MX_USART3_UART_Init+0x50>)
 80029a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029ba:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029c0:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029c2:	220c      	movs	r2, #12
 80029c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c6:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029d2:	4805      	ldr	r0, [pc, #20]	@ (80029e8 <MX_USART3_UART_Init+0x4c>)
 80029d4:	f003 f928 	bl	8005c28 <HAL_UART_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029de:	f7ff fa75 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000053c 	.word	0x2000053c
 80029ec:	40004800 	.word	0x40004800

080029f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b092      	sub	sp, #72	@ 0x48
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a94      	ldr	r2, [pc, #592]	@ (8002c60 <HAL_UART_MspInit+0x270>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d134      	bne.n	8002a7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a16:	4b93      	ldr	r3, [pc, #588]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a92      	ldr	r2, [pc, #584]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a22:	4b90      	ldr	r3, [pc, #576]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a32:	4b8c      	ldr	r3, [pc, #560]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	4a8b      	ldr	r2, [pc, #556]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3e:	4b89      	ldr	r3, [pc, #548]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a62:	4619      	mov	r1, r3
 8002a64:	4880      	ldr	r0, [pc, #512]	@ (8002c68 <HAL_UART_MspInit+0x278>)
 8002a66:	f001 fc4f 	bl	8004308 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2034      	movs	r0, #52	@ 0x34
 8002a70:	f001 f805 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a74:	2034      	movs	r0, #52	@ 0x34
 8002a76:	f001 f81e 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a7a:	e17b      	b.n	8002d74 <HAL_UART_MspInit+0x384>
  else if(uartHandle->Instance==UART5)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7a      	ldr	r2, [pc, #488]	@ (8002c6c <HAL_UART_MspInit+0x27c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d153      	bne.n	8002b2e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a8a:	4b76      	ldr	r3, [pc, #472]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a75      	ldr	r2, [pc, #468]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b73      	ldr	r3, [pc, #460]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	4b68      	ldr	r3, [pc, #416]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4a67      	ldr	r2, [pc, #412]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002ac8:	f043 0308 	orr.w	r3, r3, #8
 8002acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ace:	4b65      	ldr	r3, [pc, #404]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ade:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002aec:	2308      	movs	r3, #8
 8002aee:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002af4:	4619      	mov	r1, r3
 8002af6:	485e      	ldr	r0, [pc, #376]	@ (8002c70 <HAL_UART_MspInit+0x280>)
 8002af8:	f001 fc06 	bl	8004308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002afc:	2304      	movs	r3, #4
 8002afe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b14:	4619      	mov	r1, r3
 8002b16:	4857      	ldr	r0, [pc, #348]	@ (8002c74 <HAL_UART_MspInit+0x284>)
 8002b18:	f001 fbf6 	bl	8004308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	2035      	movs	r0, #53	@ 0x35
 8002b22:	f000 ffac 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b26:	2035      	movs	r0, #53	@ 0x35
 8002b28:	f000 ffc5 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
}
 8002b2c:	e122      	b.n	8002d74 <HAL_UART_MspInit+0x384>
  else if(uartHandle->Instance==USART1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a51      	ldr	r2, [pc, #324]	@ (8002c78 <HAL_UART_MspInit+0x288>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	f040 80a9 	bne.w	8002c8c <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	4b49      	ldr	r3, [pc, #292]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	4a48      	ldr	r2, [pc, #288]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b4a:	4b46      	ldr	r3, [pc, #280]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	4b42      	ldr	r3, [pc, #264]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	4a41      	ldr	r2, [pc, #260]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b66:	4b3f      	ldr	r3, [pc, #252]	@ (8002c64 <HAL_UART_MspInit+0x274>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b80:	2303      	movs	r3, #3
 8002b82:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b84:	2307      	movs	r3, #7
 8002b86:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4836      	ldr	r0, [pc, #216]	@ (8002c68 <HAL_UART_MspInit+0x278>)
 8002b90:	f001 fbba 	bl	8004308 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b94:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002b96:	4a3a      	ldr	r2, [pc, #232]	@ (8002c80 <HAL_UART_MspInit+0x290>)
 8002b98:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b9a:	4b38      	ldr	r3, [pc, #224]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002b9c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ba0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ba2:	4b36      	ldr	r3, [pc, #216]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ba8:	4b34      	ldr	r3, [pc, #208]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bae:	4b33      	ldr	r3, [pc, #204]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002bb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bb6:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bce:	4b2b      	ldr	r3, [pc, #172]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002bd4:	4829      	ldr	r0, [pc, #164]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002bd6:	f000 ff89 	bl	8003aec <HAL_DMA_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8002be0:	f7ff f974 	bl	8001ecc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a25      	ldr	r2, [pc, #148]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002be8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bea:	4a24      	ldr	r2, [pc, #144]	@ (8002c7c <HAL_UART_MspInit+0x28c>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002bf0:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002bf2:	4a25      	ldr	r2, [pc, #148]	@ (8002c88 <HAL_UART_MspInit+0x298>)
 8002bf4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002bf6:	4b23      	ldr	r3, [pc, #140]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002bf8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bfc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bfe:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c00:	2240      	movs	r2, #64	@ 0x40
 8002c02:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c04:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c10:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c12:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c18:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c1e:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c24:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c30:	4814      	ldr	r0, [pc, #80]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c32:	f000 ff5b 	bl	8003aec <HAL_DMA_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_UART_MspInit+0x250>
      Error_Handler();
 8002c3c:	f7ff f946 	bl	8001ecc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c44:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c46:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <HAL_UART_MspInit+0x294>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2025      	movs	r0, #37	@ 0x25
 8002c52:	f000 ff14 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c56:	2025      	movs	r0, #37	@ 0x25
 8002c58:	f000 ff2d 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
}
 8002c5c:	e08a      	b.n	8002d74 <HAL_UART_MspInit+0x384>
 8002c5e:	bf00      	nop
 8002c60:	40004c00 	.word	0x40004c00
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40005000 	.word	0x40005000
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	20000584 	.word	0x20000584
 8002c80:	40026440 	.word	0x40026440
 8002c84:	200005e4 	.word	0x200005e4
 8002c88:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3a      	ldr	r2, [pc, #232]	@ (8002d7c <HAL_UART_MspInit+0x38c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d134      	bne.n	8002d00 <HAL_UART_MspInit+0x310>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	4b39      	ldr	r3, [pc, #228]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	4a38      	ldr	r2, [pc, #224]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca6:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	4b32      	ldr	r3, [pc, #200]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a31      	ldr	r2, [pc, #196]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cce:	230c      	movs	r3, #12
 8002cd0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cde:	2307      	movs	r3, #7
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4826      	ldr	r0, [pc, #152]	@ (8002d84 <HAL_UART_MspInit+0x394>)
 8002cea:	f001 fb0d 	bl	8004308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2026      	movs	r0, #38	@ 0x26
 8002cf4:	f000 fec3 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cf8:	2026      	movs	r0, #38	@ 0x26
 8002cfa:	f000 fedc 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
}
 8002cfe:	e039      	b.n	8002d74 <HAL_UART_MspInit+0x384>
  else if(uartHandle->Instance==USART3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a20      	ldr	r2, [pc, #128]	@ (8002d88 <HAL_UART_MspInit+0x398>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d134      	bne.n	8002d74 <HAL_UART_MspInit+0x384>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	4a1b      	ldr	r2, [pc, #108]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d1a:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d36:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <HAL_UART_MspInit+0x390>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d54:	2307      	movs	r3, #7
 8002d56:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d58:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	480b      	ldr	r0, [pc, #44]	@ (8002d8c <HAL_UART_MspInit+0x39c>)
 8002d60:	f001 fad2 	bl	8004308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	2027      	movs	r0, #39	@ 0x27
 8002d6a:	f000 fe88 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d6e:	2027      	movs	r0, #39	@ 0x27
 8002d70:	f000 fea1 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
}
 8002d74:	bf00      	nop
 8002d76:	3748      	adds	r7, #72	@ 0x48
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40004400 	.word	0x40004400
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40004800 	.word	0x40004800
 8002d8c:	40020400 	.word	0x40020400

08002d90 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002d9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002d9c:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002d9e:	2204      	movs	r2, #4
 8002da0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002da2:	4b11      	ldr	r3, [pc, #68]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002da4:	2202      	movs	r2, #2
 8002da6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002db0:	2202      	movs	r2, #2
 8002db2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002dba:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002dd2:	4805      	ldr	r0, [pc, #20]	@ (8002de8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002dd4:	f001 fcd1 	bl	800477a <HAL_PCD_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002dde:	f7ff f875 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000644 	.word	0x20000644

08002dec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	@ 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e0c:	d132      	bne.n	8002e74 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <HAL_PCD_MspInit+0x90>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a19      	ldr	r2, [pc, #100]	@ (8002e7c <HAL_PCD_MspInit+0x90>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <HAL_PCD_MspInit+0x90>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e2a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e3c:	230a      	movs	r3, #10
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4619      	mov	r1, r3
 8002e46:	480e      	ldr	r0, [pc, #56]	@ (8002e80 <HAL_PCD_MspInit+0x94>)
 8002e48:	f001 fa5e 	bl	8004308 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_PCD_MspInit+0x90>)
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e50:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <HAL_PCD_MspInit+0x90>)
 8002e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e56:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <HAL_PCD_MspInit+0x90>)
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e60:	4a06      	ldr	r2, [pc, #24]	@ (8002e7c <HAL_PCD_MspInit+0x90>)
 8002e62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e66:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e68:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <HAL_PCD_MspInit+0x90>)
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002e74:	bf00      	nop
 8002e76:	3728      	adds	r7, #40	@ 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40020000 	.word	0x40020000

08002e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ebc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e88:	f7ff fc5a 	bl	8002740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e8c:	480c      	ldr	r0, [pc, #48]	@ (8002ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e8e:	490d      	ldr	r1, [pc, #52]	@ (8002ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e90:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e94:	e002      	b.n	8002e9c <LoopCopyDataInit>

08002e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9a:	3304      	adds	r3, #4

08002e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea0:	d3f9      	bcc.n	8002e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea8:	e001      	b.n	8002eae <LoopFillZerobss>

08002eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eac:	3204      	adds	r2, #4

08002eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb0:	d3fb      	bcc.n	8002eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f005 fe31 	bl	8008b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb6:	f7fe fa5b 	bl	8001370 <main>
  bx  lr    
 8002eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002ec8:	08009bb0 	.word	0x08009bb0
  ldr r2, =_sbss
 8002ecc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002ed0:	20000c78 	.word	0x20000c78

08002ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed4:	e7fe      	b.n	8002ed4 <ADC_IRQHandler>
	...

08002ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002edc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <HAL_Init+0x40>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f18 <HAL_Init+0x40>)
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_Init+0x40>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <HAL_Init+0x40>)
 8002eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef4:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <HAL_Init+0x40>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a07      	ldr	r2, [pc, #28]	@ (8002f18 <HAL_Init+0x40>)
 8002efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f00:	2003      	movs	r0, #3
 8002f02:	f000 fdb1 	bl	8003a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f06:	200f      	movs	r0, #15
 8002f08:	f000 f808 	bl	8002f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f0c:	f7ff fade 	bl	80024cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023c00 	.word	0x40023c00

08002f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f24:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <HAL_InitTick+0x54>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_InitTick+0x58>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fdc9 	bl	8003ad2 <HAL_SYSTICK_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00e      	b.n	8002f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	d80a      	bhi.n	8002f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f50:	2200      	movs	r2, #0
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	f000 fd91 	bl	8003a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f5c:	4a06      	ldr	r2, [pc, #24]	@ (8002f78 <HAL_InitTick+0x5c>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000008 	.word	0x20000008
 8002f78:	20000004 	.word	0x20000004

08002f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f80:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_IncTick+0x20>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <HAL_IncTick+0x24>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <HAL_IncTick+0x24>)
 8002f8e:	6013      	str	r3, [r2, #0]
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000008 	.word	0x20000008
 8002fa0:	20000b28 	.word	0x20000b28

08002fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <HAL_GetTick+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000b28 	.word	0x20000b28

08002fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff ffee 	bl	8002fa4 <HAL_GetTick>
 8002fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d005      	beq.n	8002fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <HAL_Delay+0x44>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fe2:	bf00      	nop
 8002fe4:	f7ff ffde 	bl	8002fa4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d8f7      	bhi.n	8002fe4 <HAL_Delay+0x28>
  {
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000008 	.word	0x20000008

08003004 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e033      	b.n	8003082 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd ff08 	bl	8000e38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800304a:	f023 0302 	bic.w	r3, r3, #2
 800304e:	f043 0202 	orr.w	r2, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fab8 	bl	80035cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	@ 0x40
 8003072:	e001      	b.n	8003078 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_Start_DMA+0x1e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0e9      	b.n	800327e <HAL_ADC_Start_DMA+0x1f2>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d018      	beq.n	80030f2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <HAL_ADC_Start_DMA+0x1fc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6d      	ldr	r2, [pc, #436]	@ (800328c <HAL_ADC_Start_DMA+0x200>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0c9a      	lsrs	r2, r3, #18
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80030e4:	e002      	b.n	80030ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f9      	bne.n	80030e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003100:	d107      	bne.n	8003112 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003110:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	f040 80a1 	bne.w	8003264 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800314c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800315c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003160:	d106      	bne.n	8003170 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f023 0206 	bic.w	r2, r3, #6
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
 800316e:	e002      	b.n	8003176 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800317e:	4b44      	ldr	r3, [pc, #272]	@ (8003290 <HAL_ADC_Start_DMA+0x204>)
 8003180:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003186:	4a43      	ldr	r2, [pc, #268]	@ (8003294 <HAL_ADC_Start_DMA+0x208>)
 8003188:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	4a42      	ldr	r2, [pc, #264]	@ (8003298 <HAL_ADC_Start_DMA+0x20c>)
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	4a41      	ldr	r2, [pc, #260]	@ (800329c <HAL_ADC_Start_DMA+0x210>)
 8003198:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80031b2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031c2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	334c      	adds	r3, #76	@ 0x4c
 80031ce:	4619      	mov	r1, r3
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f000 fd38 	bl	8003c48 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d12a      	bne.n	800323a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2d      	ldr	r2, [pc, #180]	@ (80032a0 <HAL_ADC_Start_DMA+0x214>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d015      	beq.n	800321a <HAL_ADC_Start_DMA+0x18e>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2c      	ldr	r2, [pc, #176]	@ (80032a4 <HAL_ADC_Start_DMA+0x218>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d105      	bne.n	8003204 <HAL_ADC_Start_DMA+0x178>
 80031f8:	4b25      	ldr	r3, [pc, #148]	@ (8003290 <HAL_ADC_Start_DMA+0x204>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <HAL_ADC_Start_DMA+0x21c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d136      	bne.n	800327c <HAL_ADC_Start_DMA+0x1f0>
 800320e:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <HAL_ADC_Start_DMA+0x204>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d130      	bne.n	800327c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d129      	bne.n	800327c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	e020      	b.n	800327c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a18      	ldr	r2, [pc, #96]	@ (80032a0 <HAL_ADC_Start_DMA+0x214>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d11b      	bne.n	800327c <HAL_ADC_Start_DMA+0x1f0>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d114      	bne.n	800327c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	e00b      	b.n	800327c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000
 800328c:	431bde83 	.word	0x431bde83
 8003290:	40012300 	.word	0x40012300
 8003294:	080037c5 	.word	0x080037c5
 8003298:	0800387f 	.word	0x0800387f
 800329c:	0800389b 	.word	0x0800389b
 80032a0:	40012000 	.word	0x40012000
 80032a4:	40012100 	.word	0x40012100
 80032a8:	40012200 	.word	0x40012200

080032ac <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Stop_DMA+0x1a>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e048      	b.n	8003358 <HAL_ADC_Stop_DMA+0xac>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d130      	bne.n	800334e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032fa:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d10f      	bne.n	800332a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fcf2 	bl	8003cf8 <HAL_DMA_Abort>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003338:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x1c>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e105      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x228>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b09      	cmp	r3, #9
 80033b2:	d925      	bls.n	8003400 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68d9      	ldr	r1, [r3, #12]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	3b1e      	subs	r3, #30
 80033ca:	2207      	movs	r2, #7
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43da      	mvns	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	400a      	ands	r2, r1
 80033d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68d9      	ldr	r1, [r3, #12]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4618      	mov	r0, r3
 80033ec:	4603      	mov	r3, r0
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4403      	add	r3, r0
 80033f2:	3b1e      	subs	r3, #30
 80033f4:	409a      	lsls	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	e022      	b.n	8003446 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6919      	ldr	r1, [r3, #16]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	2207      	movs	r2, #7
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	400a      	ands	r2, r1
 8003422:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6919      	ldr	r1, [r3, #16]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	4618      	mov	r0, r3
 8003436:	4603      	mov	r3, r0
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4403      	add	r3, r0
 800343c:	409a      	lsls	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d824      	bhi.n	8003498 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	3b05      	subs	r3, #5
 8003460:	221f      	movs	r2, #31
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	400a      	ands	r2, r1
 800346e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	4618      	mov	r0, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3b05      	subs	r3, #5
 800348a:	fa00 f203 	lsl.w	r2, r0, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	635a      	str	r2, [r3, #52]	@ 0x34
 8003496:	e04c      	b.n	8003532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d824      	bhi.n	80034ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	3b23      	subs	r3, #35	@ 0x23
 80034b2:	221f      	movs	r2, #31
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43da      	mvns	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	400a      	ands	r2, r1
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	4618      	mov	r0, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	3b23      	subs	r3, #35	@ 0x23
 80034dc:	fa00 f203 	lsl.w	r2, r0, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80034e8:	e023      	b.n	8003532 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	3b41      	subs	r3, #65	@ 0x41
 80034fc:	221f      	movs	r2, #31
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	400a      	ands	r2, r1
 800350a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	4618      	mov	r0, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	3b41      	subs	r3, #65	@ 0x41
 8003526:	fa00 f203 	lsl.w	r2, r0, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003532:	4b22      	ldr	r3, [pc, #136]	@ (80035bc <HAL_ADC_ConfigChannel+0x234>)
 8003534:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a21      	ldr	r2, [pc, #132]	@ (80035c0 <HAL_ADC_ConfigChannel+0x238>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d109      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x1cc>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b12      	cmp	r3, #18
 8003546:	d105      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a19      	ldr	r2, [pc, #100]	@ (80035c0 <HAL_ADC_ConfigChannel+0x238>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d123      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x21e>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b10      	cmp	r3, #16
 8003564:	d003      	beq.n	800356e <HAL_ADC_ConfigChannel+0x1e6>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b11      	cmp	r3, #17
 800356c:	d11b      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b10      	cmp	r3, #16
 8003580:	d111      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003582:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <HAL_ADC_ConfigChannel+0x23c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a10      	ldr	r2, [pc, #64]	@ (80035c8 <HAL_ADC_ConfigChannel+0x240>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	0c9a      	lsrs	r2, r3, #18
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003598:	e002      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	3b01      	subs	r3, #1
 800359e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f9      	bne.n	800359a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40012300 	.word	0x40012300
 80035c0:	40012000 	.word	0x40012000
 80035c4:	20000000 	.word	0x20000000
 80035c8:	431bde83 	.word	0x431bde83

080035cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035d4:	4b79      	ldr	r3, [pc, #484]	@ (80037bc <ADC_Init+0x1f0>)
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	021a      	lsls	r2, r3, #8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003624:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	4a58      	ldr	r2, [pc, #352]	@ (80037c0 <ADC_Init+0x1f4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d022      	beq.n	80036aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003672:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	e00f      	b.n	80036ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0202 	bic.w	r2, r2, #2
 80036d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6899      	ldr	r1, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7e1b      	ldrb	r3, [r3, #24]
 80036e4:	005a      	lsls	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01b      	beq.n	8003730 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003706:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003716:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	3b01      	subs	r3, #1
 8003724:	035a      	lsls	r2, r3, #13
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	e007      	b.n	8003740 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800374e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	3b01      	subs	r3, #1
 800375c:	051a      	lsls	r2, r3, #20
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003774:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003782:	025a      	lsls	r2, r3, #9
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6899      	ldr	r1, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	029a      	lsls	r2, r3, #10
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40012300 	.word	0x40012300
 80037c0:	0f000001 	.word	0x0f000001

080037c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d13c      	bne.n	8003858 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d12b      	bne.n	8003850 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d127      	bne.n	8003850 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003818:	2b00      	cmp	r3, #0
 800381a:	d119      	bne.n	8003850 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0220 	bic.w	r2, r2, #32
 800382a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	f043 0201 	orr.w	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7fd fd77 	bl	8001344 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003856:	e00e      	b.n	8003876 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff fd85 	bl	8003374 <HAL_ADC_ErrorCallback>
}
 800386a:	e004      	b.n	8003876 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f7ff fd67 	bl	8003360 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2240      	movs	r2, #64	@ 0x40
 80038ac:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7ff fd5a 	bl	8003374 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <__NVIC_SetPriorityGrouping>:
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fa:	4a04      	ldr	r2, [pc, #16]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	@ (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	@ (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	@ (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_EncodePriority>:
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	@ 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d902      	bls.n	80039ec <NVIC_EncodePriority+0x30>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3b03      	subs	r3, #3
 80039ea:	e000      	b.n	80039ee <NVIC_EncodePriority+0x32>
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	401a      	ands	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	4313      	orrs	r3, r2
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	@ 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <SysTick_Config>:
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a34:	d301      	bcc.n	8003a3a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <SysTick_Config+0x40>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a42:	210f      	movs	r1, #15
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f7ff ff8e 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <SysTick_Config+0x40>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <SysTick_Config+0x40>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff29 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a90:	f7ff ff3e 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff8e 	bl	80039bc <NVIC_EncodePriority>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff5d 	bl	8003968 <__NVIC_SetPriority>
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff31 	bl	800392c <__NVIC_EnableIRQ>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ffa2 	bl	8003a24 <SysTick_Config>
 8003ae0:	4603      	mov	r3, r0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003af8:	f7ff fa54 	bl	8002fa4 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e099      	b.n	8003c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b28:	e00f      	b.n	8003b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b2a:	f7ff fa3b 	bl	8002fa4 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d908      	bls.n	8003b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e078      	b.n	8003c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e8      	bne.n	8003b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4b38      	ldr	r3, [pc, #224]	@ (8003c44 <HAL_DMA_Init+0x158>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d107      	bne.n	8003bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	4313      	orrs	r3, r2
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d117      	bne.n	8003c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fb0d 	bl	8004210 <DMA_CheckFifoParam>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2240      	movs	r2, #64	@ 0x40
 8003c00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e016      	b.n	8003c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fac4 	bl	80041a4 <DMA_CalcBaseAndBitshift>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	223f      	movs	r2, #63	@ 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	f010803f 	.word	0xf010803f

08003c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_DMA_Start_IT+0x26>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e040      	b.n	8003cf0 <HAL_DMA_Start_IT+0xa8>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d12f      	bne.n	8003ce2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa56 	bl	8004148 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca0:	223f      	movs	r2, #63	@ 0x3f
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0216 	orr.w	r2, r2, #22
 8003cb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e005      	b.n	8003cee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d06:	f7ff f94d 	bl	8002fa4 <HAL_GetTick>
 8003d0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d008      	beq.n	8003d2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2280      	movs	r2, #128	@ 0x80
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e052      	b.n	8003dd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0216 	bic.w	r2, r2, #22
 8003d38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <HAL_DMA_Abort+0x62>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0208 	bic.w	r2, r2, #8
 8003d68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d7a:	e013      	b.n	8003da4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d7c:	f7ff f912 	bl	8002fa4 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d90c      	bls.n	8003da4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2203      	movs	r2, #3
 8003d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e015      	b.n	8003dd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e4      	bne.n	8003d7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db6:	223f      	movs	r2, #63	@ 0x3f
 8003db8:	409a      	lsls	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00c      	b.n	8003e10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2205      	movs	r2, #5
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e28:	4b8e      	ldr	r3, [pc, #568]	@ (8004064 <HAL_DMA_IRQHandler+0x248>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a8e      	ldr	r2, [pc, #568]	@ (8004068 <HAL_DMA_IRQHandler+0x24c>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	0a9b      	lsrs	r3, r3, #10
 8003e34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	2208      	movs	r2, #8
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01a      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0204 	bic.w	r2, r2, #4
 8003e6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	2208      	movs	r2, #8
 8003e76:	409a      	lsls	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d012      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eaa:	2201      	movs	r2, #1
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb6:	f043 0202 	orr.w	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d012      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eec:	f043 0204 	orr.w	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef8:	2210      	movs	r2, #16
 8003efa:	409a      	lsls	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d043      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d03c      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f16:	2210      	movs	r2, #16
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d018      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d108      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d024      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
 8003f4a:	e01f      	b.n	8003f8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01b      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
 8003f5c:	e016      	b.n	8003f8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d107      	bne.n	8003f7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0208 	bic.w	r2, r2, #8
 8003f7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	2220      	movs	r2, #32
 8003f92:	409a      	lsls	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 808f 	beq.w	80040bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8087 	beq.w	80040bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d136      	bne.n	8004034 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0216 	bic.w	r2, r2, #22
 8003fd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fe4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <HAL_DMA_IRQHandler+0x1da>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0208 	bic.w	r2, r2, #8
 8004004:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	223f      	movs	r2, #63	@ 0x3f
 800400c:	409a      	lsls	r2, r3
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004026:	2b00      	cmp	r3, #0
 8004028:	d07e      	beq.n	8004128 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
        }
        return;
 8004032:	e079      	b.n	8004128 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01d      	beq.n	800407e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10d      	bne.n	800406c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004054:	2b00      	cmp	r3, #0
 8004056:	d031      	beq.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
 8004060:	e02c      	b.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
 8004062:	bf00      	nop
 8004064:	20000000 	.word	0x20000000
 8004068:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d023      	beq.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
 800407c:	e01e      	b.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0210 	bic.w	r2, r2, #16
 800409a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d032      	beq.n	800412a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d022      	beq.n	8004116 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2205      	movs	r2, #5
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	3301      	adds	r3, #1
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d307      	bcc.n	8004104 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f2      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x2cc>
 8004102:	e000      	b.n	8004106 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004104:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
 8004126:	e000      	b.n	800412a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004128:	bf00      	nop
    }
  }
}
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004164:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	d108      	bne.n	8004188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004186:	e007      	b.n	8004198 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	3b10      	subs	r3, #16
 80041b4:	4a14      	ldr	r2, [pc, #80]	@ (8004208 <DMA_CalcBaseAndBitshift+0x64>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041be:	4a13      	ldr	r2, [pc, #76]	@ (800420c <DMA_CalcBaseAndBitshift+0x68>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d909      	bls.n	80041e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80041e4:	e007      	b.n	80041f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	aaaaaaab 	.word	0xaaaaaaab
 800420c:	08009a64 	.word	0x08009a64

08004210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11f      	bne.n	800426a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d856      	bhi.n	80042de <DMA_CheckFifoParam+0xce>
 8004230:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <DMA_CheckFifoParam+0x28>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	08004249 	.word	0x08004249
 800423c:	0800425b 	.word	0x0800425b
 8004240:	08004249 	.word	0x08004249
 8004244:	080042df 	.word	0x080042df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d046      	beq.n	80042e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004258:	e043      	b.n	80042e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004262:	d140      	bne.n	80042e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e03d      	b.n	80042e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004272:	d121      	bne.n	80042b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d837      	bhi.n	80042ea <DMA_CheckFifoParam+0xda>
 800427a:	a201      	add	r2, pc, #4	@ (adr r2, 8004280 <DMA_CheckFifoParam+0x70>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004291 	.word	0x08004291
 8004284:	08004297 	.word	0x08004297
 8004288:	08004291 	.word	0x08004291
 800428c:	080042a9 	.word	0x080042a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      break;
 8004294:	e030      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d025      	beq.n	80042ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a6:	e022      	b.n	80042ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042b0:	d11f      	bne.n	80042f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042b6:	e01c      	b.n	80042f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d903      	bls.n	80042c6 <DMA_CheckFifoParam+0xb6>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d003      	beq.n	80042cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042c4:	e018      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ca:	e015      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00e      	beq.n	80042f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      break;
 80042dc:	e00b      	b.n	80042f6 <DMA_CheckFifoParam+0xe6>
      break;
 80042de:	bf00      	nop
 80042e0:	e00a      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e2:	bf00      	nop
 80042e4:	e008      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
 80042e8:	e006      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
    }
  } 
  
  return status; 
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop

08004308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	@ 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e16b      	b.n	80045fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004324:	2201      	movs	r2, #1
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	f040 815a 	bne.w	80045f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d005      	beq.n	800435a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004356:	2b02      	cmp	r3, #2
 8004358:	d130      	bne.n	80043bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	2203      	movs	r2, #3
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004390:	2201      	movs	r2, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0201 	and.w	r2, r3, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d017      	beq.n	80043f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2203      	movs	r2, #3
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d123      	bne.n	800444c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	08da      	lsrs	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3208      	adds	r2, #8
 800440c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	220f      	movs	r2, #15
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	08da      	lsrs	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3208      	adds	r2, #8
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	2203      	movs	r2, #3
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0203 	and.w	r2, r3, #3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80b4 	beq.w	80045f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b60      	ldr	r3, [pc, #384]	@ (8004614 <HAL_GPIO_Init+0x30c>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	4a5f      	ldr	r2, [pc, #380]	@ (8004614 <HAL_GPIO_Init+0x30c>)
 8004498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800449c:	6453      	str	r3, [r2, #68]	@ 0x44
 800449e:	4b5d      	ldr	r3, [pc, #372]	@ (8004614 <HAL_GPIO_Init+0x30c>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004618 <HAL_GPIO_Init+0x310>)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	3302      	adds	r3, #2
 80044b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	220f      	movs	r2, #15
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a52      	ldr	r2, [pc, #328]	@ (800461c <HAL_GPIO_Init+0x314>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <HAL_GPIO_Init+0x226>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a51      	ldr	r2, [pc, #324]	@ (8004620 <HAL_GPIO_Init+0x318>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d025      	beq.n	800452a <HAL_GPIO_Init+0x222>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a50      	ldr	r2, [pc, #320]	@ (8004624 <HAL_GPIO_Init+0x31c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <HAL_GPIO_Init+0x21e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004628 <HAL_GPIO_Init+0x320>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_Init+0x21a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4e      	ldr	r2, [pc, #312]	@ (800462c <HAL_GPIO_Init+0x324>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_Init+0x216>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004630 <HAL_GPIO_Init+0x328>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_Init+0x212>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4c      	ldr	r2, [pc, #304]	@ (8004634 <HAL_GPIO_Init+0x32c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_Init+0x20e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4b      	ldr	r2, [pc, #300]	@ (8004638 <HAL_GPIO_Init+0x330>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_Init+0x20a>
 800450e:	2307      	movs	r3, #7
 8004510:	e00e      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004512:	2308      	movs	r3, #8
 8004514:	e00c      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004516:	2306      	movs	r3, #6
 8004518:	e00a      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800451a:	2305      	movs	r3, #5
 800451c:	e008      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800451e:	2304      	movs	r3, #4
 8004520:	e006      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004522:	2303      	movs	r3, #3
 8004524:	e004      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004526:	2302      	movs	r3, #2
 8004528:	e002      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800452e:	2300      	movs	r3, #0
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	f002 0203 	and.w	r2, r2, #3
 8004536:	0092      	lsls	r2, r2, #2
 8004538:	4093      	lsls	r3, r2
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004540:	4935      	ldr	r1, [pc, #212]	@ (8004618 <HAL_GPIO_Init+0x310>)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	3302      	adds	r3, #2
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800454e:	4b3b      	ldr	r3, [pc, #236]	@ (800463c <HAL_GPIO_Init+0x334>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004572:	4a32      	ldr	r2, [pc, #200]	@ (800463c <HAL_GPIO_Init+0x334>)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004578:	4b30      	ldr	r3, [pc, #192]	@ (800463c <HAL_GPIO_Init+0x334>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800459c:	4a27      	ldr	r2, [pc, #156]	@ (800463c <HAL_GPIO_Init+0x334>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045a2:	4b26      	ldr	r3, [pc, #152]	@ (800463c <HAL_GPIO_Init+0x334>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045c6:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <HAL_GPIO_Init+0x334>)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045cc:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_GPIO_Init+0x334>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045f0:	4a12      	ldr	r2, [pc, #72]	@ (800463c <HAL_GPIO_Init+0x334>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	f67f ae90 	bls.w	8004324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	3724      	adds	r7, #36	@ 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	40013800 	.word	0x40013800
 800461c:	40020000 	.word	0x40020000
 8004620:	40020400 	.word	0x40020400
 8004624:	40020800 	.word	0x40020800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40021000 	.word	0x40021000
 8004630:	40021400 	.word	0x40021400
 8004634:	40021800 	.word	0x40021800
 8004638:	40021c00 	.word	0x40021c00
 800463c:	40013c00 	.word	0x40013c00

08004640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	887b      	ldrh	r3, [r7, #2]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
 800465c:	e001      	b.n	8004662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]
 800467c:	4613      	mov	r3, r2
 800467e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004680:	787b      	ldrb	r3, [r7, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800468c:	e003      	b.n	8004696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	041a      	lsls	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	619a      	str	r2, [r3, #24]
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046b4:	887a      	ldrh	r2, [r7, #2]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4013      	ands	r3, r2
 80046ba:	041a      	lsls	r2, r3, #16
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	43d9      	mvns	r1, r3
 80046c0:	887b      	ldrh	r3, [r7, #2]
 80046c2:	400b      	ands	r3, r1
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	619a      	str	r2, [r3, #24]
}
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e034      	b.n	8004752 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80046f0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f245 5255 	movw	r2, #21845	@ 0x5555
 80046fa:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6852      	ldr	r2, [r2, #4]
 8004704:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6892      	ldr	r2, [r2, #8]
 800470e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004710:	f7fe fc48 	bl	8002fa4 <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004716:	e00f      	b.n	8004738 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004718:	f7fe fc44 	bl	8002fa4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b31      	cmp	r3, #49	@ 0x31
 8004724:	d908      	bls.n	8004738 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e00c      	b.n	8004752 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e8      	bne.n	8004718 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800474e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800476a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af02      	add	r7, sp, #8
 8004780:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e101      	b.n	8004990 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fe fb20 	bl	8002dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2203      	movs	r2, #3
 80047b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047ba:	d102      	bne.n	80047c2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f002 ff52 	bl	8007670 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7c1a      	ldrb	r2, [r3, #16]
 80047d4:	f88d 2000 	strb.w	r2, [sp]
 80047d8:	3304      	adds	r3, #4
 80047da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047dc:	f002 fee4 	bl	80075a8 <USB_CoreInit>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0ce      	b.n	8004990 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f002 ff4a 	bl	8007692 <USB_SetCurrentMode>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0bf      	b.n	8004990 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e04a      	b.n	80048ac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	3315      	adds	r3, #21
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800482a:	7bfa      	ldrb	r2, [r7, #15]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	3314      	adds	r3, #20
 800483a:	7bfa      	ldrb	r2, [r7, #15]
 800483c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800483e:	7bfa      	ldrb	r2, [r7, #15]
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	b298      	uxth	r0, r3
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	332e      	adds	r3, #46	@ 0x2e
 8004852:	4602      	mov	r2, r0
 8004854:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004856:	7bfa      	ldrb	r2, [r7, #15]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	3318      	adds	r3, #24
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	331c      	adds	r3, #28
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800487e:	7bfa      	ldrb	r2, [r7, #15]
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	3320      	adds	r3, #32
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	3324      	adds	r3, #36	@ 0x24
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	3301      	adds	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	791b      	ldrb	r3, [r3, #4]
 80048b0:	7bfa      	ldrb	r2, [r7, #15]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d3af      	bcc.n	8004816 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	e044      	b.n	8004946 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048bc:	7bfa      	ldrb	r2, [r7, #15]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048d2:	7bfa      	ldrb	r2, [r7, #15]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80048e4:	7bfa      	ldrb	r2, [r7, #15]
 80048e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048e8:	7bfa      	ldrb	r2, [r7, #15]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048fe:	7bfa      	ldrb	r2, [r7, #15]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004914:	7bfa      	ldrb	r2, [r7, #15]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	3301      	adds	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	7bfa      	ldrb	r2, [r7, #15]
 800494c:	429a      	cmp	r2, r3
 800494e:	d3b5      	bcc.n	80048bc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	7c1a      	ldrb	r2, [r3, #16]
 8004958:	f88d 2000 	strb.w	r2, [sp]
 800495c:	3304      	adds	r3, #4
 800495e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004960:	f002 fee4 	bl	800772c <USB_DevInit>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e00c      	b.n	8004990 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f003 f8ac 	bl	8007ae6 <USB_DevDisconnect>

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800499c:	4b08      	ldr	r3, [pc, #32]	@ (80049c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a07      	ldr	r2, [pc, #28]	@ (80049c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80049a2:	f043 0302 	orr.w	r3, r3, #2
 80049a6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80049a8:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	4a05      	ldr	r2, [pc, #20]	@ (80049c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80049b4:	bf30      	wfi
}
 80049b6:	bf00      	nop
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40007000 	.word	0x40007000
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e267      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d075      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049e6:	4b88      	ldr	r3, [pc, #544]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d00c      	beq.n	8004a0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f2:	4b85      	ldr	r3, [pc, #532]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d112      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fe:	4b82      	ldr	r3, [pc, #520]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d05b      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x108>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d157      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e242      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCC_OscConfig+0x74>
 8004a2e:	4b76      	ldr	r3, [pc, #472]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a75      	ldr	r2, [pc, #468]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e01d      	b.n	8004a78 <HAL_RCC_OscConfig+0xb0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x98>
 8004a46:	4b70      	ldr	r3, [pc, #448]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6f      	ldr	r2, [pc, #444]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b6d      	ldr	r3, [pc, #436]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6c      	ldr	r2, [pc, #432]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCC_OscConfig+0xb0>
 8004a60:	4b69      	ldr	r3, [pc, #420]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a68      	ldr	r2, [pc, #416]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b66      	ldr	r3, [pc, #408]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a65      	ldr	r2, [pc, #404]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe fa90 	bl	8002fa4 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fe fa8c 	bl	8002fa4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	@ 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e207      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0xc0>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fa7c 	bl	8002fa4 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fe fa78 	bl	8002fa4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	@ 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1f3      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac2:	4b51      	ldr	r3, [pc, #324]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0xe8>
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d063      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ade:	4b4a      	ldr	r3, [pc, #296]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aea:	4b47      	ldr	r3, [pc, #284]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d11c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af6:	4b44      	ldr	r3, [pc, #272]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d116      	bne.n	8004b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	4b41      	ldr	r3, [pc, #260]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_RCC_OscConfig+0x152>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e1c7      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4937      	ldr	r1, [pc, #220]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2e:	e03a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b38:	4b34      	ldr	r3, [pc, #208]	@ (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fe fa31 	bl	8002fa4 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fe fa2d 	bl	8002fa4 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e1a8      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b58:	4b2b      	ldr	r3, [pc, #172]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4b28      	ldr	r3, [pc, #160]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4925      	ldr	r1, [pc, #148]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
 8004b78:	e015      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7a:	4b24      	ldr	r3, [pc, #144]	@ (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fe fa10 	bl	8002fa4 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b88:	f7fe fa0c 	bl	8002fa4 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e187      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d036      	beq.n	8004c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bba:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <HAL_RCC_OscConfig+0x248>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fe f9f0 	bl	8002fa4 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc8:	f7fe f9ec 	bl	8002fa4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e167      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bda:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x200>
 8004be6:	e01b      	b.n	8004c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be8:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <HAL_RCC_OscConfig+0x248>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fe f9d9 	bl	8002fa4 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf4:	e00e      	b.n	8004c14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf6:	f7fe f9d5 	bl	8002fa4 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d907      	bls.n	8004c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e150      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	42470000 	.word	0x42470000
 8004c10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	4b88      	ldr	r3, [pc, #544]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ea      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8097 	beq.w	8004d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c32:	4b81      	ldr	r3, [pc, #516]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	4b7d      	ldr	r3, [pc, #500]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	4a7c      	ldr	r2, [pc, #496]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5e:	4b77      	ldr	r3, [pc, #476]	@ (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d118      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6a:	4b74      	ldr	r3, [pc, #464]	@ (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a73      	ldr	r2, [pc, #460]	@ (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c76:	f7fe f995 	bl	8002fa4 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7e:	f7fe f991 	bl	8002fa4 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e10c      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	4b6a      	ldr	r3, [pc, #424]	@ (8004e3c <HAL_RCC_OscConfig+0x474>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d106      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x2ea>
 8004ca4:	4b64      	ldr	r3, [pc, #400]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca8:	4a63      	ldr	r2, [pc, #396]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb0:	e01c      	b.n	8004cec <HAL_RCC_OscConfig+0x324>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x30c>
 8004cba:	4b5f      	ldr	r3, [pc, #380]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	4a5b      	ldr	r2, [pc, #364]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0x324>
 8004cd4:	4b58      	ldr	r3, [pc, #352]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd8:	4a57      	ldr	r2, [pc, #348]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce0:	4b55      	ldr	r3, [pc, #340]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	4a54      	ldr	r2, [pc, #336]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	f023 0304 	bic.w	r3, r3, #4
 8004cea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fe f956 	bl	8002fa4 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fe f952 	bl	8002fa4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0cb      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d12:	4b49      	ldr	r3, [pc, #292]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ee      	beq.n	8004cfc <HAL_RCC_OscConfig+0x334>
 8004d1e:	e014      	b.n	8004d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d20:	f7fe f940 	bl	8002fa4 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d28:	f7fe f93c 	bl	8002fa4 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0b5      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ee      	bne.n	8004d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d50:	4b39      	ldr	r3, [pc, #228]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	4a38      	ldr	r2, [pc, #224]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80a1 	beq.w	8004ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d66:	4b34      	ldr	r3, [pc, #208]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d05c      	beq.n	8004e2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d141      	bne.n	8004dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b31      	ldr	r3, [pc, #196]	@ (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fe f910 	bl	8002fa4 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d88:	f7fe f90c 	bl	8002fa4 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e087      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	4b27      	ldr	r3, [pc, #156]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	085b      	lsrs	r3, r3, #1
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	491b      	ldr	r1, [pc, #108]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fe f8e5 	bl	8002fa4 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dde:	f7fe f8e1 	bl	8002fa4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e05c      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df0:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x416>
 8004dfc:	e054      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfe:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <HAL_RCC_OscConfig+0x478>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fe f8ce 	bl	8002fa4 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fe f8ca 	bl	8002fa4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e045      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <HAL_RCC_OscConfig+0x470>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x444>
 8004e2a:	e03d      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e038      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	40007000 	.word	0x40007000
 8004e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e44:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb4 <HAL_RCC_OscConfig+0x4ec>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d028      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d121      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d11a      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e74:	4013      	ands	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d111      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800

08004eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0cc      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ecc:	4b68      	ldr	r3, [pc, #416]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d90c      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eda:	4b65      	ldr	r3, [pc, #404]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b63      	ldr	r3, [pc, #396]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0b8      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f0c:	4b59      	ldr	r3, [pc, #356]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a58      	ldr	r2, [pc, #352]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f24:	4b53      	ldr	r3, [pc, #332]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a52      	ldr	r2, [pc, #328]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f30:	4b50      	ldr	r3, [pc, #320]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	494d      	ldr	r1, [pc, #308]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d044      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b47      	ldr	r3, [pc, #284]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d119      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e07f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f76:	4b3f      	ldr	r3, [pc, #252]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e06f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f86:	4b3b      	ldr	r3, [pc, #236]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e067      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f96:	4b37      	ldr	r3, [pc, #220]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 0203 	bic.w	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4934      	ldr	r1, [pc, #208]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa8:	f7fd fffc 	bl	8002fa4 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb0:	f7fd fff8 	bl	8002fa4 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e04f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 020c 	and.w	r2, r3, #12
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d1eb      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b25      	ldr	r3, [pc, #148]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d20c      	bcs.n	8005000 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b22      	ldr	r3, [pc, #136]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e032      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800500c:	4b19      	ldr	r3, [pc, #100]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4916      	ldr	r1, [pc, #88]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800502a:	4b12      	ldr	r3, [pc, #72]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	490e      	ldr	r1, [pc, #56]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800503e:	f000 f821 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 8005042:	4602      	mov	r2, r0
 8005044:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	490a      	ldr	r1, [pc, #40]	@ (8005078 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	5ccb      	ldrb	r3, [r1, r3]
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	4a09      	ldr	r2, [pc, #36]	@ (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800505a:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd ff5c 	bl	8002f1c <HAL_InitTick>

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023c00 	.word	0x40023c00
 8005074:	40023800 	.word	0x40023800
 8005078:	08009a4c 	.word	0x08009a4c
 800507c:	20000000 	.word	0x20000000
 8005080:	20000004 	.word	0x20000004

08005084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005088:	b094      	sub	sp, #80	@ 0x50
 800508a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800509c:	4b79      	ldr	r3, [pc, #484]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d00d      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x40>
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	f200 80e1 	bhi.w	8005270 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x34>
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d003      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0x3a>
 80050b6:	e0db      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050b8:	4b73      	ldr	r3, [pc, #460]	@ (8005288 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050bc:	e0db      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050be:	4b73      	ldr	r3, [pc, #460]	@ (800528c <HAL_RCC_GetSysClockFreq+0x208>)
 80050c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050c2:	e0d8      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050c4:	4b6f      	ldr	r3, [pc, #444]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d063      	beq.n	80051a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050da:	4b6a      	ldr	r3, [pc, #424]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	2200      	movs	r2, #0
 80050e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ee:	2300      	movs	r3, #0
 80050f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050f6:	4622      	mov	r2, r4
 80050f8:	462b      	mov	r3, r5
 80050fa:	f04f 0000 	mov.w	r0, #0
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	0159      	lsls	r1, r3, #5
 8005104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005108:	0150      	lsls	r0, r2, #5
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4621      	mov	r1, r4
 8005110:	1a51      	subs	r1, r2, r1
 8005112:	6139      	str	r1, [r7, #16]
 8005114:	4629      	mov	r1, r5
 8005116:	eb63 0301 	sbc.w	r3, r3, r1
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005128:	4659      	mov	r1, fp
 800512a:	018b      	lsls	r3, r1, #6
 800512c:	4651      	mov	r1, sl
 800512e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005132:	4651      	mov	r1, sl
 8005134:	018a      	lsls	r2, r1, #6
 8005136:	4651      	mov	r1, sl
 8005138:	ebb2 0801 	subs.w	r8, r2, r1
 800513c:	4659      	mov	r1, fp
 800513e:	eb63 0901 	sbc.w	r9, r3, r1
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800514e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005156:	4690      	mov	r8, r2
 8005158:	4699      	mov	r9, r3
 800515a:	4623      	mov	r3, r4
 800515c:	eb18 0303 	adds.w	r3, r8, r3
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	462b      	mov	r3, r5
 8005164:	eb49 0303 	adc.w	r3, r9, r3
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005176:	4629      	mov	r1, r5
 8005178:	024b      	lsls	r3, r1, #9
 800517a:	4621      	mov	r1, r4
 800517c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005180:	4621      	mov	r1, r4
 8005182:	024a      	lsls	r2, r1, #9
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800518a:	2200      	movs	r2, #0
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800518e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005190:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005194:	f7fb fc6a 	bl	8000a6c <__aeabi_uldivmod>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4613      	mov	r3, r2
 800519e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a0:	e058      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a2:	4b38      	ldr	r3, [pc, #224]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	2200      	movs	r2, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	4611      	mov	r1, r2
 80051ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051b2:	623b      	str	r3, [r7, #32]
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051bc:	4642      	mov	r2, r8
 80051be:	464b      	mov	r3, r9
 80051c0:	f04f 0000 	mov.w	r0, #0
 80051c4:	f04f 0100 	mov.w	r1, #0
 80051c8:	0159      	lsls	r1, r3, #5
 80051ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ce:	0150      	lsls	r0, r2, #5
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4641      	mov	r1, r8
 80051d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051da:	4649      	mov	r1, r9
 80051dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051f4:	ebb2 040a 	subs.w	r4, r2, sl
 80051f8:	eb63 050b 	sbc.w	r5, r3, fp
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	00eb      	lsls	r3, r5, #3
 8005206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800520a:	00e2      	lsls	r2, r4, #3
 800520c:	4614      	mov	r4, r2
 800520e:	461d      	mov	r5, r3
 8005210:	4643      	mov	r3, r8
 8005212:	18e3      	adds	r3, r4, r3
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	464b      	mov	r3, r9
 8005218:	eb45 0303 	adc.w	r3, r5, r3
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800522a:	4629      	mov	r1, r5
 800522c:	028b      	lsls	r3, r1, #10
 800522e:	4621      	mov	r1, r4
 8005230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005234:	4621      	mov	r1, r4
 8005236:	028a      	lsls	r2, r1, #10
 8005238:	4610      	mov	r0, r2
 800523a:	4619      	mov	r1, r3
 800523c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800523e:	2200      	movs	r2, #0
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	61fa      	str	r2, [r7, #28]
 8005244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005248:	f7fb fc10 	bl	8000a6c <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4613      	mov	r3, r2
 8005252:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005254:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x200>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	0c1b      	lsrs	r3, r3, #16
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	3301      	adds	r3, #1
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005264:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800526e:	e002      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_RCC_GetSysClockFreq+0x204>)
 8005272:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005278:	4618      	mov	r0, r3
 800527a:	3750      	adds	r7, #80	@ 0x50
 800527c:	46bd      	mov	sp, r7
 800527e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800
 8005288:	00f42400 	.word	0x00f42400
 800528c:	007a1200 	.word	0x007a1200

08005290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005294:	4b03      	ldr	r3, [pc, #12]	@ (80052a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005296:	681b      	ldr	r3, [r3, #0]
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	20000000 	.word	0x20000000

080052a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052ac:	f7ff fff0 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	0a9b      	lsrs	r3, r3, #10
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	4903      	ldr	r1, [pc, #12]	@ (80052cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40023800 	.word	0x40023800
 80052cc:	08009a5c 	.word	0x08009a5c

080052d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052d4:	f7ff ffdc 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	0b5b      	lsrs	r3, r3, #13
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	4903      	ldr	r1, [pc, #12]	@ (80052f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052e6:	5ccb      	ldrb	r3, [r1, r3]
 80052e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40023800 	.word	0x40023800
 80052f4:	08009a5c 	.word	0x08009a5c

080052f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07b      	b.n	8005402 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800531a:	d009      	beq.n	8005330 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	61da      	str	r2, [r3, #28]
 8005322:	e005      	b.n	8005330 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fc fdfa 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005366:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b4:	ea42 0103 	orr.w	r1, r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	f003 0104 	and.w	r1, r3, #4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	f003 0210 	and.w	r2, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e041      	b.n	80054a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fd f9e5 	bl	8002800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f000 fa17 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d020      	beq.n	800550c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0202 	mvn.w	r2, #2
 80054dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f9a3 	bl	800583e <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f995 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f9a6 	bl	8005852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d020      	beq.n	8005558 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01b      	beq.n	8005558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0204 	mvn.w	r2, #4
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f97d 	bl	800583e <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f96f 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f980 	bl	8005852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d020      	beq.n	80055a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01b      	beq.n	80055a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0208 	mvn.w	r2, #8
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2204      	movs	r2, #4
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f957 	bl	800583e <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f949 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f95a 	bl	8005852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0210 	mvn.w	r2, #16
 80055c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2208      	movs	r2, #8
 80055c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f931 	bl	800583e <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f923 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f934 	bl	8005852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00c      	beq.n	8005614 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0201 	mvn.w	r2, #1
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f901 	bl	8005816 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00c      	beq.n	8005638 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 faee 	bl	8005c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d007      	beq.n	800565c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f905 	bl	8005866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00c      	beq.n	8005680 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0220 	mvn.w	r2, #32
 8005678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fac0 	bl	8005c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_ConfigClockSource+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0b4      	b.n	800580e <HAL_TIM_ConfigClockSource+0x186>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056dc:	d03e      	beq.n	800575c <HAL_TIM_ConfigClockSource+0xd4>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e2:	f200 8087 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ea:	f000 8086 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x172>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f2:	d87f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b70      	cmp	r3, #112	@ 0x70
 80056f6:	d01a      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xa6>
 80056f8:	2b70      	cmp	r3, #112	@ 0x70
 80056fa:	d87b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b60      	cmp	r3, #96	@ 0x60
 80056fe:	d050      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005700:	2b60      	cmp	r3, #96	@ 0x60
 8005702:	d877      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b50      	cmp	r3, #80	@ 0x50
 8005706:	d03c      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0xfa>
 8005708:	2b50      	cmp	r3, #80	@ 0x50
 800570a:	d873      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b40      	cmp	r3, #64	@ 0x40
 800570e:	d058      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	d86f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b30      	cmp	r3, #48	@ 0x30
 8005716:	d064      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b30      	cmp	r3, #48	@ 0x30
 800571a:	d86b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b20      	cmp	r3, #32
 800571e:	d060      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d867      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005728:	2b10      	cmp	r3, #16
 800572a:	d05a      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 800572c:	e062      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800573e:	f000 f9c3 	bl	8005ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	609a      	str	r2, [r3, #8]
      break;
 800575a:	e04f      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800576c:	f000 f9ac 	bl	8005ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800577e:	609a      	str	r2, [r3, #8]
      break;
 8005780:	e03c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578e:	461a      	mov	r2, r3
 8005790:	f000 f920 	bl	80059d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2150      	movs	r1, #80	@ 0x50
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f979 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 80057a0:	e02c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 f93f 	bl	8005a32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2160      	movs	r1, #96	@ 0x60
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f969 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 80057c0:	e01c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 f900 	bl	80059d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2140      	movs	r1, #64	@ 0x40
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f959 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 80057e0:	e00c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f000 f950 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 80057f2:	e003      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a46      	ldr	r2, [pc, #280]	@ (80059a8 <TIM_Base_SetConfig+0x12c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589a:	d00f      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a43      	ldr	r2, [pc, #268]	@ (80059ac <TIM_Base_SetConfig+0x130>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00b      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a42      	ldr	r2, [pc, #264]	@ (80059b0 <TIM_Base_SetConfig+0x134>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d007      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a41      	ldr	r2, [pc, #260]	@ (80059b4 <TIM_Base_SetConfig+0x138>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a40      	ldr	r2, [pc, #256]	@ (80059b8 <TIM_Base_SetConfig+0x13c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d108      	bne.n	80058ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a35      	ldr	r2, [pc, #212]	@ (80059a8 <TIM_Base_SetConfig+0x12c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d02b      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058dc:	d027      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a32      	ldr	r2, [pc, #200]	@ (80059ac <TIM_Base_SetConfig+0x130>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d023      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a31      	ldr	r2, [pc, #196]	@ (80059b0 <TIM_Base_SetConfig+0x134>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01f      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a30      	ldr	r2, [pc, #192]	@ (80059b4 <TIM_Base_SetConfig+0x138>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01b      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2f      	ldr	r2, [pc, #188]	@ (80059b8 <TIM_Base_SetConfig+0x13c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d017      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2e      	ldr	r2, [pc, #184]	@ (80059bc <TIM_Base_SetConfig+0x140>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2d      	ldr	r2, [pc, #180]	@ (80059c0 <TIM_Base_SetConfig+0x144>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00f      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2c      	ldr	r2, [pc, #176]	@ (80059c4 <TIM_Base_SetConfig+0x148>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2b      	ldr	r2, [pc, #172]	@ (80059c8 <TIM_Base_SetConfig+0x14c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d007      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2a      	ldr	r2, [pc, #168]	@ (80059cc <TIM_Base_SetConfig+0x150>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a29      	ldr	r2, [pc, #164]	@ (80059d0 <TIM_Base_SetConfig+0x154>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a10      	ldr	r2, [pc, #64]	@ (80059a8 <TIM_Base_SetConfig+0x12c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_Base_SetConfig+0xf8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a12      	ldr	r2, [pc, #72]	@ (80059b8 <TIM_Base_SetConfig+0x13c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d103      	bne.n	800597c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d105      	bne.n	800599a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f023 0201 	bic.w	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	611a      	str	r2, [r3, #16]
  }
}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40010400 	.word	0x40010400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800
 80059c8:	40001800 	.word	0x40001800
 80059cc:	40001c00 	.word	0x40001c00
 80059d0:	40002000 	.word	0x40002000

080059d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f023 0201 	bic.w	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f023 030a 	bic.w	r3, r3, #10
 8005a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b087      	sub	sp, #28
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f023 0210 	bic.w	r2, r3, #16
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	031b      	lsls	r3, r3, #12
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f043 0307 	orr.w	r3, r3, #7
 8005ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	609a      	str	r2, [r3, #8]
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	021a      	lsls	r2, r3, #8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e05a      	b.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a21      	ldr	r2, [pc, #132]	@ (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6c:	d01d      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1d      	ldr	r2, [pc, #116]	@ (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1a      	ldr	r2, [pc, #104]	@ (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a18      	ldr	r2, [pc, #96]	@ (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a15      	ldr	r2, [pc, #84]	@ (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40010000 	.word	0x40010000
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40000800 	.word	0x40000800
 8005bf0:	40000c00 	.word	0x40000c00
 8005bf4:	40010400 	.word	0x40010400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40001800 	.word	0x40001800

08005c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e042      	b.n	8005cc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc fece 	bl	80029f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	@ 0x24
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 fa27 	bl	80070c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	@ 0x28
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d175      	bne.n	8005dd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <HAL_UART_Transmit+0x2c>
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e06e      	b.n	8005dd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2221      	movs	r2, #33	@ 0x21
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d06:	f7fd f94d 	bl	8002fa4 <HAL_GetTick>
 8005d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d20:	d108      	bne.n	8005d34 <HAL_UART_Transmit+0x6c>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e003      	b.n	8005d3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d3c:	e02e      	b.n	8005d9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2180      	movs	r1, #128	@ 0x80
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 fec6 	bl	8006ada <UART_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e03a      	b.n	8005dd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	3302      	adds	r3, #2
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e007      	b.n	8005d8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1cb      	bne.n	8005d3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2140      	movs	r1, #64	@ 0x40
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fe92 	bl	8006ada <UART_WaitOnFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e006      	b.n	8005dd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e000      	b.n	8005dd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
  }
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	@ 0x30
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d156      	bne.n	8005ea8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_UART_Transmit_DMA+0x26>
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e04f      	b.n	8005eaa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	88fa      	ldrh	r2, [r7, #6]
 8005e1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2221      	movs	r2, #33	@ 0x21
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2e:	4a21      	ldr	r2, [pc, #132]	@ (8005eb4 <HAL_UART_Transmit_DMA+0xd4>)
 8005e30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e36:	4a20      	ldr	r2, [pc, #128]	@ (8005eb8 <HAL_UART_Transmit_DMA+0xd8>)
 8005e38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ebc <HAL_UART_Transmit_DMA+0xdc>)
 8005e40:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e46:	2200      	movs	r2, #0
 8005e48:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005e4a:	f107 0308 	add.w	r3, r7, #8
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	6819      	ldr	r1, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	461a      	mov	r2, r3
 8005e60:	88fb      	ldrh	r3, [r7, #6]
 8005e62:	f7fd fef1 	bl	8003c48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3314      	adds	r3, #20
 8005e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3314      	adds	r3, #20
 8005e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e90:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	6a39      	ldr	r1, [r7, #32]
 8005e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e5      	bne.n	8005e70 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e000      	b.n	8005eaa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005ea8:	2302      	movs	r3, #2
  }
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3730      	adds	r7, #48	@ 0x30
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	08006829 	.word	0x08006829
 8005eb8:	080068c3 	.word	0x080068c3
 8005ebc:	08006a47 	.word	0x08006a47

08005ec0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08c      	sub	sp, #48	@ 0x30
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d14a      	bne.n	8005f70 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e043      	b.n	8005f72 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fe45 	bl	8006b8c <UART_Start_Receive_IT>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005f08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d12c      	bne.n	8005f6a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d125      	bne.n	8005f64 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f043 0310 	orr.w	r3, r3, #16
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6a39      	ldr	r1, [r7, #32]
 8005f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e5      	bne.n	8005f2e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005f62:	e002      	b.n	8005f6a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f6e:	e000      	b.n	8005f72 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3730      	adds	r7, #48	@ 0x30
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b08c      	sub	sp, #48	@ 0x30
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d14a      	bne.n	800602a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e043      	b.n	800602c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fe22 	bl	8006c00 <UART_Start_Receive_DMA>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d12c      	bne.n	8006024 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d125      	bne.n	800601e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f043 0310 	orr.w	r3, r3, #16
 8005ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006008:	627a      	str	r2, [r7, #36]	@ 0x24
 800600a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6a39      	ldr	r1, [r7, #32]
 800600e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	61fb      	str	r3, [r7, #28]
   return(result);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800601c:	e002      	b.n	8006024 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006024:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006028:	e000      	b.n	800602c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800602a:	2302      	movs	r3, #2
  }
}
 800602c:	4618      	mov	r0, r3
 800602e:	3730      	adds	r7, #48	@ 0x30
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	@ 0x38
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	61fb      	str	r3, [r7, #28]
   return(result);
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006052:	637b      	str	r3, [r7, #52]	@ 0x34
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	330c      	adds	r3, #12
 800605a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800605c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800605e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e5      	bne.n	800603c <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607a:	2b80      	cmp	r3, #128	@ 0x80
 800607c:	d136      	bne.n	80060ec <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3314      	adds	r3, #20
 8006084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	60bb      	str	r3, [r7, #8]
   return(result);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006094:	633b      	str	r3, [r7, #48]	@ 0x30
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3314      	adds	r3, #20
 800609c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800609e:	61ba      	str	r2, [r7, #24]
 80060a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	613b      	str	r3, [r7, #16]
   return(result);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e5      	bne.n	800607e <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d018      	beq.n	80060ec <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060be:	2200      	movs	r2, #0
 80060c0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fd fe16 	bl	8003cf8 <HAL_DMA_Abort>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00c      	beq.n	80060ec <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe f82a 	bl	8004130 <HAL_DMA_GetError>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d104      	bne.n	80060ec <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2210      	movs	r2, #16
 80060e6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e007      	b.n	80060fc <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3738      	adds	r7, #56	@ 0x38
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b09a      	sub	sp, #104	@ 0x68
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800611c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800611e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006122:	667b      	str	r3, [r7, #100]	@ 0x64
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800612c:	657a      	str	r2, [r7, #84]	@ 0x54
 800612e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006132:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800613a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3314      	adds	r3, #20
 8006146:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	663b      	str	r3, [r7, #96]	@ 0x60
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3314      	adds	r3, #20
 800615e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006160:	643a      	str	r2, [r7, #64]	@ 0x40
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006166:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800616e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d119      	bne.n	80061b0 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	61fb      	str	r3, [r7, #28]
   return(result);
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800619c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e5      	bne.n	800617c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	d136      	bne.n	800622c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3314      	adds	r3, #20
 80061c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061de:	61ba      	str	r2, [r7, #24]
 80061e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6979      	ldr	r1, [r7, #20]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	613b      	str	r3, [r7, #16]
   return(result);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e5      	bne.n	80061be <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d018      	beq.n	800622c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fe:	2200      	movs	r2, #0
 8006200:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd fd76 	bl	8003cf8 <HAL_DMA_Abort>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00c      	beq.n	800622c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006216:	4618      	mov	r0, r3
 8006218:	f7fd ff8a 	bl	8004130 <HAL_DMA_GetError>
 800621c:	4603      	mov	r3, r0
 800621e:	2b20      	cmp	r3, #32
 8006220:	d104      	bne.n	800622c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2210      	movs	r2, #16
 8006226:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e00a      	b.n	8006242 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3768      	adds	r7, #104	@ 0x68
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b0ba      	sub	sp, #232	@ 0xe8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006272:	2300      	movs	r3, #0
 8006274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006278:	2300      	movs	r3, #0
 800627a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800628a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <HAL_UART_IRQHandler+0x66>
 800629e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fe49 	bl	8006f42 <UART_Receive_IT>
      return;
 80062b0:	e25b      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80de 	beq.w	8006478 <HAL_UART_IRQHandler+0x22c>
 80062bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80d1 	beq.w	8006478 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_UART_IRQHandler+0xae>
 80062e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	f043 0201 	orr.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0xd2>
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006316:	f043 0202 	orr.w	r2, r3, #2
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_UART_IRQHandler+0xf6>
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	f043 0204 	orr.w	r2, r3, #4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d011      	beq.n	8006372 <HAL_UART_IRQHandler+0x126>
 800634e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800635a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636a:	f043 0208 	orr.w	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 81f2 	beq.w	8006760 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_UART_IRQHandler+0x14e>
 8006388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fdd4 	bl	8006f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a4:	2b40      	cmp	r3, #64	@ 0x40
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_UART_IRQHandler+0x17a>
 80063be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d04f      	beq.n	8006466 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fcdc 	bl	8006d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d6:	2b40      	cmp	r3, #64	@ 0x40
 80063d8:	d141      	bne.n	800645e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3314      	adds	r3, #20
 80063e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3314      	adds	r3, #20
 8006402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800640a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800641e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d9      	bne.n	80063da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642a:	2b00      	cmp	r3, #0
 800642c:	d013      	beq.n	8006456 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	4a7e      	ldr	r2, [pc, #504]	@ (800662c <HAL_UART_IRQHandler+0x3e0>)
 8006434:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643a:	4618      	mov	r0, r3
 800643c:	f7fd fccc 	bl	8003dd8 <HAL_DMA_Abort_IT>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006450:	4610      	mov	r0, r2
 8006452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006454:	e00e      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9b2 	bl	80067c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00a      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9ae 	bl	80067c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e006      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f9aa 	bl	80067c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006472:	e175      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	bf00      	nop
    return;
 8006476:	e173      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647c:	2b01      	cmp	r3, #1
 800647e:	f040 814f 	bne.w	8006720 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 8148 	beq.w	8006720 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8141 	beq.w	8006720 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064be:	2b40      	cmp	r3, #64	@ 0x40
 80064c0:	f040 80b6 	bne.w	8006630 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8145 	beq.w	8006764 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064e2:	429a      	cmp	r2, r3
 80064e4:	f080 813e 	bcs.w	8006764 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fa:	f000 8088 	beq.w	800660e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800651c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800652a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800652e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1d9      	bne.n	80064fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3314      	adds	r3, #20
 8006550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800655a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3314      	adds	r3, #20
 800656a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800656e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e1      	bne.n	800654a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3314      	adds	r3, #20
 800658c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800659c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e3      	bne.n	8006586 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065de:	f023 0310 	bic.w	r3, r3, #16
 80065e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e3      	bne.n	80065cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006608:	4618      	mov	r0, r3
 800660a:	f7fd fb75 	bl	8003cf8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800661c:	b29b      	uxth	r3, r3
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	b29b      	uxth	r3, r3
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fa fe2f 	bl	8001288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800662a:	e09b      	b.n	8006764 <HAL_UART_IRQHandler+0x518>
 800662c:	08006e4b 	.word	0x08006e4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006638:	b29b      	uxth	r3, r3
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 808e 	beq.w	8006768 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800664c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8089 	beq.w	8006768 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800666c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800667a:	647a      	str	r2, [r7, #68]	@ 0x44
 800667c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e3      	bne.n	8006656 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3314      	adds	r3, #20
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	623b      	str	r3, [r7, #32]
   return(result);
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3314      	adds	r3, #20
 80066ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80066b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e3      	bne.n	800668e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066f8:	61fa      	str	r2, [r7, #28]
 80066fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	69b9      	ldr	r1, [r7, #24]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	617b      	str	r3, [r7, #20]
   return(result);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e3      	bne.n	80066d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fa fdb5 	bl	8001288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800671e:	e023      	b.n	8006768 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <HAL_UART_IRQHandler+0x4f4>
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fb9a 	bl	8006e72 <UART_Transmit_IT>
    return;
 800673e:	e014      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00e      	beq.n	800676a <HAL_UART_IRQHandler+0x51e>
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d008      	beq.n	800676a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fbda 	bl	8006f12 <UART_EndTransmit_IT>
    return;
 800675e:	e004      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
    return;
 8006760:	bf00      	nop
 8006762:	e002      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
      return;
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
      return;
 8006768:	bf00      	nop
  }
}
 800676a:	37e8      	adds	r7, #232	@ 0xe8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	2300      	movs	r3, #0
 80067e2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	4313      	orrs	r3, r2
 8006802:	b2db      	uxtb	r3, r3
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b090      	sub	sp, #64	@ 0x40
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d137      	bne.n	80068b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006846:	2200      	movs	r2, #0
 8006848:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800684a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3314      	adds	r3, #20
 8006850:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	623b      	str	r3, [r7, #32]
   return(result);
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006860:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3314      	adds	r3, #20
 8006868:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800686a:	633a      	str	r2, [r7, #48]	@ 0x30
 800686c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e5      	bne.n	800684a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800687e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	330c      	adds	r3, #12
 8006884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	60fb      	str	r3, [r7, #12]
   return(result);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006894:	637b      	str	r3, [r7, #52]	@ 0x34
 8006896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800689e:	61fa      	str	r2, [r7, #28]
 80068a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	69b9      	ldr	r1, [r7, #24]
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	617b      	str	r3, [r7, #20]
   return(result);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e5      	bne.n	800687e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068b2:	e002      	b.n	80068ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80068b6:	f7ff ff5b 	bl	8006770 <HAL_UART_TxCpltCallback>
}
 80068ba:	bf00      	nop
 80068bc:	3740      	adds	r7, #64	@ 0x40
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff ff57 	bl	8006784 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b09c      	sub	sp, #112	@ 0x70
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d172      	bne.n	80069e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80068fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068fc:	2200      	movs	r2, #0
 80068fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	330c      	adds	r3, #12
 8006906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006916:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006920:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006922:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006926:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800692e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e5      	bne.n	8006900 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3314      	adds	r3, #20
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006946:	f023 0301 	bic.w	r3, r3, #1
 800694a:	667b      	str	r3, [r7, #100]	@ 0x64
 800694c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3314      	adds	r3, #20
 8006952:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006954:	647a      	str	r2, [r7, #68]	@ 0x44
 8006956:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800695a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e5      	bne.n	8006934 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3314      	adds	r3, #20
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	623b      	str	r3, [r7, #32]
   return(result);
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800697e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3314      	adds	r3, #20
 8006986:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006988:	633a      	str	r2, [r7, #48]	@ 0x30
 800698a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800698e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800699c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d119      	bne.n	80069e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0310 	bic.w	r3, r3, #16
 80069c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80069cc:	61fa      	str	r2, [r7, #28]
 80069ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	69b9      	ldr	r1, [r7, #24]
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	617b      	str	r3, [r7, #20]
   return(result);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e2:	2200      	movs	r2, #0
 80069e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d106      	bne.n	80069fc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069f2:	4619      	mov	r1, r3
 80069f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80069f6:	f7fa fc47 	bl	8001288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069fa:	e002      	b.n	8006a02 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80069fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80069fe:	f7ff fecb 	bl	8006798 <HAL_UART_RxCpltCallback>
}
 8006a02:	bf00      	nop
 8006a04:	3770      	adds	r7, #112	@ 0x70
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d108      	bne.n	8006a38 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	4619      	mov	r1, r3
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7fa fc29 	bl	8001288 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a36:	e002      	b.n	8006a3e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff feb7 	bl	80067ac <HAL_UART_RxHalfCpltCallback>
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a62:	2b80      	cmp	r3, #128	@ 0x80
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b21      	cmp	r3, #33	@ 0x21
 8006a78:	d108      	bne.n	8006a8c <UART_DMAError+0x46>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006a86:	68b8      	ldr	r0, [r7, #8]
 8006a88:	f000 f954 	bl	8006d34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b40      	cmp	r3, #64	@ 0x40
 8006a98:	bf0c      	ite	eq
 8006a9a:	2301      	moveq	r3, #1
 8006a9c:	2300      	movne	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b22      	cmp	r3, #34	@ 0x22
 8006aac:	d108      	bne.n	8006ac0 <UART_DMAError+0x7a>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	f000 f962 	bl	8006d84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ac4:	f043 0210 	orr.w	r2, r3, #16
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006acc:	68b8      	ldr	r0, [r7, #8]
 8006ace:	f7ff fe77 	bl	80067c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aea:	e03b      	b.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d037      	beq.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af4:	f7fc fa56 	bl	8002fa4 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	6a3a      	ldr	r2, [r7, #32]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d302      	bcc.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e03a      	b.n	8006b84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d023      	beq.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b80      	cmp	r3, #128	@ 0x80
 8006b20:	d020      	beq.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b40      	cmp	r3, #64	@ 0x40
 8006b26:	d01d      	beq.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d116      	bne.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f919 	bl	8006d84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2208      	movs	r2, #8
 8006b56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e00f      	b.n	8006b84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	bf0c      	ite	eq
 8006b74:	2301      	moveq	r3, #1
 8006b76:	2300      	movne	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d0b4      	beq.n	8006aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2222      	movs	r2, #34	@ 0x22
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	695a      	ldr	r2, [r3, #20]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0201 	orr.w	r2, r2, #1
 8006be0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0220 	orr.w	r2, r2, #32
 8006bf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b098      	sub	sp, #96	@ 0x60
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2222      	movs	r2, #34	@ 0x22
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d28 <UART_Start_Receive_DMA+0x128>)
 8006c2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c34:	4a3d      	ldr	r2, [pc, #244]	@ (8006d2c <UART_Start_Receive_DMA+0x12c>)
 8006c36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d30 <UART_Start_Receive_DMA+0x130>)
 8006c3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c44:	2200      	movs	r2, #0
 8006c46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c48:	f107 0308 	add.w	r3, r7, #8
 8006c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	f7fc fff2 	bl	8003c48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d019      	beq.n	8006cb6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	330c      	adds	r3, #12
 8006ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ca2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e5      	bne.n	8006c82 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3314      	adds	r3, #20
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	f043 0301 	orr.w	r3, r3, #1
 8006ccc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3314      	adds	r3, #20
 8006cd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cd6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e5      	bne.n	8006cb6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3314      	adds	r3, #20
 8006cf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d00:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6a39      	ldr	r1, [r7, #32]
 8006d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e5      	bne.n	8006cea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3760      	adds	r7, #96	@ 0x60
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	080068df 	.word	0x080068df
 8006d2c:	08006a0b 	.word	0x08006a0b
 8006d30:	08006a47 	.word	0x08006a47

08006d34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b089      	sub	sp, #36	@ 0x24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	61ba      	str	r2, [r7, #24]
 8006d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6979      	ldr	r1, [r7, #20]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006d78:	bf00      	nop
 8006d7a:	3724      	adds	r7, #36	@ 0x24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b095      	sub	sp, #84	@ 0x54
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	330c      	adds	r3, #12
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	330c      	adds	r3, #12
 8006daa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dac:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3314      	adds	r3, #20
 8006dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3314      	adds	r3, #20
 8006dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d119      	bne.n	8006e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	330c      	adds	r3, #12
 8006e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f023 0310 	bic.w	r3, r3, #16
 8006e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e1c:	61ba      	str	r2, [r7, #24]
 8006e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6979      	ldr	r1, [r7, #20]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e3e:	bf00      	nop
 8006e40:	3754      	adds	r7, #84	@ 0x54
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7ff fcab 	bl	80067c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b21      	cmp	r3, #33	@ 0x21
 8006e84:	d13e      	bne.n	8006f04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8e:	d114      	bne.n	8006eba <UART_Transmit_IT+0x48>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d110      	bne.n	8006eba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	1c9a      	adds	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	621a      	str	r2, [r3, #32]
 8006eb8:	e008      	b.n	8006ecc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	1c59      	adds	r1, r3, #1
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6211      	str	r1, [r2, #32]
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10f      	bne.n	8006f00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006eee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006efe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f04:	2302      	movs	r3, #2
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fc1c 	bl	8006770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b08c      	sub	sp, #48	@ 0x30
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b22      	cmp	r3, #34	@ 0x22
 8006f54:	f040 80ae 	bne.w	80070b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f60:	d117      	bne.n	8006f92 <UART_Receive_IT+0x50>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d113      	bne.n	8006f92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f90:	e026      	b.n	8006fe0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa4:	d007      	beq.n	8006fb6 <UART_Receive_IT+0x74>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <UART_Receive_IT+0x82>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e008      	b.n	8006fd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4619      	mov	r1, r3
 8006fee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d15d      	bne.n	80070b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0220 	bic.w	r2, r2, #32
 8007002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007036:	2b01      	cmp	r3, #1
 8007038:	d135      	bne.n	80070a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	330c      	adds	r3, #12
 8007046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	613b      	str	r3, [r7, #16]
   return(result);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f023 0310 	bic.w	r3, r3, #16
 8007056:	627b      	str	r3, [r7, #36]	@ 0x24
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007060:	623a      	str	r2, [r7, #32]
 8007062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	69f9      	ldr	r1, [r7, #28]
 8007066:	6a3a      	ldr	r2, [r7, #32]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	61bb      	str	r3, [r7, #24]
   return(result);
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e5      	bne.n	8007040 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b10      	cmp	r3, #16
 8007080:	d10a      	bne.n	8007098 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fa f8f2 	bl	8001288 <HAL_UARTEx_RxEventCallback>
 80070a4:	e002      	b.n	80070ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fb76 	bl	8006798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	e002      	b.n	80070b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	e000      	b.n	80070b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070b4:	2302      	movs	r3, #2
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3730      	adds	r7, #48	@ 0x30
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070c4:	b0c0      	sub	sp, #256	@ 0x100
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070dc:	68d9      	ldr	r1, [r3, #12]
 80070de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	ea40 0301 	orr.w	r3, r0, r1
 80070e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	431a      	orrs	r2, r3
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007118:	f021 010c 	bic.w	r1, r1, #12
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007126:	430b      	orrs	r3, r1
 8007128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800712a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713a:	6999      	ldr	r1, [r3, #24]
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	ea40 0301 	orr.w	r3, r0, r1
 8007146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4b8f      	ldr	r3, [pc, #572]	@ (800738c <UART_SetConfig+0x2cc>)
 8007150:	429a      	cmp	r2, r3
 8007152:	d005      	beq.n	8007160 <UART_SetConfig+0xa0>
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	4b8d      	ldr	r3, [pc, #564]	@ (8007390 <UART_SetConfig+0x2d0>)
 800715c:	429a      	cmp	r2, r3
 800715e:	d104      	bne.n	800716a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007160:	f7fe f8b6 	bl	80052d0 <HAL_RCC_GetPCLK2Freq>
 8007164:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007168:	e003      	b.n	8007172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800716a:	f7fe f89d 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 800716e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717c:	f040 810c 	bne.w	8007398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007184:	2200      	movs	r2, #0
 8007186:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800718a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800718e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007192:	4622      	mov	r2, r4
 8007194:	462b      	mov	r3, r5
 8007196:	1891      	adds	r1, r2, r2
 8007198:	65b9      	str	r1, [r7, #88]	@ 0x58
 800719a:	415b      	adcs	r3, r3
 800719c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800719e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071a2:	4621      	mov	r1, r4
 80071a4:	eb12 0801 	adds.w	r8, r2, r1
 80071a8:	4629      	mov	r1, r5
 80071aa:	eb43 0901 	adc.w	r9, r3, r1
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071c2:	4690      	mov	r8, r2
 80071c4:	4699      	mov	r9, r3
 80071c6:	4623      	mov	r3, r4
 80071c8:	eb18 0303 	adds.w	r3, r8, r3
 80071cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071d0:	462b      	mov	r3, r5
 80071d2:	eb49 0303 	adc.w	r3, r9, r3
 80071d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071ee:	460b      	mov	r3, r1
 80071f0:	18db      	adds	r3, r3, r3
 80071f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80071f4:	4613      	mov	r3, r2
 80071f6:	eb42 0303 	adc.w	r3, r2, r3
 80071fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80071fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007204:	f7f9 fc32 	bl	8000a6c <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4b61      	ldr	r3, [pc, #388]	@ (8007394 <UART_SetConfig+0x2d4>)
 800720e:	fba3 2302 	umull	r2, r3, r3, r2
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	011c      	lsls	r4, r3, #4
 8007216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800721a:	2200      	movs	r2, #0
 800721c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007220:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007228:	4642      	mov	r2, r8
 800722a:	464b      	mov	r3, r9
 800722c:	1891      	adds	r1, r2, r2
 800722e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007230:	415b      	adcs	r3, r3
 8007232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007238:	4641      	mov	r1, r8
 800723a:	eb12 0a01 	adds.w	sl, r2, r1
 800723e:	4649      	mov	r1, r9
 8007240:	eb43 0b01 	adc.w	fp, r3, r1
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007258:	4692      	mov	sl, r2
 800725a:	469b      	mov	fp, r3
 800725c:	4643      	mov	r3, r8
 800725e:	eb1a 0303 	adds.w	r3, sl, r3
 8007262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007266:	464b      	mov	r3, r9
 8007268:	eb4b 0303 	adc.w	r3, fp, r3
 800726c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800727c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007284:	460b      	mov	r3, r1
 8007286:	18db      	adds	r3, r3, r3
 8007288:	643b      	str	r3, [r7, #64]	@ 0x40
 800728a:	4613      	mov	r3, r2
 800728c:	eb42 0303 	adc.w	r3, r2, r3
 8007290:	647b      	str	r3, [r7, #68]	@ 0x44
 8007292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800729a:	f7f9 fbe7 	bl	8000a6c <__aeabi_uldivmod>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007394 <UART_SetConfig+0x2d4>)
 80072a6:	fba3 2301 	umull	r2, r3, r3, r1
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	2264      	movs	r2, #100	@ 0x64
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
 80072b2:	1acb      	subs	r3, r1, r3
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072ba:	4b36      	ldr	r3, [pc, #216]	@ (8007394 <UART_SetConfig+0x2d4>)
 80072bc:	fba3 2302 	umull	r2, r3, r3, r2
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072c8:	441c      	add	r4, r3
 80072ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072dc:	4642      	mov	r2, r8
 80072de:	464b      	mov	r3, r9
 80072e0:	1891      	adds	r1, r2, r2
 80072e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072e4:	415b      	adcs	r3, r3
 80072e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072ec:	4641      	mov	r1, r8
 80072ee:	1851      	adds	r1, r2, r1
 80072f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80072f2:	4649      	mov	r1, r9
 80072f4:	414b      	adcs	r3, r1
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007304:	4659      	mov	r1, fp
 8007306:	00cb      	lsls	r3, r1, #3
 8007308:	4651      	mov	r1, sl
 800730a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800730e:	4651      	mov	r1, sl
 8007310:	00ca      	lsls	r2, r1, #3
 8007312:	4610      	mov	r0, r2
 8007314:	4619      	mov	r1, r3
 8007316:	4603      	mov	r3, r0
 8007318:	4642      	mov	r2, r8
 800731a:	189b      	adds	r3, r3, r2
 800731c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007320:	464b      	mov	r3, r9
 8007322:	460a      	mov	r2, r1
 8007324:	eb42 0303 	adc.w	r3, r2, r3
 8007328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007338:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800733c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007340:	460b      	mov	r3, r1
 8007342:	18db      	adds	r3, r3, r3
 8007344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007346:	4613      	mov	r3, r2
 8007348:	eb42 0303 	adc.w	r3, r2, r3
 800734c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800734e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007356:	f7f9 fb89 	bl	8000a6c <__aeabi_uldivmod>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	4b0d      	ldr	r3, [pc, #52]	@ (8007394 <UART_SetConfig+0x2d4>)
 8007360:	fba3 1302 	umull	r1, r3, r3, r2
 8007364:	095b      	lsrs	r3, r3, #5
 8007366:	2164      	movs	r1, #100	@ 0x64
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	3332      	adds	r3, #50	@ 0x32
 8007372:	4a08      	ldr	r2, [pc, #32]	@ (8007394 <UART_SetConfig+0x2d4>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	f003 0207 	and.w	r2, r3, #7
 800737e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4422      	add	r2, r4
 8007386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007388:	e106      	b.n	8007598 <UART_SetConfig+0x4d8>
 800738a:	bf00      	nop
 800738c:	40011000 	.word	0x40011000
 8007390:	40011400 	.word	0x40011400
 8007394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800739c:	2200      	movs	r2, #0
 800739e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073aa:	4642      	mov	r2, r8
 80073ac:	464b      	mov	r3, r9
 80073ae:	1891      	adds	r1, r2, r2
 80073b0:	6239      	str	r1, [r7, #32]
 80073b2:	415b      	adcs	r3, r3
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073ba:	4641      	mov	r1, r8
 80073bc:	1854      	adds	r4, r2, r1
 80073be:	4649      	mov	r1, r9
 80073c0:	eb43 0501 	adc.w	r5, r3, r1
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	00eb      	lsls	r3, r5, #3
 80073ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073d2:	00e2      	lsls	r2, r4, #3
 80073d4:	4614      	mov	r4, r2
 80073d6:	461d      	mov	r5, r3
 80073d8:	4643      	mov	r3, r8
 80073da:	18e3      	adds	r3, r4, r3
 80073dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073e0:	464b      	mov	r3, r9
 80073e2:	eb45 0303 	adc.w	r3, r5, r3
 80073e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007406:	4629      	mov	r1, r5
 8007408:	008b      	lsls	r3, r1, #2
 800740a:	4621      	mov	r1, r4
 800740c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007410:	4621      	mov	r1, r4
 8007412:	008a      	lsls	r2, r1, #2
 8007414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007418:	f7f9 fb28 	bl	8000a6c <__aeabi_uldivmod>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4b60      	ldr	r3, [pc, #384]	@ (80075a4 <UART_SetConfig+0x4e4>)
 8007422:	fba3 2302 	umull	r2, r3, r3, r2
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	011c      	lsls	r4, r3, #4
 800742a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007434:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800743c:	4642      	mov	r2, r8
 800743e:	464b      	mov	r3, r9
 8007440:	1891      	adds	r1, r2, r2
 8007442:	61b9      	str	r1, [r7, #24]
 8007444:	415b      	adcs	r3, r3
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800744c:	4641      	mov	r1, r8
 800744e:	1851      	adds	r1, r2, r1
 8007450:	6139      	str	r1, [r7, #16]
 8007452:	4649      	mov	r1, r9
 8007454:	414b      	adcs	r3, r1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007464:	4659      	mov	r1, fp
 8007466:	00cb      	lsls	r3, r1, #3
 8007468:	4651      	mov	r1, sl
 800746a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800746e:	4651      	mov	r1, sl
 8007470:	00ca      	lsls	r2, r1, #3
 8007472:	4610      	mov	r0, r2
 8007474:	4619      	mov	r1, r3
 8007476:	4603      	mov	r3, r0
 8007478:	4642      	mov	r2, r8
 800747a:	189b      	adds	r3, r3, r2
 800747c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007480:	464b      	mov	r3, r9
 8007482:	460a      	mov	r2, r1
 8007484:	eb42 0303 	adc.w	r3, r2, r3
 8007488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007496:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074a4:	4649      	mov	r1, r9
 80074a6:	008b      	lsls	r3, r1, #2
 80074a8:	4641      	mov	r1, r8
 80074aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ae:	4641      	mov	r1, r8
 80074b0:	008a      	lsls	r2, r1, #2
 80074b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074b6:	f7f9 fad9 	bl	8000a6c <__aeabi_uldivmod>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	4b38      	ldr	r3, [pc, #224]	@ (80075a4 <UART_SetConfig+0x4e4>)
 80074c2:	fba3 2301 	umull	r2, r3, r3, r1
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	2264      	movs	r2, #100	@ 0x64
 80074ca:	fb02 f303 	mul.w	r3, r2, r3
 80074ce:	1acb      	subs	r3, r1, r3
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	3332      	adds	r3, #50	@ 0x32
 80074d4:	4a33      	ldr	r2, [pc, #204]	@ (80075a4 <UART_SetConfig+0x4e4>)
 80074d6:	fba2 2303 	umull	r2, r3, r2, r3
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074e0:	441c      	add	r4, r3
 80074e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e6:	2200      	movs	r2, #0
 80074e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80074ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80074ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074f0:	4642      	mov	r2, r8
 80074f2:	464b      	mov	r3, r9
 80074f4:	1891      	adds	r1, r2, r2
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	415b      	adcs	r3, r3
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007500:	4641      	mov	r1, r8
 8007502:	1851      	adds	r1, r2, r1
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	4649      	mov	r1, r9
 8007508:	414b      	adcs	r3, r1
 800750a:	607b      	str	r3, [r7, #4]
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007518:	4659      	mov	r1, fp
 800751a:	00cb      	lsls	r3, r1, #3
 800751c:	4651      	mov	r1, sl
 800751e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007522:	4651      	mov	r1, sl
 8007524:	00ca      	lsls	r2, r1, #3
 8007526:	4610      	mov	r0, r2
 8007528:	4619      	mov	r1, r3
 800752a:	4603      	mov	r3, r0
 800752c:	4642      	mov	r2, r8
 800752e:	189b      	adds	r3, r3, r2
 8007530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007532:	464b      	mov	r3, r9
 8007534:	460a      	mov	r2, r1
 8007536:	eb42 0303 	adc.w	r3, r2, r3
 800753a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	663b      	str	r3, [r7, #96]	@ 0x60
 8007546:	667a      	str	r2, [r7, #100]	@ 0x64
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007554:	4649      	mov	r1, r9
 8007556:	008b      	lsls	r3, r1, #2
 8007558:	4641      	mov	r1, r8
 800755a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800755e:	4641      	mov	r1, r8
 8007560:	008a      	lsls	r2, r1, #2
 8007562:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007566:	f7f9 fa81 	bl	8000a6c <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4b0d      	ldr	r3, [pc, #52]	@ (80075a4 <UART_SetConfig+0x4e4>)
 8007570:	fba3 1302 	umull	r1, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	2164      	movs	r1, #100	@ 0x64
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	3332      	adds	r3, #50	@ 0x32
 8007582:	4a08      	ldr	r2, [pc, #32]	@ (80075a4 <UART_SetConfig+0x4e4>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f003 020f 	and.w	r2, r3, #15
 800758e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4422      	add	r2, r4
 8007596:	609a      	str	r2, [r3, #8]
}
 8007598:	bf00      	nop
 800759a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800759e:	46bd      	mov	sp, r7
 80075a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075a4:	51eb851f 	.word	0x51eb851f

080075a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075a8:	b084      	sub	sp, #16
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	f107 001c 	add.w	r0, r7, #28
 80075b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d123      	bne.n	800760a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80075d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d105      	bne.n	80075fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 faa0 	bl	8007b44 <USB_CoreReset>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]
 8007608:	e01b      	b.n	8007642 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa94 	bl	8007b44 <USB_CoreReset>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007620:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	639a      	str	r2, [r3, #56]	@ 0x38
 8007634:	e005      	b.n	8007642 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007642:	7fbb      	ldrb	r3, [r7, #30]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10b      	bne.n	8007660 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f043 0206 	orr.w	r2, r3, #6
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f043 0220 	orr.w	r2, r3, #32
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800766c:	b004      	add	sp, #16
 800766e:	4770      	bx	lr

08007670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f023 0201 	bic.w	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d115      	bne.n	80076e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076c0:	200a      	movs	r0, #10
 80076c2:	f7fb fc7b 	bl	8002fbc <HAL_Delay>
      ms += 10U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	330a      	adds	r3, #10
 80076ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fa2b 	bl	8007b28 <USB_GetMode>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d01e      	beq.n	8007716 <USB_SetCurrentMode+0x84>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2bc7      	cmp	r3, #199	@ 0xc7
 80076dc:	d9f0      	bls.n	80076c0 <USB_SetCurrentMode+0x2e>
 80076de:	e01a      	b.n	8007716 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d115      	bne.n	8007712 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076f2:	200a      	movs	r0, #10
 80076f4:	f7fb fc62 	bl	8002fbc <HAL_Delay>
      ms += 10U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	330a      	adds	r3, #10
 80076fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa12 	bl	8007b28 <USB_GetMode>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <USB_SetCurrentMode+0x84>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2bc7      	cmp	r3, #199	@ 0xc7
 800770e:	d9f0      	bls.n	80076f2 <USB_SetCurrentMode+0x60>
 8007710:	e001      	b.n	8007716 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e005      	b.n	8007722 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2bc8      	cmp	r3, #200	@ 0xc8
 800771a:	d101      	bne.n	8007720 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800772c:	b084      	sub	sp, #16
 800772e:	b580      	push	{r7, lr}
 8007730:	b086      	sub	sp, #24
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800773a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	e009      	b.n	8007760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3340      	adds	r3, #64	@ 0x40
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	2200      	movs	r2, #0
 8007758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	3301      	adds	r3, #1
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b0e      	cmp	r3, #14
 8007764:	d9f2      	bls.n	800774c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007766:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800776a:	2b00      	cmp	r3, #0
 800776c:	d11c      	bne.n	80077a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007786:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007792:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80077a6:	e00b      	b.n	80077c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077c6:	461a      	mov	r2, r3
 80077c8:	2300      	movs	r3, #0
 80077ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d10d      	bne.n	80077f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f968 	bl	8007ab4 <USB_SetDevSpeed>
 80077e4:	e008      	b.n	80077f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077e6:	2101      	movs	r1, #1
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f963 	bl	8007ab4 <USB_SetDevSpeed>
 80077ee:	e003      	b.n	80077f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077f0:	2103      	movs	r1, #3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f95e 	bl	8007ab4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077f8:	2110      	movs	r1, #16
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8fa 	bl	80079f4 <USB_FlushTxFifo>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f924 	bl	8007a58 <USB_FlushRxFifo>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007820:	461a      	mov	r2, r3
 8007822:	2300      	movs	r3, #0
 8007824:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800782c:	461a      	mov	r2, r3
 800782e:	2300      	movs	r3, #0
 8007830:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007838:	461a      	mov	r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800783e:	2300      	movs	r3, #0
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	e043      	b.n	80078cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800785a:	d118      	bne.n	800788e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786e:	461a      	mov	r2, r3
 8007870:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	e013      	b.n	80078a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007884:	461a      	mov	r2, r3
 8007886:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e008      	b.n	80078a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800789a:	461a      	mov	r2, r3
 800789c:	2300      	movs	r3, #0
 800789e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ac:	461a      	mov	r2, r3
 80078ae:	2300      	movs	r3, #0
 80078b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078be:	461a      	mov	r2, r3
 80078c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	3301      	adds	r3, #1
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078d0:	461a      	mov	r2, r3
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d3b5      	bcc.n	8007844 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	e043      	b.n	8007966 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078f4:	d118      	bne.n	8007928 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007908:	461a      	mov	r2, r3
 800790a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800790e:	6013      	str	r3, [r2, #0]
 8007910:	e013      	b.n	800793a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800791e:	461a      	mov	r2, r3
 8007920:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	e008      	b.n	800793a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007934:	461a      	mov	r2, r3
 8007936:	2300      	movs	r3, #0
 8007938:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007946:	461a      	mov	r2, r3
 8007948:	2300      	movs	r3, #0
 800794a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007958:	461a      	mov	r2, r3
 800795a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800795e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	3301      	adds	r3, #1
 8007964:	613b      	str	r3, [r7, #16]
 8007966:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800796a:	461a      	mov	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	4293      	cmp	r3, r2
 8007970:	d3b5      	bcc.n	80078de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007984:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007992:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007994:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	f043 0210 	orr.w	r2, r3, #16
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	4b10      	ldr	r3, [pc, #64]	@ (80079f0 <USB_DevInit+0x2c4>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f043 0208 	orr.w	r2, r3, #8
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d107      	bne.n	80079e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079d8:	f043 0304 	orr.w	r3, r3, #4
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ec:	b004      	add	sp, #16
 80079ee:	4770      	bx	lr
 80079f0:	803c3800 	.word	0x803c3800

080079f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a0e:	d901      	bls.n	8007a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e01b      	b.n	8007a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	daf2      	bge.n	8007a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	019b      	lsls	r3, r3, #6
 8007a24:	f043 0220 	orr.w	r2, r3, #32
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a38:	d901      	bls.n	8007a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e006      	b.n	8007a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d0f0      	beq.n	8007a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a70:	d901      	bls.n	8007a76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e018      	b.n	8007aa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	daf2      	bge.n	8007a64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2210      	movs	r2, #16
 8007a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a94:	d901      	bls.n	8007a9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e006      	b.n	8007aa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d0f0      	beq.n	8007a88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b00:	f023 0303 	bic.w	r3, r3, #3
 8007b04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b14:	f043 0302 	orr.w	r3, r3, #2
 8007b18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f003 0301 	and.w	r3, r3, #1
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b5c:	d901      	bls.n	8007b62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e01b      	b.n	8007b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	daf2      	bge.n	8007b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f043 0201 	orr.w	r2, r3, #1
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b86:	d901      	bls.n	8007b8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e006      	b.n	8007b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d0f0      	beq.n	8007b7a <USB_CoreReset+0x36>

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fba8 	bl	8008308 <malloc>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <ATC_Free+0x26>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fb99 	bl	8008318 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
  }
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8a9b      	ldrh	r3, [r3, #20]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	f000 fee7 	bl	80089e0 <memset>
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b086      	sub	sp, #24
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	4613      	mov	r3, r2
 8007c26:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	88fa      	ldrh	r2, [r7, #6]
 8007c30:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	88fa      	ldrh	r2, [r7, #6]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe f8d0 	bl	8005de0 <HAL_UART_Transmit_DMA>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
 8007c4a:	e000      	b.n	8007c4e <ATC_TxRaw+0x34>
      break;
 8007c4c:	bf00      	nop

  } while (0);

  return answer;
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fe fdb5 	bl	80067d4 <HAL_UART_GetState>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b21      	cmp	r3, #33	@ 0x21
 8007c6e:	d007      	beq.n	8007c80 <ATC_TxBusy+0x28>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fe fdad 	bl	80067d4 <HAL_UART_GetState>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b23      	cmp	r3, #35	@ 0x23
 8007c7e:	d101      	bne.n	8007c84 <ATC_TxBusy+0x2c>
  {
    return true;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 8007c84:	2300      	movs	r3, #0
  }
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 8007c9c:	f7fb f982 	bl	8002fa4 <HAL_GetTick>
 8007ca0:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	f000 fb20 	bl	80082e8 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe fd91 	bl	80067d4 <HAL_UART_GetState>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b22      	cmp	r3, #34	@ 0x22
 8007cb6:	d007      	beq.n	8007cc8 <ATC_TxWait+0x3a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe fd89 	bl	80067d4 <HAL_UART_GetState>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d102      	bne.n	8007cce <ATC_TxWait+0x40>
    {
      answer = true;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
      break;
 8007ccc:	e01c      	b.n	8007d08 <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fd7e 	bl	80067d4 <HAL_UART_GetState>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2be0      	cmp	r3, #224	@ 0xe0
 8007cdc:	d014      	beq.n	8007d08 <ATC_TxWait+0x7a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fd76 	bl	80067d4 <HAL_UART_GetState>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2ba0      	cmp	r3, #160	@ 0xa0
 8007cec:	d00c      	beq.n	8007d08 <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8007cee:	f7fb f959 	bl	8002fa4 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d8d1      	bhi.n	8007ca2 <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe f996 	bl	8006034 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	8b1b      	ldrh	r3, [r3, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d024      	beq.n	8007d6c <ATC_CheckEvents+0x5a>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8007d22:	2300      	movs	r3, #0
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	e019      	b.n	8007d5c <ATC_CheckEvents+0x4a>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4413      	add	r3, r2
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f000 fe7b 	bl	8008a34 <strstr>
 8007d3e:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <ATC_CheckEvents+0x44>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	4413      	add	r3, r2
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	68b8      	ldr	r0, [r7, #8]
 8007d54:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d3e0      	bcc.n	8007d28 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff ff44 	bl	8007bf4 <ATC_RxFlush>
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	8b1b      	ldrh	r3, [r3, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d023      	beq.n	8007dd2 <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	81bb      	strh	r3, [r7, #12]
 8007d8e:	e01b      	b.n	8007dc8 <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007d94:	89ba      	ldrh	r2, [r7, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	320a      	adds	r2, #10
 8007d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f000 fe48 	bl	8008a34 <strstr>
 8007da4:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8007db8:	89bb      	ldrh	r3, [r7, #12]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
        break;
 8007dc0:	e007      	b.n	8007dd2 <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007dc2:	89bb      	ldrh	r3, [r7, #12]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	81bb      	strh	r3, [r7, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8adb      	ldrh	r3, [r3, #22]
 8007dcc:	89ba      	ldrh	r2, [r7, #12]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d3de      	bcc.n	8007d90 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fd11 	bl	8006810 <HAL_UART_GetError>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01e      	beq.n	8007e32 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe f97e 	bl	8006104 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69d9      	ldr	r1, [r3, #28]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8a9b      	ldrh	r3, [r3, #20]
 8007e14:	461a      	mov	r2, r3
 8007e16:	f7fe f8b0 	bl	8005f7a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0208 	bic.w	r2, r2, #8
 8007e30:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fccc 	bl	80067d4 <HAL_UART_GetState>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b22      	cmp	r3, #34	@ 0x22
 8007e40:	d026      	beq.n	8007e90 <ATC_CheckErrors+0xb4>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fcc4 	bl	80067d4 <HAL_UART_GetState>
 8007e4c:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8007e4e:	2b23      	cmp	r3, #35	@ 0x23
 8007e50:	d01e      	beq.n	8007e90 <ATC_CheckErrors+0xb4>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe f94f 	bl	8006104 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69d9      	ldr	r1, [r3, #28]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	8a9b      	ldrh	r3, [r3, #20]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f7fe f881 	bl	8005f7a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0208 	bic.w	r2, r2, #8
 8007e8e:	601a      	str	r2, [r3, #0]
  }
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d074      	beq.n	8007f9c <ATC_Init+0x104>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d071      	beq.n	8007f9c <ATC_Init+0x104>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007eb8:	223c      	movs	r2, #60	@ 0x3c
 8007eba:	2100      	movs	r1, #0
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 fd8f 	bl	80089e0 <memset>
    if (pName != NULL)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d006      	beq.n	8007ed6 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	2207      	movs	r2, #7
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fd9c 	bl	8008a0e <strncpy>
    }
    hAtc->hUart = hUart;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fe61 	bl	8007ba6 <ATC_Malloc>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d04d      	beq.n	8007f8e <ATC_Init+0xf6>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fd70 	bl	80089e0 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8007f00:	88fb      	ldrh	r3, [r7, #6]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fe4f 	bl	8007ba6 <ATC_Malloc>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d03d      	beq.n	8007f92 <ATC_Init+0xfa>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	88fa      	ldrh	r2, [r7, #6]
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fd5e 	bl	80089e0 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8007f24:	88fb      	ldrh	r3, [r7, #6]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff fe3d 	bl	8007ba6 <ATC_Malloc>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d02d      	beq.n	8007f96 <ATC_Init+0xfe>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fd4c 	bl	80089e0 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	88fa      	ldrh	r2, [r7, #6]
 8007f4c:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6818      	ldr	r0, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	69d9      	ldr	r1, [r3, #28]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8a9b      	ldrh	r3, [r3, #20]
 8007f64:	461a      	mov	r2, r3
 8007f66:	f7fe f808 	bl	8005f7a <HAL_UARTEx_ReceiveToIdle_DMA>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d114      	bne.n	8007f9a <ATC_Init+0x102>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0208 	bic.w	r2, r2, #8
 8007f86:	601a      	str	r2, [r3, #0]
    answer = true;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	75fb      	strb	r3, [r7, #23]
 8007f8c:	e006      	b.n	8007f9c <ATC_Init+0x104>
      break;
 8007f8e:	bf00      	nop
 8007f90:	e004      	b.n	8007f9c <ATC_Init+0x104>
      break;
 8007f92:	bf00      	nop
 8007f94:	e002      	b.n	8007f9c <ATC_Init+0x104>
      break;
 8007f96:	bf00      	nop
 8007f98:	e000      	b.n	8007f9c <ATC_Init+0x104>
      break;
 8007f9a:	bf00      	nop

  } while (0);

  if (answer == false)
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	f083 0301 	eor.w	r3, r3, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d016      	beq.n	8007fd6 <ATC_Init+0x13e>
  {
    if (hAtc->pRxBuff != NULL)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <ATC_Init+0x122>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	331c      	adds	r3, #28
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fe06 	bl	8007bc6 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <ATC_Init+0x134>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3324      	adds	r3, #36	@ 0x24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fdfd 	bl	8007bc6 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007fcc:	223c      	movs	r2, #60	@ 0x3c
 8007fce:	2100      	movs	r1, #0
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fd05 	bl	80089e0 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  uint32_t ev = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01d      	beq.n	8008034 <ATC_SetEvents+0x54>
    {
      break;
    }
    if (psEvents == NULL)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01c      	beq.n	8008038 <ATC_SetEvents+0x58>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8007ffe:	e002      	b.n	8008006 <ATC_SetEvents+0x26>
    {
      ev++;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	3301      	adds	r3, #1
 8008004:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4413      	add	r3, r2
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d006      	beq.n	8008022 <ATC_SetEvents+0x42>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	4413      	add	r3, r2
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1ee      	bne.n	8008000 <ATC_SetEvents+0x20>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	611a      	str	r2, [r3, #16]
    answer = true;
 800802e:	2301      	movs	r3, #1
 8008030:	73fb      	strb	r3, [r7, #15]
 8008032:	e002      	b.n	800803a <ATC_SetEvents+0x5a>
      break;
 8008034:	bf00      	nop
 8008036:	e000      	b.n	800803a <ATC_SetEvents+0x5a>
      break;
 8008038:	bf00      	nop

  } while (0);

  return answer;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fec3 	bl	8007ddc <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fe5b 	bl	8007d12 <ATC_CheckEvents>
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8008064:	b590      	push	{r4, r7, lr}
 8008066:	b08d      	sub	sp, #52	@ 0x34
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8008072:	2300      	movs	r3, #0
 8008074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fdee 	bl	8007c58 <ATC_TxBusy>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8008082:	f06f 0303 	mvn.w	r3, #3
 8008086:	e0c8      	b.n	800821a <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 8008088:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800808c:	2b05      	cmp	r3, #5
 800808e:	d902      	bls.n	8008096 <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 8008090:	f06f 0304 	mvn.w	r3, #4
 8008094:	e0c1      	b.n	800821a <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7ff fea0 	bl	8007ddc <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 800809c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80080a0:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 80080a2:	2300      	movs	r3, #0
 80080a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080a6:	e04b      	b.n	8008140 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	1d1a      	adds	r2, r3, #4
 80080ac:	617a      	str	r2, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 80080b2:	69b8      	ldr	r0, [r7, #24]
 80080b4:	f7f8 f88c 	bl	80001d0 <strlen>
 80080b8:	4603      	mov	r3, r0
 80080ba:	3301      	adds	r3, #1
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff fd72 	bl	8007ba6 <ATC_Malloc>
 80080c2:	4601      	mov	r1, r0
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080c8:	320a      	adds	r2, #10
 80080ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080d2:	320a      	adds	r2, #10
 80080d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d119      	bne.n	8008110 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 80080dc:	2300      	movs	r3, #0
 80080de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80080e2:	e00d      	b.n	8008100 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 80080e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080e8:	330a      	adds	r3, #10
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fd68 	bl	8007bc6 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 80080f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080fa:	3301      	adds	r3, #1
 80080fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008106:	429a      	cmp	r2, r3
 8008108:	dcec      	bgt.n	80080e4 <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 800810a:	f06f 0302 	mvn.w	r3, #2
 800810e:	e084      	b.n	800821a <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008114:	320a      	adds	r2, #10
 8008116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811a:	69b9      	ldr	r1, [r7, #24]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fd22 	bl	8008b66 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008126:	320a      	adds	r2, #10
 8008128:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800812c:	69b8      	ldr	r0, [r7, #24]
 800812e:	f7f8 f84f 	bl	80001d0 <strlen>
 8008132:	4603      	mov	r3, r0
 8008134:	4423      	add	r3, r4
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813c:	3301      	adds	r3, #1
 800813e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008140:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008146:	429a      	cmp	r2, r3
 8008148:	dbae      	blt.n	80080a8 <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f7ff fd52 	bl	8007bf4 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8008150:	68b8      	ldr	r0, [r7, #8]
 8008152:	f7f8 f83d 	bl	80001d0 <strlen>
 8008156:	4603      	mov	r3, r0
 8008158:	b29b      	uxth	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff fd5b 	bl	8007c1a <ATC_TxRaw>
 8008164:	4603      	mov	r3, r0
 8008166:	f083 0301 	eor.w	r3, r3, #1
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8008170:	f04f 33ff 	mov.w	r3, #4294967295
 8008174:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008176:	e00d      	b.n	8008194 <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7ff fd87 	bl	8007c8e <ATC_TxWait>
 8008180:	4603      	mov	r3, r0
 8008182:	f083 0301 	eor.w	r3, r3, #1
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 800818c:	f06f 0301 	mvn.w	r3, #1
 8008190:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008192:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8008194:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008198:	2b00      	cmp	r3, #0
 800819a:	d022      	beq.n	80081e2 <ATC_SendReceive+0x17e>
 800819c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d11f      	bne.n	80081e2 <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 80081a2:	f7fa feff 	bl	8002fa4 <HAL_GetTick>
 80081a6:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 80081a8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 80081b2:	e00e      	b.n	80081d2 <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 80081b4:	2001      	movs	r0, #1
 80081b6:	f000 f897 	bl	80082e8 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff fdd9 	bl	8007d74 <ATC_CheckResponse>
 80081c2:	4603      	mov	r3, r0
 80081c4:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 80081c6:	7ffb      	ldrb	r3, [r7, #31]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 80081cc:	7ffb      	ldrb	r3, [r7, #31]
 80081ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80081d0:	e007      	b.n	80081e2 <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 80081d2:	f7fa fee7 	bl	8002fa4 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081de:	429a      	cmp	r2, r3
 80081e0:	d8e8      	bhi.n	80081b4 <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 80081e8:	2300      	movs	r3, #0
 80081ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80081ee:	e00d      	b.n	800820c <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 80081f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081f4:	330a      	adds	r3, #10
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fce2 	bl	8007bc6 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8008202:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008206:	3301      	adds	r3, #1
 8008208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800820c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008210:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008214:	429a      	cmp	r2, r3
 8008216:	d3eb      	bcc.n	80081f0 <ATC_SendReceive+0x18c>
  }
  return answer;
 8008218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800821a:	4618      	mov	r0, r3
 800821c:	3734      	adds	r7, #52	@ 0x34
 800821e:	46bd      	mov	sp, r7
 8008220:	bd90      	pop	{r4, r7, pc}

08008222 <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 800822e:	887a      	ldrh	r2, [r7, #2]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	8a9b      	ldrh	r3, [r3, #20]
 8008234:	4619      	mov	r1, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8b1b      	ldrh	r3, [r3, #24]
 800823a:	1acb      	subs	r3, r1, r3
 800823c:	429a      	cmp	r2, r3
 800823e:	dd05      	ble.n	800824c <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	8a9a      	ldrh	r2, [r3, #20]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	8b1b      	ldrh	r3, [r3, #24]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	8b12      	ldrh	r2, [r2, #24]
 8008254:	1898      	adds	r0, r3, r2
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	887a      	ldrh	r2, [r7, #2]
 800825c:	4619      	mov	r1, r3
 800825e:	f000 fc8a 	bl	8008b76 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8b1a      	ldrh	r2, [r3, #24]
 8008266:	887b      	ldrh	r3, [r7, #2]
 8008268:	4413      	add	r3, r2
 800826a:	b29a      	uxth	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69d9      	ldr	r1, [r3, #28]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	8a9b      	ldrh	r3, [r3, #20]
 800827c:	461a      	mov	r2, r3
 800827e:	f7fd fe7c 	bl	8005f7a <HAL_UARTEx_ReceiveToIdle_DMA>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10c      	bne.n	80082a2 <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0208 	bic.w	r2, r2, #8
 800829e:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 80082a0:	e01e      	b.n	80082e0 <ATC_IdleLineCallback+0xbe>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
    HAL_UART_AbortReceive(hAtc->hUart);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd ff27 	bl	8006104 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69d9      	ldr	r1, [r3, #28]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	8a9b      	ldrh	r3, [r3, #20]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f7fd fe59 	bl	8005f7a <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 0208 	bic.w	r2, r2, #8
 80082de:	601a      	str	r2, [r3, #0]
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fa fe63 	bl	8002fbc <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <atoi>:
 80082fe:	220a      	movs	r2, #10
 8008300:	2100      	movs	r1, #0
 8008302:	f000 b939 	b.w	8008578 <strtol>
	...

08008308 <malloc>:
 8008308:	4b02      	ldr	r3, [pc, #8]	@ (8008314 <malloc+0xc>)
 800830a:	4601      	mov	r1, r0
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	f000 b82d 	b.w	800836c <_malloc_r>
 8008312:	bf00      	nop
 8008314:	20000018 	.word	0x20000018

08008318 <free>:
 8008318:	4b02      	ldr	r3, [pc, #8]	@ (8008324 <free+0xc>)
 800831a:	4601      	mov	r1, r0
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	f000 bc39 	b.w	8008b94 <_free_r>
 8008322:	bf00      	nop
 8008324:	20000018 	.word	0x20000018

08008328 <sbrk_aligned>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4e0f      	ldr	r6, [pc, #60]	@ (8008368 <sbrk_aligned+0x40>)
 800832c:	460c      	mov	r4, r1
 800832e:	6831      	ldr	r1, [r6, #0]
 8008330:	4605      	mov	r5, r0
 8008332:	b911      	cbnz	r1, 800833a <sbrk_aligned+0x12>
 8008334:	f000 fbc8 	bl	8008ac8 <_sbrk_r>
 8008338:	6030      	str	r0, [r6, #0]
 800833a:	4621      	mov	r1, r4
 800833c:	4628      	mov	r0, r5
 800833e:	f000 fbc3 	bl	8008ac8 <_sbrk_r>
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	d103      	bne.n	800834e <sbrk_aligned+0x26>
 8008346:	f04f 34ff 	mov.w	r4, #4294967295
 800834a:	4620      	mov	r0, r4
 800834c:	bd70      	pop	{r4, r5, r6, pc}
 800834e:	1cc4      	adds	r4, r0, #3
 8008350:	f024 0403 	bic.w	r4, r4, #3
 8008354:	42a0      	cmp	r0, r4
 8008356:	d0f8      	beq.n	800834a <sbrk_aligned+0x22>
 8008358:	1a21      	subs	r1, r4, r0
 800835a:	4628      	mov	r0, r5
 800835c:	f000 fbb4 	bl	8008ac8 <_sbrk_r>
 8008360:	3001      	adds	r0, #1
 8008362:	d1f2      	bne.n	800834a <sbrk_aligned+0x22>
 8008364:	e7ef      	b.n	8008346 <sbrk_aligned+0x1e>
 8008366:	bf00      	nop
 8008368:	20000b2c 	.word	0x20000b2c

0800836c <_malloc_r>:
 800836c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008370:	1ccd      	adds	r5, r1, #3
 8008372:	f025 0503 	bic.w	r5, r5, #3
 8008376:	3508      	adds	r5, #8
 8008378:	2d0c      	cmp	r5, #12
 800837a:	bf38      	it	cc
 800837c:	250c      	movcc	r5, #12
 800837e:	2d00      	cmp	r5, #0
 8008380:	4606      	mov	r6, r0
 8008382:	db01      	blt.n	8008388 <_malloc_r+0x1c>
 8008384:	42a9      	cmp	r1, r5
 8008386:	d904      	bls.n	8008392 <_malloc_r+0x26>
 8008388:	230c      	movs	r3, #12
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	2000      	movs	r0, #0
 800838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008468 <_malloc_r+0xfc>
 8008396:	f000 f869 	bl	800846c <__malloc_lock>
 800839a:	f8d8 3000 	ldr.w	r3, [r8]
 800839e:	461c      	mov	r4, r3
 80083a0:	bb44      	cbnz	r4, 80083f4 <_malloc_r+0x88>
 80083a2:	4629      	mov	r1, r5
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7ff ffbf 	bl	8008328 <sbrk_aligned>
 80083aa:	1c43      	adds	r3, r0, #1
 80083ac:	4604      	mov	r4, r0
 80083ae:	d158      	bne.n	8008462 <_malloc_r+0xf6>
 80083b0:	f8d8 4000 	ldr.w	r4, [r8]
 80083b4:	4627      	mov	r7, r4
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	d143      	bne.n	8008442 <_malloc_r+0xd6>
 80083ba:	2c00      	cmp	r4, #0
 80083bc:	d04b      	beq.n	8008456 <_malloc_r+0xea>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	4639      	mov	r1, r7
 80083c2:	4630      	mov	r0, r6
 80083c4:	eb04 0903 	add.w	r9, r4, r3
 80083c8:	f000 fb7e 	bl	8008ac8 <_sbrk_r>
 80083cc:	4581      	cmp	r9, r0
 80083ce:	d142      	bne.n	8008456 <_malloc_r+0xea>
 80083d0:	6821      	ldr	r1, [r4, #0]
 80083d2:	1a6d      	subs	r5, r5, r1
 80083d4:	4629      	mov	r1, r5
 80083d6:	4630      	mov	r0, r6
 80083d8:	f7ff ffa6 	bl	8008328 <sbrk_aligned>
 80083dc:	3001      	adds	r0, #1
 80083de:	d03a      	beq.n	8008456 <_malloc_r+0xea>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	442b      	add	r3, r5
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	bb62      	cbnz	r2, 8008448 <_malloc_r+0xdc>
 80083ee:	f8c8 7000 	str.w	r7, [r8]
 80083f2:	e00f      	b.n	8008414 <_malloc_r+0xa8>
 80083f4:	6822      	ldr	r2, [r4, #0]
 80083f6:	1b52      	subs	r2, r2, r5
 80083f8:	d420      	bmi.n	800843c <_malloc_r+0xd0>
 80083fa:	2a0b      	cmp	r2, #11
 80083fc:	d917      	bls.n	800842e <_malloc_r+0xc2>
 80083fe:	1961      	adds	r1, r4, r5
 8008400:	42a3      	cmp	r3, r4
 8008402:	6025      	str	r5, [r4, #0]
 8008404:	bf18      	it	ne
 8008406:	6059      	strne	r1, [r3, #4]
 8008408:	6863      	ldr	r3, [r4, #4]
 800840a:	bf08      	it	eq
 800840c:	f8c8 1000 	streq.w	r1, [r8]
 8008410:	5162      	str	r2, [r4, r5]
 8008412:	604b      	str	r3, [r1, #4]
 8008414:	4630      	mov	r0, r6
 8008416:	f000 f82f 	bl	8008478 <__malloc_unlock>
 800841a:	f104 000b 	add.w	r0, r4, #11
 800841e:	1d23      	adds	r3, r4, #4
 8008420:	f020 0007 	bic.w	r0, r0, #7
 8008424:	1ac2      	subs	r2, r0, r3
 8008426:	bf1c      	itt	ne
 8008428:	1a1b      	subne	r3, r3, r0
 800842a:	50a3      	strne	r3, [r4, r2]
 800842c:	e7af      	b.n	800838e <_malloc_r+0x22>
 800842e:	6862      	ldr	r2, [r4, #4]
 8008430:	42a3      	cmp	r3, r4
 8008432:	bf0c      	ite	eq
 8008434:	f8c8 2000 	streq.w	r2, [r8]
 8008438:	605a      	strne	r2, [r3, #4]
 800843a:	e7eb      	b.n	8008414 <_malloc_r+0xa8>
 800843c:	4623      	mov	r3, r4
 800843e:	6864      	ldr	r4, [r4, #4]
 8008440:	e7ae      	b.n	80083a0 <_malloc_r+0x34>
 8008442:	463c      	mov	r4, r7
 8008444:	687f      	ldr	r7, [r7, #4]
 8008446:	e7b6      	b.n	80083b6 <_malloc_r+0x4a>
 8008448:	461a      	mov	r2, r3
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	42a3      	cmp	r3, r4
 800844e:	d1fb      	bne.n	8008448 <_malloc_r+0xdc>
 8008450:	2300      	movs	r3, #0
 8008452:	6053      	str	r3, [r2, #4]
 8008454:	e7de      	b.n	8008414 <_malloc_r+0xa8>
 8008456:	230c      	movs	r3, #12
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	4630      	mov	r0, r6
 800845c:	f000 f80c 	bl	8008478 <__malloc_unlock>
 8008460:	e794      	b.n	800838c <_malloc_r+0x20>
 8008462:	6005      	str	r5, [r0, #0]
 8008464:	e7d6      	b.n	8008414 <_malloc_r+0xa8>
 8008466:	bf00      	nop
 8008468:	20000b30 	.word	0x20000b30

0800846c <__malloc_lock>:
 800846c:	4801      	ldr	r0, [pc, #4]	@ (8008474 <__malloc_lock+0x8>)
 800846e:	f000 bb78 	b.w	8008b62 <__retarget_lock_acquire_recursive>
 8008472:	bf00      	nop
 8008474:	20000c74 	.word	0x20000c74

08008478 <__malloc_unlock>:
 8008478:	4801      	ldr	r0, [pc, #4]	@ (8008480 <__malloc_unlock+0x8>)
 800847a:	f000 bb73 	b.w	8008b64 <__retarget_lock_release_recursive>
 800847e:	bf00      	nop
 8008480:	20000c74 	.word	0x20000c74

08008484 <_strtol_l.constprop.0>:
 8008484:	2b24      	cmp	r3, #36	@ 0x24
 8008486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848a:	4686      	mov	lr, r0
 800848c:	4690      	mov	r8, r2
 800848e:	d801      	bhi.n	8008494 <_strtol_l.constprop.0+0x10>
 8008490:	2b01      	cmp	r3, #1
 8008492:	d106      	bne.n	80084a2 <_strtol_l.constprop.0+0x1e>
 8008494:	f000 fb3a 	bl	8008b0c <__errno>
 8008498:	2316      	movs	r3, #22
 800849a:	6003      	str	r3, [r0, #0]
 800849c:	2000      	movs	r0, #0
 800849e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a2:	4834      	ldr	r0, [pc, #208]	@ (8008574 <_strtol_l.constprop.0+0xf0>)
 80084a4:	460d      	mov	r5, r1
 80084a6:	462a      	mov	r2, r5
 80084a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084ac:	5d06      	ldrb	r6, [r0, r4]
 80084ae:	f016 0608 	ands.w	r6, r6, #8
 80084b2:	d1f8      	bne.n	80084a6 <_strtol_l.constprop.0+0x22>
 80084b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80084b6:	d12d      	bne.n	8008514 <_strtol_l.constprop.0+0x90>
 80084b8:	782c      	ldrb	r4, [r5, #0]
 80084ba:	2601      	movs	r6, #1
 80084bc:	1c95      	adds	r5, r2, #2
 80084be:	f033 0210 	bics.w	r2, r3, #16
 80084c2:	d109      	bne.n	80084d8 <_strtol_l.constprop.0+0x54>
 80084c4:	2c30      	cmp	r4, #48	@ 0x30
 80084c6:	d12a      	bne.n	800851e <_strtol_l.constprop.0+0x9a>
 80084c8:	782a      	ldrb	r2, [r5, #0]
 80084ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084ce:	2a58      	cmp	r2, #88	@ 0x58
 80084d0:	d125      	bne.n	800851e <_strtol_l.constprop.0+0x9a>
 80084d2:	786c      	ldrb	r4, [r5, #1]
 80084d4:	2310      	movs	r3, #16
 80084d6:	3502      	adds	r5, #2
 80084d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80084dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084e0:	2200      	movs	r2, #0
 80084e2:	fbbc f9f3 	udiv	r9, ip, r3
 80084e6:	4610      	mov	r0, r2
 80084e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80084ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80084f0:	2f09      	cmp	r7, #9
 80084f2:	d81b      	bhi.n	800852c <_strtol_l.constprop.0+0xa8>
 80084f4:	463c      	mov	r4, r7
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	dd27      	ble.n	800854a <_strtol_l.constprop.0+0xc6>
 80084fa:	1c57      	adds	r7, r2, #1
 80084fc:	d007      	beq.n	800850e <_strtol_l.constprop.0+0x8a>
 80084fe:	4581      	cmp	r9, r0
 8008500:	d320      	bcc.n	8008544 <_strtol_l.constprop.0+0xc0>
 8008502:	d101      	bne.n	8008508 <_strtol_l.constprop.0+0x84>
 8008504:	45a2      	cmp	sl, r4
 8008506:	db1d      	blt.n	8008544 <_strtol_l.constprop.0+0xc0>
 8008508:	fb00 4003 	mla	r0, r0, r3, r4
 800850c:	2201      	movs	r2, #1
 800850e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008512:	e7eb      	b.n	80084ec <_strtol_l.constprop.0+0x68>
 8008514:	2c2b      	cmp	r4, #43	@ 0x2b
 8008516:	bf04      	itt	eq
 8008518:	782c      	ldrbeq	r4, [r5, #0]
 800851a:	1c95      	addeq	r5, r2, #2
 800851c:	e7cf      	b.n	80084be <_strtol_l.constprop.0+0x3a>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1da      	bne.n	80084d8 <_strtol_l.constprop.0+0x54>
 8008522:	2c30      	cmp	r4, #48	@ 0x30
 8008524:	bf0c      	ite	eq
 8008526:	2308      	moveq	r3, #8
 8008528:	230a      	movne	r3, #10
 800852a:	e7d5      	b.n	80084d8 <_strtol_l.constprop.0+0x54>
 800852c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008530:	2f19      	cmp	r7, #25
 8008532:	d801      	bhi.n	8008538 <_strtol_l.constprop.0+0xb4>
 8008534:	3c37      	subs	r4, #55	@ 0x37
 8008536:	e7de      	b.n	80084f6 <_strtol_l.constprop.0+0x72>
 8008538:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800853c:	2f19      	cmp	r7, #25
 800853e:	d804      	bhi.n	800854a <_strtol_l.constprop.0+0xc6>
 8008540:	3c57      	subs	r4, #87	@ 0x57
 8008542:	e7d8      	b.n	80084f6 <_strtol_l.constprop.0+0x72>
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	e7e1      	b.n	800850e <_strtol_l.constprop.0+0x8a>
 800854a:	1c53      	adds	r3, r2, #1
 800854c:	d108      	bne.n	8008560 <_strtol_l.constprop.0+0xdc>
 800854e:	2322      	movs	r3, #34	@ 0x22
 8008550:	f8ce 3000 	str.w	r3, [lr]
 8008554:	4660      	mov	r0, ip
 8008556:	f1b8 0f00 	cmp.w	r8, #0
 800855a:	d0a0      	beq.n	800849e <_strtol_l.constprop.0+0x1a>
 800855c:	1e69      	subs	r1, r5, #1
 800855e:	e006      	b.n	800856e <_strtol_l.constprop.0+0xea>
 8008560:	b106      	cbz	r6, 8008564 <_strtol_l.constprop.0+0xe0>
 8008562:	4240      	negs	r0, r0
 8008564:	f1b8 0f00 	cmp.w	r8, #0
 8008568:	d099      	beq.n	800849e <_strtol_l.constprop.0+0x1a>
 800856a:	2a00      	cmp	r2, #0
 800856c:	d1f6      	bne.n	800855c <_strtol_l.constprop.0+0xd8>
 800856e:	f8c8 1000 	str.w	r1, [r8]
 8008572:	e794      	b.n	800849e <_strtol_l.constprop.0+0x1a>
 8008574:	08009a6d 	.word	0x08009a6d

08008578 <strtol>:
 8008578:	4613      	mov	r3, r2
 800857a:	460a      	mov	r2, r1
 800857c:	4601      	mov	r1, r0
 800857e:	4802      	ldr	r0, [pc, #8]	@ (8008588 <strtol+0x10>)
 8008580:	6800      	ldr	r0, [r0, #0]
 8008582:	f7ff bf7f 	b.w	8008484 <_strtol_l.constprop.0>
 8008586:	bf00      	nop
 8008588:	20000018 	.word	0x20000018

0800858c <std>:
 800858c:	2300      	movs	r3, #0
 800858e:	b510      	push	{r4, lr}
 8008590:	4604      	mov	r4, r0
 8008592:	e9c0 3300 	strd	r3, r3, [r0]
 8008596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800859a:	6083      	str	r3, [r0, #8]
 800859c:	8181      	strh	r1, [r0, #12]
 800859e:	6643      	str	r3, [r0, #100]	@ 0x64
 80085a0:	81c2      	strh	r2, [r0, #14]
 80085a2:	6183      	str	r3, [r0, #24]
 80085a4:	4619      	mov	r1, r3
 80085a6:	2208      	movs	r2, #8
 80085a8:	305c      	adds	r0, #92	@ 0x5c
 80085aa:	f000 fa19 	bl	80089e0 <memset>
 80085ae:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <std+0x58>)
 80085b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80085b2:	4b0d      	ldr	r3, [pc, #52]	@ (80085e8 <std+0x5c>)
 80085b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085b6:	4b0d      	ldr	r3, [pc, #52]	@ (80085ec <std+0x60>)
 80085b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085ba:	4b0d      	ldr	r3, [pc, #52]	@ (80085f0 <std+0x64>)
 80085bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80085be:	4b0d      	ldr	r3, [pc, #52]	@ (80085f4 <std+0x68>)
 80085c0:	6224      	str	r4, [r4, #32]
 80085c2:	429c      	cmp	r4, r3
 80085c4:	d006      	beq.n	80085d4 <std+0x48>
 80085c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085ca:	4294      	cmp	r4, r2
 80085cc:	d002      	beq.n	80085d4 <std+0x48>
 80085ce:	33d0      	adds	r3, #208	@ 0xd0
 80085d0:	429c      	cmp	r4, r3
 80085d2:	d105      	bne.n	80085e0 <std+0x54>
 80085d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085dc:	f000 bac0 	b.w	8008b60 <__retarget_lock_init_recursive>
 80085e0:	bd10      	pop	{r4, pc}
 80085e2:	bf00      	nop
 80085e4:	08008831 	.word	0x08008831
 80085e8:	08008853 	.word	0x08008853
 80085ec:	0800888b 	.word	0x0800888b
 80085f0:	080088af 	.word	0x080088af
 80085f4:	20000b34 	.word	0x20000b34

080085f8 <stdio_exit_handler>:
 80085f8:	4a02      	ldr	r2, [pc, #8]	@ (8008604 <stdio_exit_handler+0xc>)
 80085fa:	4903      	ldr	r1, [pc, #12]	@ (8008608 <stdio_exit_handler+0x10>)
 80085fc:	4803      	ldr	r0, [pc, #12]	@ (800860c <stdio_exit_handler+0x14>)
 80085fe:	f000 b869 	b.w	80086d4 <_fwalk_sglue>
 8008602:	bf00      	nop
 8008604:	2000000c 	.word	0x2000000c
 8008608:	08009581 	.word	0x08009581
 800860c:	2000001c 	.word	0x2000001c

08008610 <cleanup_stdio>:
 8008610:	6841      	ldr	r1, [r0, #4]
 8008612:	4b0c      	ldr	r3, [pc, #48]	@ (8008644 <cleanup_stdio+0x34>)
 8008614:	4299      	cmp	r1, r3
 8008616:	b510      	push	{r4, lr}
 8008618:	4604      	mov	r4, r0
 800861a:	d001      	beq.n	8008620 <cleanup_stdio+0x10>
 800861c:	f000 ffb0 	bl	8009580 <_fflush_r>
 8008620:	68a1      	ldr	r1, [r4, #8]
 8008622:	4b09      	ldr	r3, [pc, #36]	@ (8008648 <cleanup_stdio+0x38>)
 8008624:	4299      	cmp	r1, r3
 8008626:	d002      	beq.n	800862e <cleanup_stdio+0x1e>
 8008628:	4620      	mov	r0, r4
 800862a:	f000 ffa9 	bl	8009580 <_fflush_r>
 800862e:	68e1      	ldr	r1, [r4, #12]
 8008630:	4b06      	ldr	r3, [pc, #24]	@ (800864c <cleanup_stdio+0x3c>)
 8008632:	4299      	cmp	r1, r3
 8008634:	d004      	beq.n	8008640 <cleanup_stdio+0x30>
 8008636:	4620      	mov	r0, r4
 8008638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800863c:	f000 bfa0 	b.w	8009580 <_fflush_r>
 8008640:	bd10      	pop	{r4, pc}
 8008642:	bf00      	nop
 8008644:	20000b34 	.word	0x20000b34
 8008648:	20000b9c 	.word	0x20000b9c
 800864c:	20000c04 	.word	0x20000c04

08008650 <global_stdio_init.part.0>:
 8008650:	b510      	push	{r4, lr}
 8008652:	4b0b      	ldr	r3, [pc, #44]	@ (8008680 <global_stdio_init.part.0+0x30>)
 8008654:	4c0b      	ldr	r4, [pc, #44]	@ (8008684 <global_stdio_init.part.0+0x34>)
 8008656:	4a0c      	ldr	r2, [pc, #48]	@ (8008688 <global_stdio_init.part.0+0x38>)
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	4620      	mov	r0, r4
 800865c:	2200      	movs	r2, #0
 800865e:	2104      	movs	r1, #4
 8008660:	f7ff ff94 	bl	800858c <std>
 8008664:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008668:	2201      	movs	r2, #1
 800866a:	2109      	movs	r1, #9
 800866c:	f7ff ff8e 	bl	800858c <std>
 8008670:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008674:	2202      	movs	r2, #2
 8008676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800867a:	2112      	movs	r1, #18
 800867c:	f7ff bf86 	b.w	800858c <std>
 8008680:	20000c6c 	.word	0x20000c6c
 8008684:	20000b34 	.word	0x20000b34
 8008688:	080085f9 	.word	0x080085f9

0800868c <__sfp_lock_acquire>:
 800868c:	4801      	ldr	r0, [pc, #4]	@ (8008694 <__sfp_lock_acquire+0x8>)
 800868e:	f000 ba68 	b.w	8008b62 <__retarget_lock_acquire_recursive>
 8008692:	bf00      	nop
 8008694:	20000c75 	.word	0x20000c75

08008698 <__sfp_lock_release>:
 8008698:	4801      	ldr	r0, [pc, #4]	@ (80086a0 <__sfp_lock_release+0x8>)
 800869a:	f000 ba63 	b.w	8008b64 <__retarget_lock_release_recursive>
 800869e:	bf00      	nop
 80086a0:	20000c75 	.word	0x20000c75

080086a4 <__sinit>:
 80086a4:	b510      	push	{r4, lr}
 80086a6:	4604      	mov	r4, r0
 80086a8:	f7ff fff0 	bl	800868c <__sfp_lock_acquire>
 80086ac:	6a23      	ldr	r3, [r4, #32]
 80086ae:	b11b      	cbz	r3, 80086b8 <__sinit+0x14>
 80086b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b4:	f7ff bff0 	b.w	8008698 <__sfp_lock_release>
 80086b8:	4b04      	ldr	r3, [pc, #16]	@ (80086cc <__sinit+0x28>)
 80086ba:	6223      	str	r3, [r4, #32]
 80086bc:	4b04      	ldr	r3, [pc, #16]	@ (80086d0 <__sinit+0x2c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1f5      	bne.n	80086b0 <__sinit+0xc>
 80086c4:	f7ff ffc4 	bl	8008650 <global_stdio_init.part.0>
 80086c8:	e7f2      	b.n	80086b0 <__sinit+0xc>
 80086ca:	bf00      	nop
 80086cc:	08008611 	.word	0x08008611
 80086d0:	20000c6c 	.word	0x20000c6c

080086d4 <_fwalk_sglue>:
 80086d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d8:	4607      	mov	r7, r0
 80086da:	4688      	mov	r8, r1
 80086dc:	4614      	mov	r4, r2
 80086de:	2600      	movs	r6, #0
 80086e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086e4:	f1b9 0901 	subs.w	r9, r9, #1
 80086e8:	d505      	bpl.n	80086f6 <_fwalk_sglue+0x22>
 80086ea:	6824      	ldr	r4, [r4, #0]
 80086ec:	2c00      	cmp	r4, #0
 80086ee:	d1f7      	bne.n	80086e0 <_fwalk_sglue+0xc>
 80086f0:	4630      	mov	r0, r6
 80086f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d907      	bls.n	800870c <_fwalk_sglue+0x38>
 80086fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008700:	3301      	adds	r3, #1
 8008702:	d003      	beq.n	800870c <_fwalk_sglue+0x38>
 8008704:	4629      	mov	r1, r5
 8008706:	4638      	mov	r0, r7
 8008708:	47c0      	blx	r8
 800870a:	4306      	orrs	r6, r0
 800870c:	3568      	adds	r5, #104	@ 0x68
 800870e:	e7e9      	b.n	80086e4 <_fwalk_sglue+0x10>

08008710 <iprintf>:
 8008710:	b40f      	push	{r0, r1, r2, r3}
 8008712:	b507      	push	{r0, r1, r2, lr}
 8008714:	4906      	ldr	r1, [pc, #24]	@ (8008730 <iprintf+0x20>)
 8008716:	ab04      	add	r3, sp, #16
 8008718:	6808      	ldr	r0, [r1, #0]
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	6881      	ldr	r1, [r0, #8]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f000 fc03 	bl	8008f2c <_vfiprintf_r>
 8008726:	b003      	add	sp, #12
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b004      	add	sp, #16
 800872e:	4770      	bx	lr
 8008730:	20000018 	.word	0x20000018

08008734 <_puts_r>:
 8008734:	6a03      	ldr	r3, [r0, #32]
 8008736:	b570      	push	{r4, r5, r6, lr}
 8008738:	6884      	ldr	r4, [r0, #8]
 800873a:	4605      	mov	r5, r0
 800873c:	460e      	mov	r6, r1
 800873e:	b90b      	cbnz	r3, 8008744 <_puts_r+0x10>
 8008740:	f7ff ffb0 	bl	80086a4 <__sinit>
 8008744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008746:	07db      	lsls	r3, r3, #31
 8008748:	d405      	bmi.n	8008756 <_puts_r+0x22>
 800874a:	89a3      	ldrh	r3, [r4, #12]
 800874c:	0598      	lsls	r0, r3, #22
 800874e:	d402      	bmi.n	8008756 <_puts_r+0x22>
 8008750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008752:	f000 fa06 	bl	8008b62 <__retarget_lock_acquire_recursive>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	0719      	lsls	r1, r3, #28
 800875a:	d502      	bpl.n	8008762 <_puts_r+0x2e>
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d135      	bne.n	80087ce <_puts_r+0x9a>
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f000 f8e5 	bl	8008934 <__swsetup_r>
 800876a:	b380      	cbz	r0, 80087ce <_puts_r+0x9a>
 800876c:	f04f 35ff 	mov.w	r5, #4294967295
 8008770:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008772:	07da      	lsls	r2, r3, #31
 8008774:	d405      	bmi.n	8008782 <_puts_r+0x4e>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	059b      	lsls	r3, r3, #22
 800877a:	d402      	bmi.n	8008782 <_puts_r+0x4e>
 800877c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800877e:	f000 f9f1 	bl	8008b64 <__retarget_lock_release_recursive>
 8008782:	4628      	mov	r0, r5
 8008784:	bd70      	pop	{r4, r5, r6, pc}
 8008786:	2b00      	cmp	r3, #0
 8008788:	da04      	bge.n	8008794 <_puts_r+0x60>
 800878a:	69a2      	ldr	r2, [r4, #24]
 800878c:	429a      	cmp	r2, r3
 800878e:	dc17      	bgt.n	80087c0 <_puts_r+0x8c>
 8008790:	290a      	cmp	r1, #10
 8008792:	d015      	beq.n	80087c0 <_puts_r+0x8c>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	6022      	str	r2, [r4, #0]
 800879a:	7019      	strb	r1, [r3, #0]
 800879c:	68a3      	ldr	r3, [r4, #8]
 800879e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087a2:	3b01      	subs	r3, #1
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	2900      	cmp	r1, #0
 80087a8:	d1ed      	bne.n	8008786 <_puts_r+0x52>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	da11      	bge.n	80087d2 <_puts_r+0x9e>
 80087ae:	4622      	mov	r2, r4
 80087b0:	210a      	movs	r1, #10
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 f87f 	bl	80088b6 <__swbuf_r>
 80087b8:	3001      	adds	r0, #1
 80087ba:	d0d7      	beq.n	800876c <_puts_r+0x38>
 80087bc:	250a      	movs	r5, #10
 80087be:	e7d7      	b.n	8008770 <_puts_r+0x3c>
 80087c0:	4622      	mov	r2, r4
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 f877 	bl	80088b6 <__swbuf_r>
 80087c8:	3001      	adds	r0, #1
 80087ca:	d1e7      	bne.n	800879c <_puts_r+0x68>
 80087cc:	e7ce      	b.n	800876c <_puts_r+0x38>
 80087ce:	3e01      	subs	r6, #1
 80087d0:	e7e4      	b.n	800879c <_puts_r+0x68>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	6022      	str	r2, [r4, #0]
 80087d8:	220a      	movs	r2, #10
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e7ee      	b.n	80087bc <_puts_r+0x88>
	...

080087e0 <puts>:
 80087e0:	4b02      	ldr	r3, [pc, #8]	@ (80087ec <puts+0xc>)
 80087e2:	4601      	mov	r1, r0
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f7ff bfa5 	b.w	8008734 <_puts_r>
 80087ea:	bf00      	nop
 80087ec:	20000018 	.word	0x20000018

080087f0 <siprintf>:
 80087f0:	b40e      	push	{r1, r2, r3}
 80087f2:	b500      	push	{lr}
 80087f4:	b09c      	sub	sp, #112	@ 0x70
 80087f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80087f8:	9002      	str	r0, [sp, #8]
 80087fa:	9006      	str	r0, [sp, #24]
 80087fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008800:	4809      	ldr	r0, [pc, #36]	@ (8008828 <siprintf+0x38>)
 8008802:	9107      	str	r1, [sp, #28]
 8008804:	9104      	str	r1, [sp, #16]
 8008806:	4909      	ldr	r1, [pc, #36]	@ (800882c <siprintf+0x3c>)
 8008808:	f853 2b04 	ldr.w	r2, [r3], #4
 800880c:	9105      	str	r1, [sp, #20]
 800880e:	6800      	ldr	r0, [r0, #0]
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	a902      	add	r1, sp, #8
 8008814:	f000 fa64 	bl	8008ce0 <_svfiprintf_r>
 8008818:	9b02      	ldr	r3, [sp, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	b01c      	add	sp, #112	@ 0x70
 8008820:	f85d eb04 	ldr.w	lr, [sp], #4
 8008824:	b003      	add	sp, #12
 8008826:	4770      	bx	lr
 8008828:	20000018 	.word	0x20000018
 800882c:	ffff0208 	.word	0xffff0208

08008830 <__sread>:
 8008830:	b510      	push	{r4, lr}
 8008832:	460c      	mov	r4, r1
 8008834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008838:	f000 f934 	bl	8008aa4 <_read_r>
 800883c:	2800      	cmp	r0, #0
 800883e:	bfab      	itete	ge
 8008840:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008842:	89a3      	ldrhlt	r3, [r4, #12]
 8008844:	181b      	addge	r3, r3, r0
 8008846:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800884a:	bfac      	ite	ge
 800884c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800884e:	81a3      	strhlt	r3, [r4, #12]
 8008850:	bd10      	pop	{r4, pc}

08008852 <__swrite>:
 8008852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008856:	461f      	mov	r7, r3
 8008858:	898b      	ldrh	r3, [r1, #12]
 800885a:	05db      	lsls	r3, r3, #23
 800885c:	4605      	mov	r5, r0
 800885e:	460c      	mov	r4, r1
 8008860:	4616      	mov	r6, r2
 8008862:	d505      	bpl.n	8008870 <__swrite+0x1e>
 8008864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008868:	2302      	movs	r3, #2
 800886a:	2200      	movs	r2, #0
 800886c:	f000 f908 	bl	8008a80 <_lseek_r>
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800887a:	81a3      	strh	r3, [r4, #12]
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	4628      	mov	r0, r5
 8008882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008886:	f000 b92f 	b.w	8008ae8 <_write_r>

0800888a <__sseek>:
 800888a:	b510      	push	{r4, lr}
 800888c:	460c      	mov	r4, r1
 800888e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008892:	f000 f8f5 	bl	8008a80 <_lseek_r>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	bf15      	itete	ne
 800889c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800889e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088a6:	81a3      	strheq	r3, [r4, #12]
 80088a8:	bf18      	it	ne
 80088aa:	81a3      	strhne	r3, [r4, #12]
 80088ac:	bd10      	pop	{r4, pc}

080088ae <__sclose>:
 80088ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b2:	f000 b8d5 	b.w	8008a60 <_close_r>

080088b6 <__swbuf_r>:
 80088b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b8:	460e      	mov	r6, r1
 80088ba:	4614      	mov	r4, r2
 80088bc:	4605      	mov	r5, r0
 80088be:	b118      	cbz	r0, 80088c8 <__swbuf_r+0x12>
 80088c0:	6a03      	ldr	r3, [r0, #32]
 80088c2:	b90b      	cbnz	r3, 80088c8 <__swbuf_r+0x12>
 80088c4:	f7ff feee 	bl	80086a4 <__sinit>
 80088c8:	69a3      	ldr	r3, [r4, #24]
 80088ca:	60a3      	str	r3, [r4, #8]
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	071a      	lsls	r2, r3, #28
 80088d0:	d501      	bpl.n	80088d6 <__swbuf_r+0x20>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	b943      	cbnz	r3, 80088e8 <__swbuf_r+0x32>
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 f82b 	bl	8008934 <__swsetup_r>
 80088de:	b118      	cbz	r0, 80088e8 <__swbuf_r+0x32>
 80088e0:	f04f 37ff 	mov.w	r7, #4294967295
 80088e4:	4638      	mov	r0, r7
 80088e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	6922      	ldr	r2, [r4, #16]
 80088ec:	1a98      	subs	r0, r3, r2
 80088ee:	6963      	ldr	r3, [r4, #20]
 80088f0:	b2f6      	uxtb	r6, r6
 80088f2:	4283      	cmp	r3, r0
 80088f4:	4637      	mov	r7, r6
 80088f6:	dc05      	bgt.n	8008904 <__swbuf_r+0x4e>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	f000 fe40 	bl	8009580 <_fflush_r>
 8008900:	2800      	cmp	r0, #0
 8008902:	d1ed      	bne.n	80088e0 <__swbuf_r+0x2a>
 8008904:	68a3      	ldr	r3, [r4, #8]
 8008906:	3b01      	subs	r3, #1
 8008908:	60a3      	str	r3, [r4, #8]
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	6022      	str	r2, [r4, #0]
 8008910:	701e      	strb	r6, [r3, #0]
 8008912:	6962      	ldr	r2, [r4, #20]
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	429a      	cmp	r2, r3
 8008918:	d004      	beq.n	8008924 <__swbuf_r+0x6e>
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	07db      	lsls	r3, r3, #31
 800891e:	d5e1      	bpl.n	80088e4 <__swbuf_r+0x2e>
 8008920:	2e0a      	cmp	r6, #10
 8008922:	d1df      	bne.n	80088e4 <__swbuf_r+0x2e>
 8008924:	4621      	mov	r1, r4
 8008926:	4628      	mov	r0, r5
 8008928:	f000 fe2a 	bl	8009580 <_fflush_r>
 800892c:	2800      	cmp	r0, #0
 800892e:	d0d9      	beq.n	80088e4 <__swbuf_r+0x2e>
 8008930:	e7d6      	b.n	80088e0 <__swbuf_r+0x2a>
	...

08008934 <__swsetup_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4b29      	ldr	r3, [pc, #164]	@ (80089dc <__swsetup_r+0xa8>)
 8008938:	4605      	mov	r5, r0
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	460c      	mov	r4, r1
 800893e:	b118      	cbz	r0, 8008948 <__swsetup_r+0x14>
 8008940:	6a03      	ldr	r3, [r0, #32]
 8008942:	b90b      	cbnz	r3, 8008948 <__swsetup_r+0x14>
 8008944:	f7ff feae 	bl	80086a4 <__sinit>
 8008948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800894c:	0719      	lsls	r1, r3, #28
 800894e:	d422      	bmi.n	8008996 <__swsetup_r+0x62>
 8008950:	06da      	lsls	r2, r3, #27
 8008952:	d407      	bmi.n	8008964 <__swsetup_r+0x30>
 8008954:	2209      	movs	r2, #9
 8008956:	602a      	str	r2, [r5, #0]
 8008958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	f04f 30ff 	mov.w	r0, #4294967295
 8008962:	e033      	b.n	80089cc <__swsetup_r+0x98>
 8008964:	0758      	lsls	r0, r3, #29
 8008966:	d512      	bpl.n	800898e <__swsetup_r+0x5a>
 8008968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800896a:	b141      	cbz	r1, 800897e <__swsetup_r+0x4a>
 800896c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008970:	4299      	cmp	r1, r3
 8008972:	d002      	beq.n	800897a <__swsetup_r+0x46>
 8008974:	4628      	mov	r0, r5
 8008976:	f000 f90d 	bl	8008b94 <_free_r>
 800897a:	2300      	movs	r3, #0
 800897c:	6363      	str	r3, [r4, #52]	@ 0x34
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	2300      	movs	r3, #0
 8008988:	6063      	str	r3, [r4, #4]
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f043 0308 	orr.w	r3, r3, #8
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	b94b      	cbnz	r3, 80089ae <__swsetup_r+0x7a>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089a4:	d003      	beq.n	80089ae <__swsetup_r+0x7a>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 fe37 	bl	800961c <__smakebuf_r>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	f013 0201 	ands.w	r2, r3, #1
 80089b6:	d00a      	beq.n	80089ce <__swsetup_r+0x9a>
 80089b8:	2200      	movs	r2, #0
 80089ba:	60a2      	str	r2, [r4, #8]
 80089bc:	6962      	ldr	r2, [r4, #20]
 80089be:	4252      	negs	r2, r2
 80089c0:	61a2      	str	r2, [r4, #24]
 80089c2:	6922      	ldr	r2, [r4, #16]
 80089c4:	b942      	cbnz	r2, 80089d8 <__swsetup_r+0xa4>
 80089c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ca:	d1c5      	bne.n	8008958 <__swsetup_r+0x24>
 80089cc:	bd38      	pop	{r3, r4, r5, pc}
 80089ce:	0799      	lsls	r1, r3, #30
 80089d0:	bf58      	it	pl
 80089d2:	6962      	ldrpl	r2, [r4, #20]
 80089d4:	60a2      	str	r2, [r4, #8]
 80089d6:	e7f4      	b.n	80089c2 <__swsetup_r+0x8e>
 80089d8:	2000      	movs	r0, #0
 80089da:	e7f7      	b.n	80089cc <__swsetup_r+0x98>
 80089dc:	20000018 	.word	0x20000018

080089e0 <memset>:
 80089e0:	4402      	add	r2, r0
 80089e2:	4603      	mov	r3, r0
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d100      	bne.n	80089ea <memset+0xa>
 80089e8:	4770      	bx	lr
 80089ea:	f803 1b01 	strb.w	r1, [r3], #1
 80089ee:	e7f9      	b.n	80089e4 <memset+0x4>

080089f0 <strcat>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	4602      	mov	r2, r0
 80089f4:	7814      	ldrb	r4, [r2, #0]
 80089f6:	4613      	mov	r3, r2
 80089f8:	3201      	adds	r2, #1
 80089fa:	2c00      	cmp	r4, #0
 80089fc:	d1fa      	bne.n	80089f4 <strcat+0x4>
 80089fe:	3b01      	subs	r3, #1
 8008a00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d1f9      	bne.n	8008a00 <strcat+0x10>
 8008a0c:	bd10      	pop	{r4, pc}

08008a0e <strncpy>:
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	3901      	subs	r1, #1
 8008a12:	4603      	mov	r3, r0
 8008a14:	b132      	cbz	r2, 8008a24 <strncpy+0x16>
 8008a16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a1a:	f803 4b01 	strb.w	r4, [r3], #1
 8008a1e:	3a01      	subs	r2, #1
 8008a20:	2c00      	cmp	r4, #0
 8008a22:	d1f7      	bne.n	8008a14 <strncpy+0x6>
 8008a24:	441a      	add	r2, r3
 8008a26:	2100      	movs	r1, #0
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d100      	bne.n	8008a2e <strncpy+0x20>
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a32:	e7f9      	b.n	8008a28 <strncpy+0x1a>

08008a34 <strstr>:
 8008a34:	780a      	ldrb	r2, [r1, #0]
 8008a36:	b570      	push	{r4, r5, r6, lr}
 8008a38:	b96a      	cbnz	r2, 8008a56 <strstr+0x22>
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d109      	bne.n	8008a54 <strstr+0x20>
 8008a40:	460c      	mov	r4, r1
 8008a42:	4605      	mov	r5, r0
 8008a44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0f6      	beq.n	8008a3a <strstr+0x6>
 8008a4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008a50:	429e      	cmp	r6, r3
 8008a52:	d0f7      	beq.n	8008a44 <strstr+0x10>
 8008a54:	3001      	adds	r0, #1
 8008a56:	7803      	ldrb	r3, [r0, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1ef      	bne.n	8008a3c <strstr+0x8>
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	e7ec      	b.n	8008a3a <strstr+0x6>

08008a60 <_close_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d06      	ldr	r5, [pc, #24]	@ (8008a7c <_close_r+0x1c>)
 8008a64:	2300      	movs	r3, #0
 8008a66:	4604      	mov	r4, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	602b      	str	r3, [r5, #0]
 8008a6c:	f7f9 fdfd 	bl	800266a <_close>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d102      	bne.n	8008a7a <_close_r+0x1a>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	b103      	cbz	r3, 8008a7a <_close_r+0x1a>
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	20000c70 	.word	0x20000c70

08008a80 <_lseek_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d07      	ldr	r5, [pc, #28]	@ (8008aa0 <_lseek_r+0x20>)
 8008a84:	4604      	mov	r4, r0
 8008a86:	4608      	mov	r0, r1
 8008a88:	4611      	mov	r1, r2
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	602a      	str	r2, [r5, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f7f9 fe12 	bl	80026b8 <_lseek>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_lseek_r+0x1e>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_lseek_r+0x1e>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	20000c70 	.word	0x20000c70

08008aa4 <_read_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4d07      	ldr	r5, [pc, #28]	@ (8008ac4 <_read_r+0x20>)
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	4608      	mov	r0, r1
 8008aac:	4611      	mov	r1, r2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	602a      	str	r2, [r5, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f7f9 fdbc 	bl	8002630 <_read>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_read_r+0x1e>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_read_r+0x1e>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	20000c70 	.word	0x20000c70

08008ac8 <_sbrk_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d06      	ldr	r5, [pc, #24]	@ (8008ae4 <_sbrk_r+0x1c>)
 8008acc:	2300      	movs	r3, #0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4608      	mov	r0, r1
 8008ad2:	602b      	str	r3, [r5, #0]
 8008ad4:	f7f9 fdfe 	bl	80026d4 <_sbrk>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_sbrk_r+0x1a>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_sbrk_r+0x1a>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	20000c70 	.word	0x20000c70

08008ae8 <_write_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d07      	ldr	r5, [pc, #28]	@ (8008b08 <_write_r+0x20>)
 8008aec:	4604      	mov	r4, r0
 8008aee:	4608      	mov	r0, r1
 8008af0:	4611      	mov	r1, r2
 8008af2:	2200      	movs	r2, #0
 8008af4:	602a      	str	r2, [r5, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	f7f8 ffb6 	bl	8001a68 <_write>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d102      	bne.n	8008b06 <_write_r+0x1e>
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	b103      	cbz	r3, 8008b06 <_write_r+0x1e>
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	20000c70 	.word	0x20000c70

08008b0c <__errno>:
 8008b0c:	4b01      	ldr	r3, [pc, #4]	@ (8008b14 <__errno+0x8>)
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20000018 	.word	0x20000018

08008b18 <__libc_init_array>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8008b50 <__libc_init_array+0x38>)
 8008b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8008b54 <__libc_init_array+0x3c>)
 8008b1e:	1b64      	subs	r4, r4, r5
 8008b20:	10a4      	asrs	r4, r4, #2
 8008b22:	2600      	movs	r6, #0
 8008b24:	42a6      	cmp	r6, r4
 8008b26:	d109      	bne.n	8008b3c <__libc_init_array+0x24>
 8008b28:	4d0b      	ldr	r5, [pc, #44]	@ (8008b58 <__libc_init_array+0x40>)
 8008b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8008b5c <__libc_init_array+0x44>)
 8008b2c:	f000 fe24 	bl	8009778 <_init>
 8008b30:	1b64      	subs	r4, r4, r5
 8008b32:	10a4      	asrs	r4, r4, #2
 8008b34:	2600      	movs	r6, #0
 8008b36:	42a6      	cmp	r6, r4
 8008b38:	d105      	bne.n	8008b46 <__libc_init_array+0x2e>
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b40:	4798      	blx	r3
 8008b42:	3601      	adds	r6, #1
 8008b44:	e7ee      	b.n	8008b24 <__libc_init_array+0xc>
 8008b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4a:	4798      	blx	r3
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	e7f2      	b.n	8008b36 <__libc_init_array+0x1e>
 8008b50:	08009ba8 	.word	0x08009ba8
 8008b54:	08009ba8 	.word	0x08009ba8
 8008b58:	08009ba8 	.word	0x08009ba8
 8008b5c:	08009bac 	.word	0x08009bac

08008b60 <__retarget_lock_init_recursive>:
 8008b60:	4770      	bx	lr

08008b62 <__retarget_lock_acquire_recursive>:
 8008b62:	4770      	bx	lr

08008b64 <__retarget_lock_release_recursive>:
 8008b64:	4770      	bx	lr

08008b66 <strcpy>:
 8008b66:	4603      	mov	r3, r0
 8008b68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b6c:	f803 2b01 	strb.w	r2, [r3], #1
 8008b70:	2a00      	cmp	r2, #0
 8008b72:	d1f9      	bne.n	8008b68 <strcpy+0x2>
 8008b74:	4770      	bx	lr

08008b76 <memcpy>:
 8008b76:	440a      	add	r2, r1
 8008b78:	4291      	cmp	r1, r2
 8008b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b7e:	d100      	bne.n	8008b82 <memcpy+0xc>
 8008b80:	4770      	bx	lr
 8008b82:	b510      	push	{r4, lr}
 8008b84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8c:	4291      	cmp	r1, r2
 8008b8e:	d1f9      	bne.n	8008b84 <memcpy+0xe>
 8008b90:	bd10      	pop	{r4, pc}
	...

08008b94 <_free_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4605      	mov	r5, r0
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	d041      	beq.n	8008c20 <_free_r+0x8c>
 8008b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba0:	1f0c      	subs	r4, r1, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfb8      	it	lt
 8008ba6:	18e4      	addlt	r4, r4, r3
 8008ba8:	f7ff fc60 	bl	800846c <__malloc_lock>
 8008bac:	4a1d      	ldr	r2, [pc, #116]	@ (8008c24 <_free_r+0x90>)
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	b933      	cbnz	r3, 8008bc0 <_free_r+0x2c>
 8008bb2:	6063      	str	r3, [r4, #4]
 8008bb4:	6014      	str	r4, [r2, #0]
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bbc:	f7ff bc5c 	b.w	8008478 <__malloc_unlock>
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d908      	bls.n	8008bd6 <_free_r+0x42>
 8008bc4:	6820      	ldr	r0, [r4, #0]
 8008bc6:	1821      	adds	r1, r4, r0
 8008bc8:	428b      	cmp	r3, r1
 8008bca:	bf01      	itttt	eq
 8008bcc:	6819      	ldreq	r1, [r3, #0]
 8008bce:	685b      	ldreq	r3, [r3, #4]
 8008bd0:	1809      	addeq	r1, r1, r0
 8008bd2:	6021      	streq	r1, [r4, #0]
 8008bd4:	e7ed      	b.n	8008bb2 <_free_r+0x1e>
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	b10b      	cbz	r3, 8008be0 <_free_r+0x4c>
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	d9fa      	bls.n	8008bd6 <_free_r+0x42>
 8008be0:	6811      	ldr	r1, [r2, #0]
 8008be2:	1850      	adds	r0, r2, r1
 8008be4:	42a0      	cmp	r0, r4
 8008be6:	d10b      	bne.n	8008c00 <_free_r+0x6c>
 8008be8:	6820      	ldr	r0, [r4, #0]
 8008bea:	4401      	add	r1, r0
 8008bec:	1850      	adds	r0, r2, r1
 8008bee:	4283      	cmp	r3, r0
 8008bf0:	6011      	str	r1, [r2, #0]
 8008bf2:	d1e0      	bne.n	8008bb6 <_free_r+0x22>
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	6053      	str	r3, [r2, #4]
 8008bfa:	4408      	add	r0, r1
 8008bfc:	6010      	str	r0, [r2, #0]
 8008bfe:	e7da      	b.n	8008bb6 <_free_r+0x22>
 8008c00:	d902      	bls.n	8008c08 <_free_r+0x74>
 8008c02:	230c      	movs	r3, #12
 8008c04:	602b      	str	r3, [r5, #0]
 8008c06:	e7d6      	b.n	8008bb6 <_free_r+0x22>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	1821      	adds	r1, r4, r0
 8008c0c:	428b      	cmp	r3, r1
 8008c0e:	bf04      	itt	eq
 8008c10:	6819      	ldreq	r1, [r3, #0]
 8008c12:	685b      	ldreq	r3, [r3, #4]
 8008c14:	6063      	str	r3, [r4, #4]
 8008c16:	bf04      	itt	eq
 8008c18:	1809      	addeq	r1, r1, r0
 8008c1a:	6021      	streq	r1, [r4, #0]
 8008c1c:	6054      	str	r4, [r2, #4]
 8008c1e:	e7ca      	b.n	8008bb6 <_free_r+0x22>
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	20000b30 	.word	0x20000b30

08008c28 <__ssputs_r>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	688e      	ldr	r6, [r1, #8]
 8008c2e:	461f      	mov	r7, r3
 8008c30:	42be      	cmp	r6, r7
 8008c32:	680b      	ldr	r3, [r1, #0]
 8008c34:	4682      	mov	sl, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	4690      	mov	r8, r2
 8008c3a:	d82d      	bhi.n	8008c98 <__ssputs_r+0x70>
 8008c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c44:	d026      	beq.n	8008c94 <__ssputs_r+0x6c>
 8008c46:	6965      	ldr	r5, [r4, #20]
 8008c48:	6909      	ldr	r1, [r1, #16]
 8008c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c4e:	eba3 0901 	sub.w	r9, r3, r1
 8008c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c56:	1c7b      	adds	r3, r7, #1
 8008c58:	444b      	add	r3, r9
 8008c5a:	106d      	asrs	r5, r5, #1
 8008c5c:	429d      	cmp	r5, r3
 8008c5e:	bf38      	it	cc
 8008c60:	461d      	movcc	r5, r3
 8008c62:	0553      	lsls	r3, r2, #21
 8008c64:	d527      	bpl.n	8008cb6 <__ssputs_r+0x8e>
 8008c66:	4629      	mov	r1, r5
 8008c68:	f7ff fb80 	bl	800836c <_malloc_r>
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	b360      	cbz	r0, 8008cca <__ssputs_r+0xa2>
 8008c70:	6921      	ldr	r1, [r4, #16]
 8008c72:	464a      	mov	r2, r9
 8008c74:	f7ff ff7f 	bl	8008b76 <memcpy>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	6126      	str	r6, [r4, #16]
 8008c86:	6165      	str	r5, [r4, #20]
 8008c88:	444e      	add	r6, r9
 8008c8a:	eba5 0509 	sub.w	r5, r5, r9
 8008c8e:	6026      	str	r6, [r4, #0]
 8008c90:	60a5      	str	r5, [r4, #8]
 8008c92:	463e      	mov	r6, r7
 8008c94:	42be      	cmp	r6, r7
 8008c96:	d900      	bls.n	8008c9a <__ssputs_r+0x72>
 8008c98:	463e      	mov	r6, r7
 8008c9a:	6820      	ldr	r0, [r4, #0]
 8008c9c:	4632      	mov	r2, r6
 8008c9e:	4641      	mov	r1, r8
 8008ca0:	f000 fcf8 	bl	8009694 <memmove>
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	1b9b      	subs	r3, r3, r6
 8008ca8:	60a3      	str	r3, [r4, #8]
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	4433      	add	r3, r6
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	f000 fd28 	bl	800970c <_realloc_r>
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d1e0      	bne.n	8008c84 <__ssputs_r+0x5c>
 8008cc2:	6921      	ldr	r1, [r4, #16]
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	f7ff ff65 	bl	8008b94 <_free_r>
 8008cca:	230c      	movs	r3, #12
 8008ccc:	f8ca 3000 	str.w	r3, [sl]
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	e7e9      	b.n	8008cb2 <__ssputs_r+0x8a>
	...

08008ce0 <_svfiprintf_r>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	4698      	mov	r8, r3
 8008ce6:	898b      	ldrh	r3, [r1, #12]
 8008ce8:	061b      	lsls	r3, r3, #24
 8008cea:	b09d      	sub	sp, #116	@ 0x74
 8008cec:	4607      	mov	r7, r0
 8008cee:	460d      	mov	r5, r1
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	d510      	bpl.n	8008d16 <_svfiprintf_r+0x36>
 8008cf4:	690b      	ldr	r3, [r1, #16]
 8008cf6:	b973      	cbnz	r3, 8008d16 <_svfiprintf_r+0x36>
 8008cf8:	2140      	movs	r1, #64	@ 0x40
 8008cfa:	f7ff fb37 	bl	800836c <_malloc_r>
 8008cfe:	6028      	str	r0, [r5, #0]
 8008d00:	6128      	str	r0, [r5, #16]
 8008d02:	b930      	cbnz	r0, 8008d12 <_svfiprintf_r+0x32>
 8008d04:	230c      	movs	r3, #12
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0c:	b01d      	add	sp, #116	@ 0x74
 8008d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d12:	2340      	movs	r3, #64	@ 0x40
 8008d14:	616b      	str	r3, [r5, #20]
 8008d16:	2300      	movs	r3, #0
 8008d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1a:	2320      	movs	r3, #32
 8008d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d24:	2330      	movs	r3, #48	@ 0x30
 8008d26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ec4 <_svfiprintf_r+0x1e4>
 8008d2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d2e:	f04f 0901 	mov.w	r9, #1
 8008d32:	4623      	mov	r3, r4
 8008d34:	469a      	mov	sl, r3
 8008d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d3a:	b10a      	cbz	r2, 8008d40 <_svfiprintf_r+0x60>
 8008d3c:	2a25      	cmp	r2, #37	@ 0x25
 8008d3e:	d1f9      	bne.n	8008d34 <_svfiprintf_r+0x54>
 8008d40:	ebba 0b04 	subs.w	fp, sl, r4
 8008d44:	d00b      	beq.n	8008d5e <_svfiprintf_r+0x7e>
 8008d46:	465b      	mov	r3, fp
 8008d48:	4622      	mov	r2, r4
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f7ff ff6b 	bl	8008c28 <__ssputs_r>
 8008d52:	3001      	adds	r0, #1
 8008d54:	f000 80a7 	beq.w	8008ea6 <_svfiprintf_r+0x1c6>
 8008d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d5a:	445a      	add	r2, fp
 8008d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 809f 	beq.w	8008ea6 <_svfiprintf_r+0x1c6>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d72:	f10a 0a01 	add.w	sl, sl, #1
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d80:	4654      	mov	r4, sl
 8008d82:	2205      	movs	r2, #5
 8008d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d88:	484e      	ldr	r0, [pc, #312]	@ (8008ec4 <_svfiprintf_r+0x1e4>)
 8008d8a:	f7f7 fa29 	bl	80001e0 <memchr>
 8008d8e:	9a04      	ldr	r2, [sp, #16]
 8008d90:	b9d8      	cbnz	r0, 8008dca <_svfiprintf_r+0xea>
 8008d92:	06d0      	lsls	r0, r2, #27
 8008d94:	bf44      	itt	mi
 8008d96:	2320      	movmi	r3, #32
 8008d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d9c:	0711      	lsls	r1, r2, #28
 8008d9e:	bf44      	itt	mi
 8008da0:	232b      	movmi	r3, #43	@ 0x2b
 8008da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008da6:	f89a 3000 	ldrb.w	r3, [sl]
 8008daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dac:	d015      	beq.n	8008dda <_svfiprintf_r+0xfa>
 8008dae:	9a07      	ldr	r2, [sp, #28]
 8008db0:	4654      	mov	r4, sl
 8008db2:	2000      	movs	r0, #0
 8008db4:	f04f 0c0a 	mov.w	ip, #10
 8008db8:	4621      	mov	r1, r4
 8008dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dbe:	3b30      	subs	r3, #48	@ 0x30
 8008dc0:	2b09      	cmp	r3, #9
 8008dc2:	d94b      	bls.n	8008e5c <_svfiprintf_r+0x17c>
 8008dc4:	b1b0      	cbz	r0, 8008df4 <_svfiprintf_r+0x114>
 8008dc6:	9207      	str	r2, [sp, #28]
 8008dc8:	e014      	b.n	8008df4 <_svfiprintf_r+0x114>
 8008dca:	eba0 0308 	sub.w	r3, r0, r8
 8008dce:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	46a2      	mov	sl, r4
 8008dd8:	e7d2      	b.n	8008d80 <_svfiprintf_r+0xa0>
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	1d19      	adds	r1, r3, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	9103      	str	r1, [sp, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bfbb      	ittet	lt
 8008de6:	425b      	neglt	r3, r3
 8008de8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dec:	9307      	strge	r3, [sp, #28]
 8008dee:	9307      	strlt	r3, [sp, #28]
 8008df0:	bfb8      	it	lt
 8008df2:	9204      	strlt	r2, [sp, #16]
 8008df4:	7823      	ldrb	r3, [r4, #0]
 8008df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008df8:	d10a      	bne.n	8008e10 <_svfiprintf_r+0x130>
 8008dfa:	7863      	ldrb	r3, [r4, #1]
 8008dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dfe:	d132      	bne.n	8008e66 <_svfiprintf_r+0x186>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	1d1a      	adds	r2, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	9203      	str	r2, [sp, #12]
 8008e08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e0c:	3402      	adds	r4, #2
 8008e0e:	9305      	str	r3, [sp, #20]
 8008e10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ed4 <_svfiprintf_r+0x1f4>
 8008e14:	7821      	ldrb	r1, [r4, #0]
 8008e16:	2203      	movs	r2, #3
 8008e18:	4650      	mov	r0, sl
 8008e1a:	f7f7 f9e1 	bl	80001e0 <memchr>
 8008e1e:	b138      	cbz	r0, 8008e30 <_svfiprintf_r+0x150>
 8008e20:	9b04      	ldr	r3, [sp, #16]
 8008e22:	eba0 000a 	sub.w	r0, r0, sl
 8008e26:	2240      	movs	r2, #64	@ 0x40
 8008e28:	4082      	lsls	r2, r0
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	3401      	adds	r4, #1
 8008e2e:	9304      	str	r3, [sp, #16]
 8008e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e34:	4824      	ldr	r0, [pc, #144]	@ (8008ec8 <_svfiprintf_r+0x1e8>)
 8008e36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e3a:	2206      	movs	r2, #6
 8008e3c:	f7f7 f9d0 	bl	80001e0 <memchr>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d036      	beq.n	8008eb2 <_svfiprintf_r+0x1d2>
 8008e44:	4b21      	ldr	r3, [pc, #132]	@ (8008ecc <_svfiprintf_r+0x1ec>)
 8008e46:	bb1b      	cbnz	r3, 8008e90 <_svfiprintf_r+0x1b0>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	3307      	adds	r3, #7
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	3308      	adds	r3, #8
 8008e52:	9303      	str	r3, [sp, #12]
 8008e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e56:	4433      	add	r3, r6
 8008e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e5a:	e76a      	b.n	8008d32 <_svfiprintf_r+0x52>
 8008e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e60:	460c      	mov	r4, r1
 8008e62:	2001      	movs	r0, #1
 8008e64:	e7a8      	b.n	8008db8 <_svfiprintf_r+0xd8>
 8008e66:	2300      	movs	r3, #0
 8008e68:	3401      	adds	r4, #1
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	f04f 0c0a 	mov.w	ip, #10
 8008e72:	4620      	mov	r0, r4
 8008e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e78:	3a30      	subs	r2, #48	@ 0x30
 8008e7a:	2a09      	cmp	r2, #9
 8008e7c:	d903      	bls.n	8008e86 <_svfiprintf_r+0x1a6>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0c6      	beq.n	8008e10 <_svfiprintf_r+0x130>
 8008e82:	9105      	str	r1, [sp, #20]
 8008e84:	e7c4      	b.n	8008e10 <_svfiprintf_r+0x130>
 8008e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e7f0      	b.n	8008e72 <_svfiprintf_r+0x192>
 8008e90:	ab03      	add	r3, sp, #12
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	462a      	mov	r2, r5
 8008e96:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed0 <_svfiprintf_r+0x1f0>)
 8008e98:	a904      	add	r1, sp, #16
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	f3af 8000 	nop.w
 8008ea0:	1c42      	adds	r2, r0, #1
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	d1d6      	bne.n	8008e54 <_svfiprintf_r+0x174>
 8008ea6:	89ab      	ldrh	r3, [r5, #12]
 8008ea8:	065b      	lsls	r3, r3, #25
 8008eaa:	f53f af2d 	bmi.w	8008d08 <_svfiprintf_r+0x28>
 8008eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eb0:	e72c      	b.n	8008d0c <_svfiprintf_r+0x2c>
 8008eb2:	ab03      	add	r3, sp, #12
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4b05      	ldr	r3, [pc, #20]	@ (8008ed0 <_svfiprintf_r+0x1f0>)
 8008eba:	a904      	add	r1, sp, #16
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f000 f9bb 	bl	8009238 <_printf_i>
 8008ec2:	e7ed      	b.n	8008ea0 <_svfiprintf_r+0x1c0>
 8008ec4:	08009b6d 	.word	0x08009b6d
 8008ec8:	08009b77 	.word	0x08009b77
 8008ecc:	00000000 	.word	0x00000000
 8008ed0:	08008c29 	.word	0x08008c29
 8008ed4:	08009b73 	.word	0x08009b73

08008ed8 <__sfputc_r>:
 8008ed8:	6893      	ldr	r3, [r2, #8]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	b410      	push	{r4}
 8008ee0:	6093      	str	r3, [r2, #8]
 8008ee2:	da08      	bge.n	8008ef6 <__sfputc_r+0x1e>
 8008ee4:	6994      	ldr	r4, [r2, #24]
 8008ee6:	42a3      	cmp	r3, r4
 8008ee8:	db01      	blt.n	8008eee <__sfputc_r+0x16>
 8008eea:	290a      	cmp	r1, #10
 8008eec:	d103      	bne.n	8008ef6 <__sfputc_r+0x1e>
 8008eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ef2:	f7ff bce0 	b.w	80088b6 <__swbuf_r>
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	1c58      	adds	r0, r3, #1
 8008efa:	6010      	str	r0, [r2, #0]
 8008efc:	7019      	strb	r1, [r3, #0]
 8008efe:	4608      	mov	r0, r1
 8008f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <__sfputs_r>:
 8008f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f08:	4606      	mov	r6, r0
 8008f0a:	460f      	mov	r7, r1
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	18d5      	adds	r5, r2, r3
 8008f10:	42ac      	cmp	r4, r5
 8008f12:	d101      	bne.n	8008f18 <__sfputs_r+0x12>
 8008f14:	2000      	movs	r0, #0
 8008f16:	e007      	b.n	8008f28 <__sfputs_r+0x22>
 8008f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1c:	463a      	mov	r2, r7
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7ff ffda 	bl	8008ed8 <__sfputc_r>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d1f3      	bne.n	8008f10 <__sfputs_r+0xa>
 8008f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f2c <_vfiprintf_r>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	460d      	mov	r5, r1
 8008f32:	b09d      	sub	sp, #116	@ 0x74
 8008f34:	4614      	mov	r4, r2
 8008f36:	4698      	mov	r8, r3
 8008f38:	4606      	mov	r6, r0
 8008f3a:	b118      	cbz	r0, 8008f44 <_vfiprintf_r+0x18>
 8008f3c:	6a03      	ldr	r3, [r0, #32]
 8008f3e:	b90b      	cbnz	r3, 8008f44 <_vfiprintf_r+0x18>
 8008f40:	f7ff fbb0 	bl	80086a4 <__sinit>
 8008f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f46:	07d9      	lsls	r1, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_vfiprintf_r+0x2a>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	059a      	lsls	r2, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_vfiprintf_r+0x2a>
 8008f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f52:	f7ff fe06 	bl	8008b62 <__retarget_lock_acquire_recursive>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	071b      	lsls	r3, r3, #28
 8008f5a:	d501      	bpl.n	8008f60 <_vfiprintf_r+0x34>
 8008f5c:	692b      	ldr	r3, [r5, #16]
 8008f5e:	b99b      	cbnz	r3, 8008f88 <_vfiprintf_r+0x5c>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7ff fce6 	bl	8008934 <__swsetup_r>
 8008f68:	b170      	cbz	r0, 8008f88 <_vfiprintf_r+0x5c>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f6c:	07dc      	lsls	r4, r3, #31
 8008f6e:	d504      	bpl.n	8008f7a <_vfiprintf_r+0x4e>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b01d      	add	sp, #116	@ 0x74
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7a:	89ab      	ldrh	r3, [r5, #12]
 8008f7c:	0598      	lsls	r0, r3, #22
 8008f7e:	d4f7      	bmi.n	8008f70 <_vfiprintf_r+0x44>
 8008f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f82:	f7ff fdef 	bl	8008b64 <__retarget_lock_release_recursive>
 8008f86:	e7f3      	b.n	8008f70 <_vfiprintf_r+0x44>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f8c:	2320      	movs	r3, #32
 8008f8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f96:	2330      	movs	r3, #48	@ 0x30
 8008f98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009148 <_vfiprintf_r+0x21c>
 8008f9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fa0:	f04f 0901 	mov.w	r9, #1
 8008fa4:	4623      	mov	r3, r4
 8008fa6:	469a      	mov	sl, r3
 8008fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fac:	b10a      	cbz	r2, 8008fb2 <_vfiprintf_r+0x86>
 8008fae:	2a25      	cmp	r2, #37	@ 0x25
 8008fb0:	d1f9      	bne.n	8008fa6 <_vfiprintf_r+0x7a>
 8008fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8008fb6:	d00b      	beq.n	8008fd0 <_vfiprintf_r+0xa4>
 8008fb8:	465b      	mov	r3, fp
 8008fba:	4622      	mov	r2, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ffa1 	bl	8008f06 <__sfputs_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f000 80a7 	beq.w	8009118 <_vfiprintf_r+0x1ec>
 8008fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fcc:	445a      	add	r2, fp
 8008fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 809f 	beq.w	8009118 <_vfiprintf_r+0x1ec>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fe4:	f10a 0a01 	add.w	sl, sl, #1
 8008fe8:	9304      	str	r3, [sp, #16]
 8008fea:	9307      	str	r3, [sp, #28]
 8008fec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ff2:	4654      	mov	r4, sl
 8008ff4:	2205      	movs	r2, #5
 8008ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffa:	4853      	ldr	r0, [pc, #332]	@ (8009148 <_vfiprintf_r+0x21c>)
 8008ffc:	f7f7 f8f0 	bl	80001e0 <memchr>
 8009000:	9a04      	ldr	r2, [sp, #16]
 8009002:	b9d8      	cbnz	r0, 800903c <_vfiprintf_r+0x110>
 8009004:	06d1      	lsls	r1, r2, #27
 8009006:	bf44      	itt	mi
 8009008:	2320      	movmi	r3, #32
 800900a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800900e:	0713      	lsls	r3, r2, #28
 8009010:	bf44      	itt	mi
 8009012:	232b      	movmi	r3, #43	@ 0x2b
 8009014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009018:	f89a 3000 	ldrb.w	r3, [sl]
 800901c:	2b2a      	cmp	r3, #42	@ 0x2a
 800901e:	d015      	beq.n	800904c <_vfiprintf_r+0x120>
 8009020:	9a07      	ldr	r2, [sp, #28]
 8009022:	4654      	mov	r4, sl
 8009024:	2000      	movs	r0, #0
 8009026:	f04f 0c0a 	mov.w	ip, #10
 800902a:	4621      	mov	r1, r4
 800902c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009030:	3b30      	subs	r3, #48	@ 0x30
 8009032:	2b09      	cmp	r3, #9
 8009034:	d94b      	bls.n	80090ce <_vfiprintf_r+0x1a2>
 8009036:	b1b0      	cbz	r0, 8009066 <_vfiprintf_r+0x13a>
 8009038:	9207      	str	r2, [sp, #28]
 800903a:	e014      	b.n	8009066 <_vfiprintf_r+0x13a>
 800903c:	eba0 0308 	sub.w	r3, r0, r8
 8009040:	fa09 f303 	lsl.w	r3, r9, r3
 8009044:	4313      	orrs	r3, r2
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	46a2      	mov	sl, r4
 800904a:	e7d2      	b.n	8008ff2 <_vfiprintf_r+0xc6>
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	1d19      	adds	r1, r3, #4
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	9103      	str	r1, [sp, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	bfbb      	ittet	lt
 8009058:	425b      	neglt	r3, r3
 800905a:	f042 0202 	orrlt.w	r2, r2, #2
 800905e:	9307      	strge	r3, [sp, #28]
 8009060:	9307      	strlt	r3, [sp, #28]
 8009062:	bfb8      	it	lt
 8009064:	9204      	strlt	r2, [sp, #16]
 8009066:	7823      	ldrb	r3, [r4, #0]
 8009068:	2b2e      	cmp	r3, #46	@ 0x2e
 800906a:	d10a      	bne.n	8009082 <_vfiprintf_r+0x156>
 800906c:	7863      	ldrb	r3, [r4, #1]
 800906e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009070:	d132      	bne.n	80090d8 <_vfiprintf_r+0x1ac>
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	1d1a      	adds	r2, r3, #4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	9203      	str	r2, [sp, #12]
 800907a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800907e:	3402      	adds	r4, #2
 8009080:	9305      	str	r3, [sp, #20]
 8009082:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009158 <_vfiprintf_r+0x22c>
 8009086:	7821      	ldrb	r1, [r4, #0]
 8009088:	2203      	movs	r2, #3
 800908a:	4650      	mov	r0, sl
 800908c:	f7f7 f8a8 	bl	80001e0 <memchr>
 8009090:	b138      	cbz	r0, 80090a2 <_vfiprintf_r+0x176>
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	eba0 000a 	sub.w	r0, r0, sl
 8009098:	2240      	movs	r2, #64	@ 0x40
 800909a:	4082      	lsls	r2, r0
 800909c:	4313      	orrs	r3, r2
 800909e:	3401      	adds	r4, #1
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a6:	4829      	ldr	r0, [pc, #164]	@ (800914c <_vfiprintf_r+0x220>)
 80090a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090ac:	2206      	movs	r2, #6
 80090ae:	f7f7 f897 	bl	80001e0 <memchr>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d03f      	beq.n	8009136 <_vfiprintf_r+0x20a>
 80090b6:	4b26      	ldr	r3, [pc, #152]	@ (8009150 <_vfiprintf_r+0x224>)
 80090b8:	bb1b      	cbnz	r3, 8009102 <_vfiprintf_r+0x1d6>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	3307      	adds	r3, #7
 80090be:	f023 0307 	bic.w	r3, r3, #7
 80090c2:	3308      	adds	r3, #8
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c8:	443b      	add	r3, r7
 80090ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80090cc:	e76a      	b.n	8008fa4 <_vfiprintf_r+0x78>
 80090ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80090d2:	460c      	mov	r4, r1
 80090d4:	2001      	movs	r0, #1
 80090d6:	e7a8      	b.n	800902a <_vfiprintf_r+0xfe>
 80090d8:	2300      	movs	r3, #0
 80090da:	3401      	adds	r4, #1
 80090dc:	9305      	str	r3, [sp, #20]
 80090de:	4619      	mov	r1, r3
 80090e0:	f04f 0c0a 	mov.w	ip, #10
 80090e4:	4620      	mov	r0, r4
 80090e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ea:	3a30      	subs	r2, #48	@ 0x30
 80090ec:	2a09      	cmp	r2, #9
 80090ee:	d903      	bls.n	80090f8 <_vfiprintf_r+0x1cc>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0c6      	beq.n	8009082 <_vfiprintf_r+0x156>
 80090f4:	9105      	str	r1, [sp, #20]
 80090f6:	e7c4      	b.n	8009082 <_vfiprintf_r+0x156>
 80090f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80090fc:	4604      	mov	r4, r0
 80090fe:	2301      	movs	r3, #1
 8009100:	e7f0      	b.n	80090e4 <_vfiprintf_r+0x1b8>
 8009102:	ab03      	add	r3, sp, #12
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	462a      	mov	r2, r5
 8009108:	4b12      	ldr	r3, [pc, #72]	@ (8009154 <_vfiprintf_r+0x228>)
 800910a:	a904      	add	r1, sp, #16
 800910c:	4630      	mov	r0, r6
 800910e:	f3af 8000 	nop.w
 8009112:	4607      	mov	r7, r0
 8009114:	1c78      	adds	r0, r7, #1
 8009116:	d1d6      	bne.n	80090c6 <_vfiprintf_r+0x19a>
 8009118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800911a:	07d9      	lsls	r1, r3, #31
 800911c:	d405      	bmi.n	800912a <_vfiprintf_r+0x1fe>
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	059a      	lsls	r2, r3, #22
 8009122:	d402      	bmi.n	800912a <_vfiprintf_r+0x1fe>
 8009124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009126:	f7ff fd1d 	bl	8008b64 <__retarget_lock_release_recursive>
 800912a:	89ab      	ldrh	r3, [r5, #12]
 800912c:	065b      	lsls	r3, r3, #25
 800912e:	f53f af1f 	bmi.w	8008f70 <_vfiprintf_r+0x44>
 8009132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009134:	e71e      	b.n	8008f74 <_vfiprintf_r+0x48>
 8009136:	ab03      	add	r3, sp, #12
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	462a      	mov	r2, r5
 800913c:	4b05      	ldr	r3, [pc, #20]	@ (8009154 <_vfiprintf_r+0x228>)
 800913e:	a904      	add	r1, sp, #16
 8009140:	4630      	mov	r0, r6
 8009142:	f000 f879 	bl	8009238 <_printf_i>
 8009146:	e7e4      	b.n	8009112 <_vfiprintf_r+0x1e6>
 8009148:	08009b6d 	.word	0x08009b6d
 800914c:	08009b77 	.word	0x08009b77
 8009150:	00000000 	.word	0x00000000
 8009154:	08008f07 	.word	0x08008f07
 8009158:	08009b73 	.word	0x08009b73

0800915c <_printf_common>:
 800915c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009160:	4616      	mov	r6, r2
 8009162:	4698      	mov	r8, r3
 8009164:	688a      	ldr	r2, [r1, #8]
 8009166:	690b      	ldr	r3, [r1, #16]
 8009168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800916c:	4293      	cmp	r3, r2
 800916e:	bfb8      	it	lt
 8009170:	4613      	movlt	r3, r2
 8009172:	6033      	str	r3, [r6, #0]
 8009174:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009178:	4607      	mov	r7, r0
 800917a:	460c      	mov	r4, r1
 800917c:	b10a      	cbz	r2, 8009182 <_printf_common+0x26>
 800917e:	3301      	adds	r3, #1
 8009180:	6033      	str	r3, [r6, #0]
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	0699      	lsls	r1, r3, #26
 8009186:	bf42      	ittt	mi
 8009188:	6833      	ldrmi	r3, [r6, #0]
 800918a:	3302      	addmi	r3, #2
 800918c:	6033      	strmi	r3, [r6, #0]
 800918e:	6825      	ldr	r5, [r4, #0]
 8009190:	f015 0506 	ands.w	r5, r5, #6
 8009194:	d106      	bne.n	80091a4 <_printf_common+0x48>
 8009196:	f104 0a19 	add.w	sl, r4, #25
 800919a:	68e3      	ldr	r3, [r4, #12]
 800919c:	6832      	ldr	r2, [r6, #0]
 800919e:	1a9b      	subs	r3, r3, r2
 80091a0:	42ab      	cmp	r3, r5
 80091a2:	dc26      	bgt.n	80091f2 <_printf_common+0x96>
 80091a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091a8:	6822      	ldr	r2, [r4, #0]
 80091aa:	3b00      	subs	r3, #0
 80091ac:	bf18      	it	ne
 80091ae:	2301      	movne	r3, #1
 80091b0:	0692      	lsls	r2, r2, #26
 80091b2:	d42b      	bmi.n	800920c <_printf_common+0xb0>
 80091b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091b8:	4641      	mov	r1, r8
 80091ba:	4638      	mov	r0, r7
 80091bc:	47c8      	blx	r9
 80091be:	3001      	adds	r0, #1
 80091c0:	d01e      	beq.n	8009200 <_printf_common+0xa4>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	6922      	ldr	r2, [r4, #16]
 80091c6:	f003 0306 	and.w	r3, r3, #6
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	bf02      	ittt	eq
 80091ce:	68e5      	ldreq	r5, [r4, #12]
 80091d0:	6833      	ldreq	r3, [r6, #0]
 80091d2:	1aed      	subeq	r5, r5, r3
 80091d4:	68a3      	ldr	r3, [r4, #8]
 80091d6:	bf0c      	ite	eq
 80091d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091dc:	2500      	movne	r5, #0
 80091de:	4293      	cmp	r3, r2
 80091e0:	bfc4      	itt	gt
 80091e2:	1a9b      	subgt	r3, r3, r2
 80091e4:	18ed      	addgt	r5, r5, r3
 80091e6:	2600      	movs	r6, #0
 80091e8:	341a      	adds	r4, #26
 80091ea:	42b5      	cmp	r5, r6
 80091ec:	d11a      	bne.n	8009224 <_printf_common+0xc8>
 80091ee:	2000      	movs	r0, #0
 80091f0:	e008      	b.n	8009204 <_printf_common+0xa8>
 80091f2:	2301      	movs	r3, #1
 80091f4:	4652      	mov	r2, sl
 80091f6:	4641      	mov	r1, r8
 80091f8:	4638      	mov	r0, r7
 80091fa:	47c8      	blx	r9
 80091fc:	3001      	adds	r0, #1
 80091fe:	d103      	bne.n	8009208 <_printf_common+0xac>
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009208:	3501      	adds	r5, #1
 800920a:	e7c6      	b.n	800919a <_printf_common+0x3e>
 800920c:	18e1      	adds	r1, r4, r3
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	2030      	movs	r0, #48	@ 0x30
 8009212:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009216:	4422      	add	r2, r4
 8009218:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800921c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009220:	3302      	adds	r3, #2
 8009222:	e7c7      	b.n	80091b4 <_printf_common+0x58>
 8009224:	2301      	movs	r3, #1
 8009226:	4622      	mov	r2, r4
 8009228:	4641      	mov	r1, r8
 800922a:	4638      	mov	r0, r7
 800922c:	47c8      	blx	r9
 800922e:	3001      	adds	r0, #1
 8009230:	d0e6      	beq.n	8009200 <_printf_common+0xa4>
 8009232:	3601      	adds	r6, #1
 8009234:	e7d9      	b.n	80091ea <_printf_common+0x8e>
	...

08009238 <_printf_i>:
 8009238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800923c:	7e0f      	ldrb	r7, [r1, #24]
 800923e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009240:	2f78      	cmp	r7, #120	@ 0x78
 8009242:	4691      	mov	r9, r2
 8009244:	4680      	mov	r8, r0
 8009246:	460c      	mov	r4, r1
 8009248:	469a      	mov	sl, r3
 800924a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800924e:	d807      	bhi.n	8009260 <_printf_i+0x28>
 8009250:	2f62      	cmp	r7, #98	@ 0x62
 8009252:	d80a      	bhi.n	800926a <_printf_i+0x32>
 8009254:	2f00      	cmp	r7, #0
 8009256:	f000 80d2 	beq.w	80093fe <_printf_i+0x1c6>
 800925a:	2f58      	cmp	r7, #88	@ 0x58
 800925c:	f000 80b9 	beq.w	80093d2 <_printf_i+0x19a>
 8009260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009264:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009268:	e03a      	b.n	80092e0 <_printf_i+0xa8>
 800926a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800926e:	2b15      	cmp	r3, #21
 8009270:	d8f6      	bhi.n	8009260 <_printf_i+0x28>
 8009272:	a101      	add	r1, pc, #4	@ (adr r1, 8009278 <_printf_i+0x40>)
 8009274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009278:	080092d1 	.word	0x080092d1
 800927c:	080092e5 	.word	0x080092e5
 8009280:	08009261 	.word	0x08009261
 8009284:	08009261 	.word	0x08009261
 8009288:	08009261 	.word	0x08009261
 800928c:	08009261 	.word	0x08009261
 8009290:	080092e5 	.word	0x080092e5
 8009294:	08009261 	.word	0x08009261
 8009298:	08009261 	.word	0x08009261
 800929c:	08009261 	.word	0x08009261
 80092a0:	08009261 	.word	0x08009261
 80092a4:	080093e5 	.word	0x080093e5
 80092a8:	0800930f 	.word	0x0800930f
 80092ac:	0800939f 	.word	0x0800939f
 80092b0:	08009261 	.word	0x08009261
 80092b4:	08009261 	.word	0x08009261
 80092b8:	08009407 	.word	0x08009407
 80092bc:	08009261 	.word	0x08009261
 80092c0:	0800930f 	.word	0x0800930f
 80092c4:	08009261 	.word	0x08009261
 80092c8:	08009261 	.word	0x08009261
 80092cc:	080093a7 	.word	0x080093a7
 80092d0:	6833      	ldr	r3, [r6, #0]
 80092d2:	1d1a      	adds	r2, r3, #4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6032      	str	r2, [r6, #0]
 80092d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092e0:	2301      	movs	r3, #1
 80092e2:	e09d      	b.n	8009420 <_printf_i+0x1e8>
 80092e4:	6833      	ldr	r3, [r6, #0]
 80092e6:	6820      	ldr	r0, [r4, #0]
 80092e8:	1d19      	adds	r1, r3, #4
 80092ea:	6031      	str	r1, [r6, #0]
 80092ec:	0606      	lsls	r6, r0, #24
 80092ee:	d501      	bpl.n	80092f4 <_printf_i+0xbc>
 80092f0:	681d      	ldr	r5, [r3, #0]
 80092f2:	e003      	b.n	80092fc <_printf_i+0xc4>
 80092f4:	0645      	lsls	r5, r0, #25
 80092f6:	d5fb      	bpl.n	80092f0 <_printf_i+0xb8>
 80092f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	da03      	bge.n	8009308 <_printf_i+0xd0>
 8009300:	232d      	movs	r3, #45	@ 0x2d
 8009302:	426d      	negs	r5, r5
 8009304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009308:	4859      	ldr	r0, [pc, #356]	@ (8009470 <_printf_i+0x238>)
 800930a:	230a      	movs	r3, #10
 800930c:	e011      	b.n	8009332 <_printf_i+0xfa>
 800930e:	6821      	ldr	r1, [r4, #0]
 8009310:	6833      	ldr	r3, [r6, #0]
 8009312:	0608      	lsls	r0, r1, #24
 8009314:	f853 5b04 	ldr.w	r5, [r3], #4
 8009318:	d402      	bmi.n	8009320 <_printf_i+0xe8>
 800931a:	0649      	lsls	r1, r1, #25
 800931c:	bf48      	it	mi
 800931e:	b2ad      	uxthmi	r5, r5
 8009320:	2f6f      	cmp	r7, #111	@ 0x6f
 8009322:	4853      	ldr	r0, [pc, #332]	@ (8009470 <_printf_i+0x238>)
 8009324:	6033      	str	r3, [r6, #0]
 8009326:	bf14      	ite	ne
 8009328:	230a      	movne	r3, #10
 800932a:	2308      	moveq	r3, #8
 800932c:	2100      	movs	r1, #0
 800932e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009332:	6866      	ldr	r6, [r4, #4]
 8009334:	60a6      	str	r6, [r4, #8]
 8009336:	2e00      	cmp	r6, #0
 8009338:	bfa2      	ittt	ge
 800933a:	6821      	ldrge	r1, [r4, #0]
 800933c:	f021 0104 	bicge.w	r1, r1, #4
 8009340:	6021      	strge	r1, [r4, #0]
 8009342:	b90d      	cbnz	r5, 8009348 <_printf_i+0x110>
 8009344:	2e00      	cmp	r6, #0
 8009346:	d04b      	beq.n	80093e0 <_printf_i+0x1a8>
 8009348:	4616      	mov	r6, r2
 800934a:	fbb5 f1f3 	udiv	r1, r5, r3
 800934e:	fb03 5711 	mls	r7, r3, r1, r5
 8009352:	5dc7      	ldrb	r7, [r0, r7]
 8009354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009358:	462f      	mov	r7, r5
 800935a:	42bb      	cmp	r3, r7
 800935c:	460d      	mov	r5, r1
 800935e:	d9f4      	bls.n	800934a <_printf_i+0x112>
 8009360:	2b08      	cmp	r3, #8
 8009362:	d10b      	bne.n	800937c <_printf_i+0x144>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	07df      	lsls	r7, r3, #31
 8009368:	d508      	bpl.n	800937c <_printf_i+0x144>
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	6861      	ldr	r1, [r4, #4]
 800936e:	4299      	cmp	r1, r3
 8009370:	bfde      	ittt	le
 8009372:	2330      	movle	r3, #48	@ 0x30
 8009374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800937c:	1b92      	subs	r2, r2, r6
 800937e:	6122      	str	r2, [r4, #16]
 8009380:	f8cd a000 	str.w	sl, [sp]
 8009384:	464b      	mov	r3, r9
 8009386:	aa03      	add	r2, sp, #12
 8009388:	4621      	mov	r1, r4
 800938a:	4640      	mov	r0, r8
 800938c:	f7ff fee6 	bl	800915c <_printf_common>
 8009390:	3001      	adds	r0, #1
 8009392:	d14a      	bne.n	800942a <_printf_i+0x1f2>
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	b004      	add	sp, #16
 800939a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	f043 0320 	orr.w	r3, r3, #32
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	4833      	ldr	r0, [pc, #204]	@ (8009474 <_printf_i+0x23c>)
 80093a8:	2778      	movs	r7, #120	@ 0x78
 80093aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	6831      	ldr	r1, [r6, #0]
 80093b2:	061f      	lsls	r7, r3, #24
 80093b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80093b8:	d402      	bmi.n	80093c0 <_printf_i+0x188>
 80093ba:	065f      	lsls	r7, r3, #25
 80093bc:	bf48      	it	mi
 80093be:	b2ad      	uxthmi	r5, r5
 80093c0:	6031      	str	r1, [r6, #0]
 80093c2:	07d9      	lsls	r1, r3, #31
 80093c4:	bf44      	itt	mi
 80093c6:	f043 0320 	orrmi.w	r3, r3, #32
 80093ca:	6023      	strmi	r3, [r4, #0]
 80093cc:	b11d      	cbz	r5, 80093d6 <_printf_i+0x19e>
 80093ce:	2310      	movs	r3, #16
 80093d0:	e7ac      	b.n	800932c <_printf_i+0xf4>
 80093d2:	4827      	ldr	r0, [pc, #156]	@ (8009470 <_printf_i+0x238>)
 80093d4:	e7e9      	b.n	80093aa <_printf_i+0x172>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	f023 0320 	bic.w	r3, r3, #32
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	e7f6      	b.n	80093ce <_printf_i+0x196>
 80093e0:	4616      	mov	r6, r2
 80093e2:	e7bd      	b.n	8009360 <_printf_i+0x128>
 80093e4:	6833      	ldr	r3, [r6, #0]
 80093e6:	6825      	ldr	r5, [r4, #0]
 80093e8:	6961      	ldr	r1, [r4, #20]
 80093ea:	1d18      	adds	r0, r3, #4
 80093ec:	6030      	str	r0, [r6, #0]
 80093ee:	062e      	lsls	r6, r5, #24
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	d501      	bpl.n	80093f8 <_printf_i+0x1c0>
 80093f4:	6019      	str	r1, [r3, #0]
 80093f6:	e002      	b.n	80093fe <_printf_i+0x1c6>
 80093f8:	0668      	lsls	r0, r5, #25
 80093fa:	d5fb      	bpl.n	80093f4 <_printf_i+0x1bc>
 80093fc:	8019      	strh	r1, [r3, #0]
 80093fe:	2300      	movs	r3, #0
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	4616      	mov	r6, r2
 8009404:	e7bc      	b.n	8009380 <_printf_i+0x148>
 8009406:	6833      	ldr	r3, [r6, #0]
 8009408:	1d1a      	adds	r2, r3, #4
 800940a:	6032      	str	r2, [r6, #0]
 800940c:	681e      	ldr	r6, [r3, #0]
 800940e:	6862      	ldr	r2, [r4, #4]
 8009410:	2100      	movs	r1, #0
 8009412:	4630      	mov	r0, r6
 8009414:	f7f6 fee4 	bl	80001e0 <memchr>
 8009418:	b108      	cbz	r0, 800941e <_printf_i+0x1e6>
 800941a:	1b80      	subs	r0, r0, r6
 800941c:	6060      	str	r0, [r4, #4]
 800941e:	6863      	ldr	r3, [r4, #4]
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	2300      	movs	r3, #0
 8009424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009428:	e7aa      	b.n	8009380 <_printf_i+0x148>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	4632      	mov	r2, r6
 800942e:	4649      	mov	r1, r9
 8009430:	4640      	mov	r0, r8
 8009432:	47d0      	blx	sl
 8009434:	3001      	adds	r0, #1
 8009436:	d0ad      	beq.n	8009394 <_printf_i+0x15c>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	079b      	lsls	r3, r3, #30
 800943c:	d413      	bmi.n	8009466 <_printf_i+0x22e>
 800943e:	68e0      	ldr	r0, [r4, #12]
 8009440:	9b03      	ldr	r3, [sp, #12]
 8009442:	4298      	cmp	r0, r3
 8009444:	bfb8      	it	lt
 8009446:	4618      	movlt	r0, r3
 8009448:	e7a6      	b.n	8009398 <_printf_i+0x160>
 800944a:	2301      	movs	r3, #1
 800944c:	4632      	mov	r2, r6
 800944e:	4649      	mov	r1, r9
 8009450:	4640      	mov	r0, r8
 8009452:	47d0      	blx	sl
 8009454:	3001      	adds	r0, #1
 8009456:	d09d      	beq.n	8009394 <_printf_i+0x15c>
 8009458:	3501      	adds	r5, #1
 800945a:	68e3      	ldr	r3, [r4, #12]
 800945c:	9903      	ldr	r1, [sp, #12]
 800945e:	1a5b      	subs	r3, r3, r1
 8009460:	42ab      	cmp	r3, r5
 8009462:	dcf2      	bgt.n	800944a <_printf_i+0x212>
 8009464:	e7eb      	b.n	800943e <_printf_i+0x206>
 8009466:	2500      	movs	r5, #0
 8009468:	f104 0619 	add.w	r6, r4, #25
 800946c:	e7f5      	b.n	800945a <_printf_i+0x222>
 800946e:	bf00      	nop
 8009470:	08009b7e 	.word	0x08009b7e
 8009474:	08009b8f 	.word	0x08009b8f

08009478 <__sflush_r>:
 8009478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	0716      	lsls	r6, r2, #28
 8009482:	4605      	mov	r5, r0
 8009484:	460c      	mov	r4, r1
 8009486:	d454      	bmi.n	8009532 <__sflush_r+0xba>
 8009488:	684b      	ldr	r3, [r1, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	dc02      	bgt.n	8009494 <__sflush_r+0x1c>
 800948e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	dd48      	ble.n	8009526 <__sflush_r+0xae>
 8009494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009496:	2e00      	cmp	r6, #0
 8009498:	d045      	beq.n	8009526 <__sflush_r+0xae>
 800949a:	2300      	movs	r3, #0
 800949c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094a0:	682f      	ldr	r7, [r5, #0]
 80094a2:	6a21      	ldr	r1, [r4, #32]
 80094a4:	602b      	str	r3, [r5, #0]
 80094a6:	d030      	beq.n	800950a <__sflush_r+0x92>
 80094a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	0759      	lsls	r1, r3, #29
 80094ae:	d505      	bpl.n	80094bc <__sflush_r+0x44>
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	1ad2      	subs	r2, r2, r3
 80094b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094b6:	b10b      	cbz	r3, 80094bc <__sflush_r+0x44>
 80094b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094ba:	1ad2      	subs	r2, r2, r3
 80094bc:	2300      	movs	r3, #0
 80094be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094c0:	6a21      	ldr	r1, [r4, #32]
 80094c2:	4628      	mov	r0, r5
 80094c4:	47b0      	blx	r6
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	d106      	bne.n	80094da <__sflush_r+0x62>
 80094cc:	6829      	ldr	r1, [r5, #0]
 80094ce:	291d      	cmp	r1, #29
 80094d0:	d82b      	bhi.n	800952a <__sflush_r+0xb2>
 80094d2:	4a2a      	ldr	r2, [pc, #168]	@ (800957c <__sflush_r+0x104>)
 80094d4:	410a      	asrs	r2, r1
 80094d6:	07d6      	lsls	r6, r2, #31
 80094d8:	d427      	bmi.n	800952a <__sflush_r+0xb2>
 80094da:	2200      	movs	r2, #0
 80094dc:	6062      	str	r2, [r4, #4]
 80094de:	04d9      	lsls	r1, r3, #19
 80094e0:	6922      	ldr	r2, [r4, #16]
 80094e2:	6022      	str	r2, [r4, #0]
 80094e4:	d504      	bpl.n	80094f0 <__sflush_r+0x78>
 80094e6:	1c42      	adds	r2, r0, #1
 80094e8:	d101      	bne.n	80094ee <__sflush_r+0x76>
 80094ea:	682b      	ldr	r3, [r5, #0]
 80094ec:	b903      	cbnz	r3, 80094f0 <__sflush_r+0x78>
 80094ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80094f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094f2:	602f      	str	r7, [r5, #0]
 80094f4:	b1b9      	cbz	r1, 8009526 <__sflush_r+0xae>
 80094f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094fa:	4299      	cmp	r1, r3
 80094fc:	d002      	beq.n	8009504 <__sflush_r+0x8c>
 80094fe:	4628      	mov	r0, r5
 8009500:	f7ff fb48 	bl	8008b94 <_free_r>
 8009504:	2300      	movs	r3, #0
 8009506:	6363      	str	r3, [r4, #52]	@ 0x34
 8009508:	e00d      	b.n	8009526 <__sflush_r+0xae>
 800950a:	2301      	movs	r3, #1
 800950c:	4628      	mov	r0, r5
 800950e:	47b0      	blx	r6
 8009510:	4602      	mov	r2, r0
 8009512:	1c50      	adds	r0, r2, #1
 8009514:	d1c9      	bne.n	80094aa <__sflush_r+0x32>
 8009516:	682b      	ldr	r3, [r5, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0c6      	beq.n	80094aa <__sflush_r+0x32>
 800951c:	2b1d      	cmp	r3, #29
 800951e:	d001      	beq.n	8009524 <__sflush_r+0xac>
 8009520:	2b16      	cmp	r3, #22
 8009522:	d11e      	bne.n	8009562 <__sflush_r+0xea>
 8009524:	602f      	str	r7, [r5, #0]
 8009526:	2000      	movs	r0, #0
 8009528:	e022      	b.n	8009570 <__sflush_r+0xf8>
 800952a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800952e:	b21b      	sxth	r3, r3
 8009530:	e01b      	b.n	800956a <__sflush_r+0xf2>
 8009532:	690f      	ldr	r7, [r1, #16]
 8009534:	2f00      	cmp	r7, #0
 8009536:	d0f6      	beq.n	8009526 <__sflush_r+0xae>
 8009538:	0793      	lsls	r3, r2, #30
 800953a:	680e      	ldr	r6, [r1, #0]
 800953c:	bf08      	it	eq
 800953e:	694b      	ldreq	r3, [r1, #20]
 8009540:	600f      	str	r7, [r1, #0]
 8009542:	bf18      	it	ne
 8009544:	2300      	movne	r3, #0
 8009546:	eba6 0807 	sub.w	r8, r6, r7
 800954a:	608b      	str	r3, [r1, #8]
 800954c:	f1b8 0f00 	cmp.w	r8, #0
 8009550:	dde9      	ble.n	8009526 <__sflush_r+0xae>
 8009552:	6a21      	ldr	r1, [r4, #32]
 8009554:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009556:	4643      	mov	r3, r8
 8009558:	463a      	mov	r2, r7
 800955a:	4628      	mov	r0, r5
 800955c:	47b0      	blx	r6
 800955e:	2800      	cmp	r0, #0
 8009560:	dc08      	bgt.n	8009574 <__sflush_r+0xfc>
 8009562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956a:	81a3      	strh	r3, [r4, #12]
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009574:	4407      	add	r7, r0
 8009576:	eba8 0800 	sub.w	r8, r8, r0
 800957a:	e7e7      	b.n	800954c <__sflush_r+0xd4>
 800957c:	dfbffffe 	.word	0xdfbffffe

08009580 <_fflush_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	690b      	ldr	r3, [r1, #16]
 8009584:	4605      	mov	r5, r0
 8009586:	460c      	mov	r4, r1
 8009588:	b913      	cbnz	r3, 8009590 <_fflush_r+0x10>
 800958a:	2500      	movs	r5, #0
 800958c:	4628      	mov	r0, r5
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	b118      	cbz	r0, 800959a <_fflush_r+0x1a>
 8009592:	6a03      	ldr	r3, [r0, #32]
 8009594:	b90b      	cbnz	r3, 800959a <_fflush_r+0x1a>
 8009596:	f7ff f885 	bl	80086a4 <__sinit>
 800959a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d0f3      	beq.n	800958a <_fflush_r+0xa>
 80095a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095a4:	07d0      	lsls	r0, r2, #31
 80095a6:	d404      	bmi.n	80095b2 <_fflush_r+0x32>
 80095a8:	0599      	lsls	r1, r3, #22
 80095aa:	d402      	bmi.n	80095b2 <_fflush_r+0x32>
 80095ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095ae:	f7ff fad8 	bl	8008b62 <__retarget_lock_acquire_recursive>
 80095b2:	4628      	mov	r0, r5
 80095b4:	4621      	mov	r1, r4
 80095b6:	f7ff ff5f 	bl	8009478 <__sflush_r>
 80095ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095bc:	07da      	lsls	r2, r3, #31
 80095be:	4605      	mov	r5, r0
 80095c0:	d4e4      	bmi.n	800958c <_fflush_r+0xc>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	059b      	lsls	r3, r3, #22
 80095c6:	d4e1      	bmi.n	800958c <_fflush_r+0xc>
 80095c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095ca:	f7ff facb 	bl	8008b64 <__retarget_lock_release_recursive>
 80095ce:	e7dd      	b.n	800958c <_fflush_r+0xc>

080095d0 <__swhatbuf_r>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	460c      	mov	r4, r1
 80095d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d8:	2900      	cmp	r1, #0
 80095da:	b096      	sub	sp, #88	@ 0x58
 80095dc:	4615      	mov	r5, r2
 80095de:	461e      	mov	r6, r3
 80095e0:	da0d      	bge.n	80095fe <__swhatbuf_r+0x2e>
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095e8:	f04f 0100 	mov.w	r1, #0
 80095ec:	bf14      	ite	ne
 80095ee:	2340      	movne	r3, #64	@ 0x40
 80095f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095f4:	2000      	movs	r0, #0
 80095f6:	6031      	str	r1, [r6, #0]
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	b016      	add	sp, #88	@ 0x58
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
 80095fe:	466a      	mov	r2, sp
 8009600:	f000 f862 	bl	80096c8 <_fstat_r>
 8009604:	2800      	cmp	r0, #0
 8009606:	dbec      	blt.n	80095e2 <__swhatbuf_r+0x12>
 8009608:	9901      	ldr	r1, [sp, #4]
 800960a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800960e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009612:	4259      	negs	r1, r3
 8009614:	4159      	adcs	r1, r3
 8009616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800961a:	e7eb      	b.n	80095f4 <__swhatbuf_r+0x24>

0800961c <__smakebuf_r>:
 800961c:	898b      	ldrh	r3, [r1, #12]
 800961e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009620:	079d      	lsls	r5, r3, #30
 8009622:	4606      	mov	r6, r0
 8009624:	460c      	mov	r4, r1
 8009626:	d507      	bpl.n	8009638 <__smakebuf_r+0x1c>
 8009628:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	6123      	str	r3, [r4, #16]
 8009630:	2301      	movs	r3, #1
 8009632:	6163      	str	r3, [r4, #20]
 8009634:	b003      	add	sp, #12
 8009636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009638:	ab01      	add	r3, sp, #4
 800963a:	466a      	mov	r2, sp
 800963c:	f7ff ffc8 	bl	80095d0 <__swhatbuf_r>
 8009640:	9f00      	ldr	r7, [sp, #0]
 8009642:	4605      	mov	r5, r0
 8009644:	4639      	mov	r1, r7
 8009646:	4630      	mov	r0, r6
 8009648:	f7fe fe90 	bl	800836c <_malloc_r>
 800964c:	b948      	cbnz	r0, 8009662 <__smakebuf_r+0x46>
 800964e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009652:	059a      	lsls	r2, r3, #22
 8009654:	d4ee      	bmi.n	8009634 <__smakebuf_r+0x18>
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	f043 0302 	orr.w	r3, r3, #2
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	e7e2      	b.n	8009628 <__smakebuf_r+0xc>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	6020      	str	r0, [r4, #0]
 8009666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009672:	b15b      	cbz	r3, 800968c <__smakebuf_r+0x70>
 8009674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009678:	4630      	mov	r0, r6
 800967a:	f000 f837 	bl	80096ec <_isatty_r>
 800967e:	b128      	cbz	r0, 800968c <__smakebuf_r+0x70>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f023 0303 	bic.w	r3, r3, #3
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	431d      	orrs	r5, r3
 8009690:	81a5      	strh	r5, [r4, #12]
 8009692:	e7cf      	b.n	8009634 <__smakebuf_r+0x18>

08009694 <memmove>:
 8009694:	4288      	cmp	r0, r1
 8009696:	b510      	push	{r4, lr}
 8009698:	eb01 0402 	add.w	r4, r1, r2
 800969c:	d902      	bls.n	80096a4 <memmove+0x10>
 800969e:	4284      	cmp	r4, r0
 80096a0:	4623      	mov	r3, r4
 80096a2:	d807      	bhi.n	80096b4 <memmove+0x20>
 80096a4:	1e43      	subs	r3, r0, #1
 80096a6:	42a1      	cmp	r1, r4
 80096a8:	d008      	beq.n	80096bc <memmove+0x28>
 80096aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096b2:	e7f8      	b.n	80096a6 <memmove+0x12>
 80096b4:	4402      	add	r2, r0
 80096b6:	4601      	mov	r1, r0
 80096b8:	428a      	cmp	r2, r1
 80096ba:	d100      	bne.n	80096be <memmove+0x2a>
 80096bc:	bd10      	pop	{r4, pc}
 80096be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096c6:	e7f7      	b.n	80096b8 <memmove+0x24>

080096c8 <_fstat_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4d07      	ldr	r5, [pc, #28]	@ (80096e8 <_fstat_r+0x20>)
 80096cc:	2300      	movs	r3, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	4611      	mov	r1, r2
 80096d4:	602b      	str	r3, [r5, #0]
 80096d6:	f7f8 ffd4 	bl	8002682 <_fstat>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d102      	bne.n	80096e4 <_fstat_r+0x1c>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	b103      	cbz	r3, 80096e4 <_fstat_r+0x1c>
 80096e2:	6023      	str	r3, [r4, #0]
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	bf00      	nop
 80096e8:	20000c70 	.word	0x20000c70

080096ec <_isatty_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d06      	ldr	r5, [pc, #24]	@ (8009708 <_isatty_r+0x1c>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	f7f8 ffd3 	bl	80026a2 <_isatty>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d102      	bne.n	8009706 <_isatty_r+0x1a>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	b103      	cbz	r3, 8009706 <_isatty_r+0x1a>
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	20000c70 	.word	0x20000c70

0800970c <_realloc_r>:
 800970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009710:	4680      	mov	r8, r0
 8009712:	4615      	mov	r5, r2
 8009714:	460c      	mov	r4, r1
 8009716:	b921      	cbnz	r1, 8009722 <_realloc_r+0x16>
 8009718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800971c:	4611      	mov	r1, r2
 800971e:	f7fe be25 	b.w	800836c <_malloc_r>
 8009722:	b92a      	cbnz	r2, 8009730 <_realloc_r+0x24>
 8009724:	f7ff fa36 	bl	8008b94 <_free_r>
 8009728:	2400      	movs	r4, #0
 800972a:	4620      	mov	r0, r4
 800972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009730:	f000 f81a 	bl	8009768 <_malloc_usable_size_r>
 8009734:	4285      	cmp	r5, r0
 8009736:	4606      	mov	r6, r0
 8009738:	d802      	bhi.n	8009740 <_realloc_r+0x34>
 800973a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800973e:	d8f4      	bhi.n	800972a <_realloc_r+0x1e>
 8009740:	4629      	mov	r1, r5
 8009742:	4640      	mov	r0, r8
 8009744:	f7fe fe12 	bl	800836c <_malloc_r>
 8009748:	4607      	mov	r7, r0
 800974a:	2800      	cmp	r0, #0
 800974c:	d0ec      	beq.n	8009728 <_realloc_r+0x1c>
 800974e:	42b5      	cmp	r5, r6
 8009750:	462a      	mov	r2, r5
 8009752:	4621      	mov	r1, r4
 8009754:	bf28      	it	cs
 8009756:	4632      	movcs	r2, r6
 8009758:	f7ff fa0d 	bl	8008b76 <memcpy>
 800975c:	4621      	mov	r1, r4
 800975e:	4640      	mov	r0, r8
 8009760:	f7ff fa18 	bl	8008b94 <_free_r>
 8009764:	463c      	mov	r4, r7
 8009766:	e7e0      	b.n	800972a <_realloc_r+0x1e>

08009768 <_malloc_usable_size_r>:
 8009768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976c:	1f18      	subs	r0, r3, #4
 800976e:	2b00      	cmp	r3, #0
 8009770:	bfbc      	itt	lt
 8009772:	580b      	ldrlt	r3, [r1, r0]
 8009774:	18c0      	addlt	r0, r0, r3
 8009776:	4770      	bx	lr

08009778 <_init>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	bf00      	nop
 800977c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977e:	bc08      	pop	{r3}
 8009780:	469e      	mov	lr, r3
 8009782:	4770      	bx	lr

08009784 <_fini>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr
