
Telem_gsm_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008800  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08008990  08008990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c84  08008c84  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c84  08008c84  00009c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c8c  08008c8c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c8c  08008c8c  00009c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c90  08008c90  00009c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008c94  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a05c  2**0
                  CONTENTS
 10 .bss          00000bc4  2000005c  2000005c  0000a05c  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  20000c20  20000c20  0000a05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169df  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e9  00000000  00000000  00020a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00024258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb4  00000000  00000000  00025690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d2e  00000000  00000000  00026644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001adc8  00000000  00000000  0004b372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dca76  00000000  00000000  0006613a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142bb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c14  00000000  00000000  00142bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  00148808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008978 	.word	0x08008978

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08008978 	.word	0x08008978

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d70:	4a2f      	ldr	r2, [pc, #188]	@ (8000e30 <MX_ADC1_Init+0xd4>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d74:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d86:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d94:	4b25      	ldr	r3, [pc, #148]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d9a:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000d9c:	4a25      	ldr	r2, [pc, #148]	@ (8000e34 <MX_ADC1_Init+0xd8>)
 8000d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dba:	481c      	ldr	r0, [pc, #112]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000dbc:	f001 ff50 	bl	8002c60 <HAL_ADC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 ff01 	bl	8001bcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4814      	ldr	r0, [pc, #80]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000ddc:	f002 f902 	bl	8002fe4 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000de6:	f000 fef1 	bl	8001bcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dea:	2309      	movs	r3, #9
 8000dec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000df8:	f002 f8f4 	bl	8002fe4 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e02:	f000 fee3 	bl	8001bcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e06:	2310      	movs	r3, #16
 8000e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <MX_ADC1_Init+0xd0>)
 8000e14:	f002 f8e6 	bl	8002fe4 <HAL_ADC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e1e:	f000 fed5 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000078 	.word	0x20000078
 8000e30:	40012000 	.word	0x40012000
 8000e34:	0f000001 	.word	0x0f000001

08000e38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a2e      	ldr	r2, [pc, #184]	@ (8000f10 <HAL_ADC_MspInit+0xd8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d156      	bne.n	8000f08 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	4a2c      	ldr	r2, [pc, #176]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a25      	ldr	r2, [pc, #148]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e92:	2303      	movs	r3, #3
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e96:	2303      	movs	r3, #3
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481c      	ldr	r0, [pc, #112]	@ (8000f18 <HAL_ADC_MspInit+0xe0>)
 8000ea6:	f003 f85d 	bl	8003f64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000eac:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <HAL_ADC_MspInit+0xe8>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ec4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000eee:	f002 fc2b 	bl	8003748 <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ef8:	f000 fe68 	bl	8001bcc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000f00:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f02:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_ADC_MspInit+0xe4>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	@ 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40012000 	.word	0x40012000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	200000c0 	.word	0x200000c0
 8000f20:	40026410 	.word	0x40026410

08000f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_DMA_Init+0x5c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2038      	movs	r0, #56	@ 0x38
 8000f4c:	f002 fbc5 	bl	80036da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f50:	2038      	movs	r0, #56	@ 0x38
 8000f52:	f002 fbde 	bl	8003712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	203a      	movs	r0, #58	@ 0x3a
 8000f5c:	f002 fbbd 	bl	80036da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f60:	203a      	movs	r0, #58	@ 0x3a
 8000f62:	f002 fbd6 	bl	8003712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2046      	movs	r0, #70	@ 0x46
 8000f6c:	f002 fbb5 	bl	80036da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f70:	2046      	movs	r0, #70	@ 0x46
 8000f72:	f002 fbce 	bl	8003712 <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	@ 0x30
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	4b89      	ldr	r3, [pc, #548]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a88      	ldr	r2, [pc, #544]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b86      	ldr	r3, [pc, #536]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	4b82      	ldr	r3, [pc, #520]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a81      	ldr	r2, [pc, #516]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a7a      	ldr	r2, [pc, #488]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b78      	ldr	r3, [pc, #480]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b74      	ldr	r3, [pc, #464]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a73      	ldr	r2, [pc, #460]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b71      	ldr	r3, [pc, #452]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b6d      	ldr	r3, [pc, #436]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a6c      	ldr	r2, [pc, #432]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b6a      	ldr	r3, [pc, #424]	@ (80011c4 <MX_GPIO_Init+0x240>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <MX_GPIO_Init+0x240>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a65      	ldr	r2, [pc, #404]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_ON_OFF_Pin|W55_RSTN_Pin|LED_LCD_Pin|DC_LCD_Pin
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8001048:	485f      	ldr	r0, [pc, #380]	@ (80011c8 <MX_GPIO_Init+0x244>)
 800104a:	f003 f93f 	bl	80042cc <HAL_GPIO_WritePin>
                          |CS_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, W55_SCSN_Pin|USB_ON_OFF_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001054:	485d      	ldr	r0, [pc, #372]	@ (80011cc <MX_GPIO_Init+0x248>)
 8001056:	f003 f939 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_ETHERNET_GPIO_Port, ON_ETHERNET_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	485c      	ldr	r0, [pc, #368]	@ (80011d0 <MX_GPIO_Init+0x24c>)
 8001060:	f003 f934 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_UART_CPU_GPIO_Port, ON_UART_CPU_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800106a:	485a      	ldr	r0, [pc, #360]	@ (80011d4 <MX_GPIO_Init+0x250>)
 800106c:	f003 f92e 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT_0_Pin|OUT_1_Pin|WIFI_GPIO_0_Pin|LED_Pin
 8001070:	2200      	movs	r2, #0
 8001072:	f24e 3103 	movw	r1, #58115	@ 0xe303
 8001076:	4858      	ldr	r0, [pc, #352]	@ (80011d8 <MX_GPIO_Init+0x254>)
 8001078:	f003 f928 	bl	80042cc <HAL_GPIO_WritePin>
                          |RES_LCD_Pin|GATE_V_SIM_Pin|GATE_PWRKEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GATE_485_Pin|BLUETOOTH_RES_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8001082:	4855      	ldr	r0, [pc, #340]	@ (80011d8 <MX_GPIO_Init+0x254>)
 8001084:	f003 f922 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_ON_OFF_Pin LED_LCD_Pin DC_LCD_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = WIFI_ON_OFF_Pin|LED_LCD_Pin|DC_LCD_Pin|CS_LCD_Pin;
 8001088:	f44f 73e4 	mov.w	r3, #456	@ 0x1c8
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4849      	ldr	r0, [pc, #292]	@ (80011c8 <MX_GPIO_Init+0x244>)
 80010a2:	f002 ff5f 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : W55_SCSN_Pin */
  GPIO_InitStruct.Pin = W55_SCSN_Pin;
 80010a6:	2310      	movs	r3, #16
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010b2:	2301      	movs	r3, #1
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(W55_SCSN_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4843      	ldr	r0, [pc, #268]	@ (80011cc <MX_GPIO_Init+0x248>)
 80010be:	f002 ff51 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : W55_RSTN_Pin */
  GPIO_InitStruct.Pin = W55_RSTN_Pin;
 80010c2:	2310      	movs	r3, #16
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(W55_RSTN_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	483b      	ldr	r0, [pc, #236]	@ (80011c8 <MX_GPIO_Init+0x244>)
 80010da:	f002 ff43 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : W55_INTN_Pin USB_FAULT_Pin */
  GPIO_InitStruct.Pin = W55_INTN_Pin|USB_FAULT_Pin;
 80010de:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4619      	mov	r1, r3
 80010f2:	4835      	ldr	r0, [pc, #212]	@ (80011c8 <MX_GPIO_Init+0x244>)
 80010f4:	f002 ff36 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_ETHERNET_Pin */
  GPIO_InitStruct.Pin = ON_ETHERNET_Pin;
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ON_ETHERNET_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4830      	ldr	r0, [pc, #192]	@ (80011d0 <MX_GPIO_Init+0x24c>)
 8001110:	f002 ff28 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_UART_CPU_Pin */
  GPIO_InitStruct.Pin = ON_UART_CPU_Pin;
 8001114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ON_UART_CPU_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4829      	ldr	r0, [pc, #164]	@ (80011d4 <MX_GPIO_Init+0x250>)
 800112e:	f002 ff19 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_0_Pin OUT_1_Pin WIFI_GPIO_0_Pin LED_Pin
                           RES_LCD_Pin GATE_V_SIM_Pin GATE_PWRKEY_Pin BLUETOOTH_RES_Pin */
  GPIO_InitStruct.Pin = OUT_0_Pin|OUT_1_Pin|WIFI_GPIO_0_Pin|LED_Pin
 8001132:	f24e 330b 	movw	r3, #58123	@ 0xe30b
 8001136:	61fb      	str	r3, [r7, #28]
                          |RES_LCD_Pin|GATE_V_SIM_Pin|GATE_PWRKEY_Pin|BLUETOOTH_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4823      	ldr	r0, [pc, #140]	@ (80011d8 <MX_GPIO_Init+0x254>)
 800114c:	f002 ff0a 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : GATE_485_Pin */
  GPIO_InitStruct.Pin = GATE_485_Pin;
 8001150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001156:	2311      	movs	r3, #17
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GATE_485_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	481b      	ldr	r0, [pc, #108]	@ (80011d8 <MX_GPIO_Init+0x254>)
 800116a:	f002 fefb 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ON_OFF_Pin */
  GPIO_InitStruct.Pin = USB_ON_OFF_Pin;
 800116e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4811      	ldr	r0, [pc, #68]	@ (80011cc <MX_GPIO_Init+0x248>)
 8001188:	f002 feec 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOOR_Pin */
  GPIO_InitStruct.Pin = DOOR_Pin;
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DOOR_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <MX_GPIO_Init+0x254>)
 80011a0:	f002 fee0 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_STATUS_Pin GSM_NETLIGHT_Pin BLUETOOTH_LED_Pin */
  GPIO_InitStruct.Pin = GSM_STATUS_Pin|GSM_NETLIGHT_Pin|BLUETOOTH_LED_Pin;
 80011a4:	23d0      	movs	r3, #208	@ 0xd0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <MX_GPIO_Init+0x250>)
 80011b8:	f002 fed4 	bl	8003f64 <HAL_GPIO_Init>

}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	@ 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020c00 	.word	0x40020c00

080011dc <cbCommand2Receive>:
int resp2 = 0;
int flagCommand2 = 0;
char command2[15] = {0,};
char strStation[15] = {0,};

void cbCommand2Receive(const char *str){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	flagCommand2 = 1;
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <cbCommand2Receive+0x20>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
	strncpy( command2, str, 14);
 80011ea:	220e      	movs	r2, #14
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <cbCommand2Receive+0x24>)
 80011f0:	f006 ffc7 	bl	8008182 <strncpy>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000170 	.word	0x20000170
 8001200:	20000174 	.word	0x20000174

08001204 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
	if( huart->Instance == USART1 ){
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	@ (800127c <HAL_UARTEx_RxEventCallback+0x78>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d104      	bne.n	8001224 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&gsm, Size);
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	4619      	mov	r1, r3
 800121e:	4818      	ldr	r0, [pc, #96]	@ (8001280 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001220:	f006 fdc3 	bl	8007daa <ATC_IdleLineCallback>
	}

	if(huart->Instance == UART5){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a16      	ldr	r2, [pc, #88]	@ (8001284 <HAL_UARTEx_RxEventCallback+0x80>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d122      	bne.n	8001274 <HAL_UARTEx_RxEventCallback+0x70>
		  uint16_t i;
		  for( i = 0; i < Size; i++){
 800122e:	2300      	movs	r3, #0
 8001230:	81fb      	strh	r3, [r7, #14]
 8001232:	e008      	b.n	8001246 <HAL_UARTEx_RxEventCallback+0x42>
			  temp_buff_rs485[i] = rx_buff_rs485[i];
 8001234:	89fa      	ldrh	r2, [r7, #14]
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	4913      	ldr	r1, [pc, #76]	@ (8001288 <HAL_UARTEx_RxEventCallback+0x84>)
 800123a:	5c89      	ldrb	r1, [r1, r2]
 800123c:	4a13      	ldr	r2, [pc, #76]	@ (800128c <HAL_UARTEx_RxEventCallback+0x88>)
 800123e:	54d1      	strb	r1, [r2, r3]
		  for( i = 0; i < Size; i++){
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	3301      	adds	r3, #1
 8001244:	81fb      	strh	r3, [r7, #14]
 8001246:	89fa      	ldrh	r2, [r7, #14]
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	d3f2      	bcc.n	8001234 <HAL_UARTEx_RxEventCallback+0x30>
		  }
		  temp_buff_rs485[i] = '\n';
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	4a0e      	ldr	r2, [pc, #56]	@ (800128c <HAL_UARTEx_RxEventCallback+0x88>)
 8001252:	210a      	movs	r1, #10
 8001254:	54d1      	strb	r1, [r2, r3]
		  i++;
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	3301      	adds	r3, #1
 800125a:	81fb      	strh	r3, [r7, #14]
		  temp_buff_rs485[i] = '\0';
 800125c:	89fb      	ldrh	r3, [r7, #14]
 800125e:	4a0b      	ldr	r2, [pc, #44]	@ (800128c <HAL_UARTEx_RxEventCallback+0x88>)
 8001260:	2100      	movs	r1, #0
 8001262:	54d1      	strb	r1, [r2, r3]
		  flagReceiveFromStation = 1;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]

		  //delete
		  //printf( (char *)temp_buff_rs485 );

		  HAL_UARTEx_ReceiveToIdle_IT(&huart5, rx_buff_rs485, 50);
 800126a:	2232      	movs	r2, #50	@ 0x32
 800126c:	4906      	ldr	r1, [pc, #24]	@ (8001288 <HAL_UARTEx_RxEventCallback+0x84>)
 800126e:	4809      	ldr	r0, [pc, #36]	@ (8001294 <HAL_UARTEx_RxEventCallback+0x90>)
 8001270:	f004 fbea 	bl	8005a48 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40011000 	.word	0x40011000
 8001280:	2000012c 	.word	0x2000012c
 8001284:	40005000 	.word	0x40005000
 8001288:	200002a8 	.word	0x200002a8
 800128c:	200002dc 	.word	0x200002dc
 8001290:	2000030e 	.word	0x2000030e
 8001294:	20000410 	.word	0x20000410

08001298 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <HAL_ADC_ConvCpltCallback+0x24>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d102      	bne.n	80012b0 <HAL_ADC_ConvCpltCallback+0x18>
        flagAdcDmaComplit = 1;
 80012aa:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <HAL_ADC_ConvCpltCallback+0x28>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
    }
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40012000 	.word	0x40012000
 80012c0:	2000030f 	.word	0x2000030f
 80012c4:	00000000 	.word	0x00000000

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	@ 0x30
 80012cc:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f001 fc31 	bl	8002b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 fc11 	bl	8001af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f7ff fe55 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 80012da:	f7ff fe23 	bl	8000f24 <MX_DMA_Init>
  MX_TIM2_Init();
 80012de:	f001 f86f 	bl	80023c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80012e2:	f7ff fd3b 	bl	8000d5c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80012e6:	f001 f95d 	bl	80025a4 <MX_USART2_UART_Init>
  MX_UART5_Init();
 80012ea:	f001 f907 	bl	80024fc <MX_UART5_Init>
  MX_USART3_UART_Init();
 80012ee:	f001 f983 	bl	80025f8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80012f2:	f001 f92d 	bl	8002550 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80012f6:	f000 fc6f 	bl	8001bd8 <MX_SPI1_Init>
  MX_UART4_Init();
 80012fa:	f001 f8d5 	bl	80024a8 <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012fe:	f001 fb75 	bl	80029ec <MX_USB_OTG_FS_PCD_Init>
//-------------------------------------------------------------------------------------
  //  //Ethernet on!
  //  HAL_GPIO_WritePin(ON_ETHERNET_GPIO_Port, ON_ETHERNET_Pin, GPIO_PIN_RESET);

    //Bluetooth Reset!
    HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RES_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2108      	movs	r1, #8
 8001306:	4833      	ldr	r0, [pc, #204]	@ (80013d4 <main+0x10c>)
 8001308:	f002 ffe0 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800130c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001310:	f001 fc82 	bl	8002c18 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, BLUETOOTH_RES_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2108      	movs	r1, #8
 8001318:	482e      	ldr	r0, [pc, #184]	@ (80013d4 <main+0x10c>)
 800131a:	f002 ffd7 	bl	80042cc <HAL_GPIO_WritePin>

    //RS485 on!
    HAL_GPIO_WritePin(GPIOD, GATE_485_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001324:	482b      	ldr	r0, [pc, #172]	@ (80013d4 <main+0x10c>)
 8001326:	f002 ffd1 	bl	80042cc <HAL_GPIO_WritePin>
    //RS485 off!
    //HAL_GPIO_WritePin(GPIOD, GATE_485_Pin, GPIO_PIN_SET);

    //On Uart CPU
    HAL_GPIO_WritePin(ON_UART_CPU_GPIO_Port, ON_UART_CPU_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001330:	4829      	ldr	r0, [pc, #164]	@ (80013d8 <main+0x110>)
 8001332:	f002 ffcb 	bl	80042cc <HAL_GPIO_WritePin>

    //Sim800 PWRKEY = hight
    HAL_GPIO_WritePin(GPIOD, GATE_PWRKEY_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2102      	movs	r1, #2
 800133a:	4826      	ldr	r0, [pc, #152]	@ (80013d4 <main+0x10c>)
 800133c:	f002 ffc6 	bl	80042cc <HAL_GPIO_WritePin>
    //Sim800 PowerOn = On
    HAL_GPIO_WritePin(GPIOD, GATE_V_SIM_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2101      	movs	r1, #1
 8001344:	4823      	ldr	r0, [pc, #140]	@ (80013d4 <main+0x10c>)
 8001346:	f002 ffc1 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_Delay(700);
 800134a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800134e:	f001 fc63 	bl	8002c18 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GATE_PWRKEY_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	2102      	movs	r1, #2
 8001356:	481f      	ldr	r0, [pc, #124]	@ (80013d4 <main+0x10c>)
 8001358:	f002 ffb8 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_Delay(1200);
 800135c:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001360:	f001 fc5a 	bl	8002c18 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GATE_PWRKEY_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2102      	movs	r1, #2
 8001368:	481a      	ldr	r0, [pc, #104]	@ (80013d4 <main+0x10c>)
 800136a:	f002 ffaf 	bl	80042cc <HAL_GPIO_WritePin>
  ////  WIFI on
  //  HAL_GPIO_WritePin(GPIOC, WIFI_ON_OFF_Pin, GPIO_PIN_SET);
//-----------------------------------------------------------------------------------------


	HAL_UARTEx_ReceiveToIdle_IT(&huart5, rx_buff_rs485, 50);
 800136e:	2232      	movs	r2, #50	@ 0x32
 8001370:	491a      	ldr	r1, [pc, #104]	@ (80013dc <main+0x114>)
 8001372:	481b      	ldr	r0, [pc, #108]	@ (80013e0 <main+0x118>)
 8001374:	f004 fb68 	bl	8005a48 <HAL_UARTEx_ReceiveToIdle_IT>


    //gsm modem
    ATC_Init(&gsm, &huart1, 512, "GSM");
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <main+0x11c>)
 800137a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137e:	491a      	ldr	r1, [pc, #104]	@ (80013e8 <main+0x120>)
 8001380:	481a      	ldr	r0, [pc, #104]	@ (80013ec <main+0x124>)
 8001382:	f006 fb4d 	bl	8007a20 <ATC_Init>
    ATC_SetEvents(&gsm, events);
 8001386:	491a      	ldr	r1, [pc, #104]	@ (80013f0 <main+0x128>)
 8001388:	4818      	ldr	r0, [pc, #96]	@ (80013ec <main+0x124>)
 800138a:	f006 fbed 	bl	8007b68 <ATC_SetEvents>
    for(int i = 0; i < 1000; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	e01a      	b.n	80013ca <main+0x102>
    	HAL_Delay(100);
 8001394:	2064      	movs	r0, #100	@ 0x64
 8001396:	f001 fc3f 	bl	8002c18 <HAL_Delay>
    	resp = ATC_SendReceive(&gsm, "AT\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 800139a:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <main+0x12c>)
 800139c:	9303      	str	r3, [sp, #12]
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <main+0x130>)
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2302      	movs	r3, #2
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	2364      	movs	r3, #100	@ 0x64
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	2264      	movs	r2, #100	@ 0x64
 80013ae:	4913      	ldr	r1, [pc, #76]	@ (80013fc <main+0x134>)
 80013b0:	480e      	ldr	r0, [pc, #56]	@ (80013ec <main+0x124>)
 80013b2:	f006 fc1b 	bl	8007bec <ATC_SendReceive>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <main+0x138>)
 80013ba:	6013      	str	r3, [r2, #0]
    	if( resp == 1 ) break;
 80013bc:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <main+0x138>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d01f      	beq.n	8001404 <main+0x13c>
    for(int i = 0; i < 1000; i++) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3301      	adds	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013d0:	dbe0      	blt.n	8001394 <main+0xcc>
 80013d2:	e018      	b.n	8001406 <main+0x13e>
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40020400 	.word	0x40020400
 80013dc:	200002a8 	.word	0x200002a8
 80013e0:	20000410 	.word	0x20000410
 80013e4:	08008994 	.word	0x08008994
 80013e8:	20000458 	.word	0x20000458
 80013ec:	2000012c 	.word	0x2000012c
 80013f0:	08008b28 	.word	0x08008b28
 80013f4:	080089a0 	.word	0x080089a0
 80013f8:	080089ac 	.word	0x080089ac
 80013fc:	08008998 	.word	0x08008998
 8001400:	20000168 	.word	0x20000168
    	if( resp == 1 ) break;
 8001404:	bf00      	nop
    }
    HAL_Delay(20000);
 8001406:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800140a:	f001 fc05 	bl	8002c18 <HAL_Delay>
    resp = ATC_SendReceive(&gsm, "AT\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 800140e:	4ba3      	ldr	r3, [pc, #652]	@ (800169c <main+0x3d4>)
 8001410:	9303      	str	r3, [sp, #12]
 8001412:	4ba3      	ldr	r3, [pc, #652]	@ (80016a0 <main+0x3d8>)
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2302      	movs	r3, #2
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2364      	movs	r3, #100	@ 0x64
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	2264      	movs	r2, #100	@ 0x64
 8001422:	49a0      	ldr	r1, [pc, #640]	@ (80016a4 <main+0x3dc>)
 8001424:	48a0      	ldr	r0, [pc, #640]	@ (80016a8 <main+0x3e0>)
 8001426:	f006 fbe1 	bl	8007bec <ATC_SendReceive>
 800142a:	4603      	mov	r3, r0
 800142c:	4a9f      	ldr	r2, [pc, #636]	@ (80016ac <main+0x3e4>)
 800142e:	6013      	str	r3, [r2, #0]
    // echo off
    resp = ATC_SendReceive(&gsm, "ATE0\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001430:	4b9a      	ldr	r3, [pc, #616]	@ (800169c <main+0x3d4>)
 8001432:	9303      	str	r3, [sp, #12]
 8001434:	4b9a      	ldr	r3, [pc, #616]	@ (80016a0 <main+0x3d8>)
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	2302      	movs	r3, #2
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	2364      	movs	r3, #100	@ 0x64
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2300      	movs	r3, #0
 8001442:	2264      	movs	r2, #100	@ 0x64
 8001444:	499a      	ldr	r1, [pc, #616]	@ (80016b0 <main+0x3e8>)
 8001446:	4898      	ldr	r0, [pc, #608]	@ (80016a8 <main+0x3e0>)
 8001448:	f006 fbd0 	bl	8007bec <ATC_SendReceive>
 800144c:	4603      	mov	r3, r0
 800144e:	4a97      	ldr	r2, [pc, #604]	@ (80016ac <main+0x3e4>)
 8001450:	6013      	str	r3, [r2, #0]
    // off all calls
    resp = ATC_SendReceive(&gsm, "AT+GSMBUSY=1\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001452:	4b92      	ldr	r3, [pc, #584]	@ (800169c <main+0x3d4>)
 8001454:	9303      	str	r3, [sp, #12]
 8001456:	4b92      	ldr	r3, [pc, #584]	@ (80016a0 <main+0x3d8>)
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	2302      	movs	r3, #2
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	2264      	movs	r2, #100	@ 0x64
 8001466:	4993      	ldr	r1, [pc, #588]	@ (80016b4 <main+0x3ec>)
 8001468:	488f      	ldr	r0, [pc, #572]	@ (80016a8 <main+0x3e0>)
 800146a:	f006 fbbf 	bl	8007bec <ATC_SendReceive>
 800146e:	4603      	mov	r3, r0
 8001470:	4a8e      	ldr	r2, [pc, #568]	@ (80016ac <main+0x3e4>)
 8001472:	6013      	str	r3, [r2, #0]
    // sms not in TE
    resp = ATC_SendReceive(&gsm, "AT+CNMI=0,0\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001474:	4b89      	ldr	r3, [pc, #548]	@ (800169c <main+0x3d4>)
 8001476:	9303      	str	r3, [sp, #12]
 8001478:	4b89      	ldr	r3, [pc, #548]	@ (80016a0 <main+0x3d8>)
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	2302      	movs	r3, #2
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2364      	movs	r3, #100	@ 0x64
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2300      	movs	r3, #0
 8001486:	2264      	movs	r2, #100	@ 0x64
 8001488:	498b      	ldr	r1, [pc, #556]	@ (80016b8 <main+0x3f0>)
 800148a:	4887      	ldr	r0, [pc, #540]	@ (80016a8 <main+0x3e0>)
 800148c:	f006 fbae 	bl	8007bec <ATC_SendReceive>
 8001490:	4603      	mov	r3, r0
 8001492:	4a86      	ldr	r2, [pc, #536]	@ (80016ac <main+0x3e4>)
 8001494:	6013      	str	r3, [r2, #0]
    // sms text mode
    resp = ATC_SendReceive(&gsm, "AT+CMGF=1\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001496:	4b81      	ldr	r3, [pc, #516]	@ (800169c <main+0x3d4>)
 8001498:	9303      	str	r3, [sp, #12]
 800149a:	4b81      	ldr	r3, [pc, #516]	@ (80016a0 <main+0x3d8>)
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2302      	movs	r3, #2
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2364      	movs	r3, #100	@ 0x64
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	2264      	movs	r2, #100	@ 0x64
 80014aa:	4984      	ldr	r1, [pc, #528]	@ (80016bc <main+0x3f4>)
 80014ac:	487e      	ldr	r0, [pc, #504]	@ (80016a8 <main+0x3e0>)
 80014ae:	f006 fb9d 	bl	8007bec <ATC_SendReceive>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a7d      	ldr	r2, [pc, #500]	@ (80016ac <main+0x3e4>)
 80014b6:	6013      	str	r3, [r2, #0]
    // signal quality
    resp = ATC_SendReceive(&gsm, "AT+CSQ\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80014b8:	4b78      	ldr	r3, [pc, #480]	@ (800169c <main+0x3d4>)
 80014ba:	9303      	str	r3, [sp, #12]
 80014bc:	4b78      	ldr	r3, [pc, #480]	@ (80016a0 <main+0x3d8>)
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2302      	movs	r3, #2
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	2364      	movs	r3, #100	@ 0x64
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	2264      	movs	r2, #100	@ 0x64
 80014cc:	497c      	ldr	r1, [pc, #496]	@ (80016c0 <main+0x3f8>)
 80014ce:	4876      	ldr	r0, [pc, #472]	@ (80016a8 <main+0x3e0>)
 80014d0:	f006 fb8c 	bl	8007bec <ATC_SendReceive>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a75      	ldr	r2, [pc, #468]	@ (80016ac <main+0x3e4>)
 80014d8:	6013      	str	r3, [r2, #0]
    // phone activity status
    resp = ATC_SendReceive(&gsm, "AT+CPAS\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80014da:	4b70      	ldr	r3, [pc, #448]	@ (800169c <main+0x3d4>)
 80014dc:	9303      	str	r3, [sp, #12]
 80014de:	4b70      	ldr	r3, [pc, #448]	@ (80016a0 <main+0x3d8>)
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	2302      	movs	r3, #2
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	2364      	movs	r3, #100	@ 0x64
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2300      	movs	r3, #0
 80014ec:	2264      	movs	r2, #100	@ 0x64
 80014ee:	4975      	ldr	r1, [pc, #468]	@ (80016c4 <main+0x3fc>)
 80014f0:	486d      	ldr	r0, [pc, #436]	@ (80016a8 <main+0x3e0>)
 80014f2:	f006 fb7b 	bl	8007bec <ATC_SendReceive>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a6c      	ldr	r2, [pc, #432]	@ (80016ac <main+0x3e4>)
 80014fa:	6013      	str	r3, [r2, #0]


    // deactivate gprs context
    resp = ATC_SendReceive(&gsm, "AT+CIPSHUT\r\n", 100, NULL, 5000, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80014fc:	4b67      	ldr	r3, [pc, #412]	@ (800169c <main+0x3d4>)
 80014fe:	9303      	str	r3, [sp, #12]
 8001500:	4b67      	ldr	r3, [pc, #412]	@ (80016a0 <main+0x3d8>)
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	2302      	movs	r3, #2
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	f241 3388 	movw	r3, #5000	@ 0x1388
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	2264      	movs	r2, #100	@ 0x64
 8001512:	496d      	ldr	r1, [pc, #436]	@ (80016c8 <main+0x400>)
 8001514:	4864      	ldr	r0, [pc, #400]	@ (80016a8 <main+0x3e0>)
 8001516:	f006 fb69 	bl	8007bec <ATC_SendReceive>
 800151a:	4603      	mov	r3, r0
 800151c:	4a63      	ldr	r2, [pc, #396]	@ (80016ac <main+0x3e4>)
 800151e:	6013      	str	r3, [r2, #0]
    // single ip conection
    resp = ATC_SendReceive(&gsm, "AT+CIPMUX=0\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001520:	4b5e      	ldr	r3, [pc, #376]	@ (800169c <main+0x3d4>)
 8001522:	9303      	str	r3, [sp, #12]
 8001524:	4b5e      	ldr	r3, [pc, #376]	@ (80016a0 <main+0x3d8>)
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2302      	movs	r3, #2
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	2364      	movs	r3, #100	@ 0x64
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2300      	movs	r3, #0
 8001532:	2264      	movs	r2, #100	@ 0x64
 8001534:	4965      	ldr	r1, [pc, #404]	@ (80016cc <main+0x404>)
 8001536:	485c      	ldr	r0, [pc, #368]	@ (80016a8 <main+0x3e0>)
 8001538:	f006 fb58 	bl	8007bec <ATC_SendReceive>
 800153c:	4603      	mov	r3, r0
 800153e:	4a5b      	ldr	r2, [pc, #364]	@ (80016ac <main+0x3e4>)
 8001540:	6013      	str	r3, [r2, #0]
    // attach gprs
    resp = ATC_SendReceive(&gsm, "AT+CGATT=1\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001542:	4b56      	ldr	r3, [pc, #344]	@ (800169c <main+0x3d4>)
 8001544:	9303      	str	r3, [sp, #12]
 8001546:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <main+0x3d8>)
 8001548:	9302      	str	r3, [sp, #8]
 800154a:	2302      	movs	r3, #2
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2364      	movs	r3, #100	@ 0x64
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	2264      	movs	r2, #100	@ 0x64
 8001556:	495e      	ldr	r1, [pc, #376]	@ (80016d0 <main+0x408>)
 8001558:	4853      	ldr	r0, [pc, #332]	@ (80016a8 <main+0x3e0>)
 800155a:	f006 fb47 	bl	8007bec <ATC_SendReceive>
 800155e:	4603      	mov	r3, r0
 8001560:	4a52      	ldr	r2, [pc, #328]	@ (80016ac <main+0x3e4>)
 8001562:	6013      	str	r3, [r2, #0]
    // apn
    resp = ATC_SendReceive(&gsm, "AT+CSTT=\"wap.orange.md\"\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001564:	4b4d      	ldr	r3, [pc, #308]	@ (800169c <main+0x3d4>)
 8001566:	9303      	str	r3, [sp, #12]
 8001568:	4b4d      	ldr	r3, [pc, #308]	@ (80016a0 <main+0x3d8>)
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2302      	movs	r3, #2
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	2364      	movs	r3, #100	@ 0x64
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2300      	movs	r3, #0
 8001576:	2264      	movs	r2, #100	@ 0x64
 8001578:	4956      	ldr	r1, [pc, #344]	@ (80016d4 <main+0x40c>)
 800157a:	484b      	ldr	r0, [pc, #300]	@ (80016a8 <main+0x3e0>)
 800157c:	f006 fb36 	bl	8007bec <ATC_SendReceive>
 8001580:	4603      	mov	r3, r0
 8001582:	4a4a      	ldr	r2, [pc, #296]	@ (80016ac <main+0x3e4>)
 8001584:	6013      	str	r3, [r2, #0]
    // bring wireless connection
    resp = ATC_SendReceive(&gsm, "AT+CIICR\r\n", 100, NULL, 5000, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001586:	4b45      	ldr	r3, [pc, #276]	@ (800169c <main+0x3d4>)
 8001588:	9303      	str	r3, [sp, #12]
 800158a:	4b45      	ldr	r3, [pc, #276]	@ (80016a0 <main+0x3d8>)
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2302      	movs	r3, #2
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	2264      	movs	r2, #100	@ 0x64
 800159c:	494e      	ldr	r1, [pc, #312]	@ (80016d8 <main+0x410>)
 800159e:	4842      	ldr	r0, [pc, #264]	@ (80016a8 <main+0x3e0>)
 80015a0:	f006 fb24 	bl	8007bec <ATC_SendReceive>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a41      	ldr	r2, [pc, #260]	@ (80016ac <main+0x3e4>)
 80015a8:	6013      	str	r3, [r2, #0]
    // get local ip address => resp==0 no OK
    resp = ATC_SendReceive(&gsm, "AT+CIFSR\r\n", 100, NULL, 50, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 80015aa:	4b3c      	ldr	r3, [pc, #240]	@ (800169c <main+0x3d4>)
 80015ac:	9303      	str	r3, [sp, #12]
 80015ae:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <main+0x3d8>)
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	2302      	movs	r3, #2
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	2332      	movs	r3, #50	@ 0x32
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2300      	movs	r3, #0
 80015bc:	2264      	movs	r2, #100	@ 0x64
 80015be:	4947      	ldr	r1, [pc, #284]	@ (80016dc <main+0x414>)
 80015c0:	4839      	ldr	r0, [pc, #228]	@ (80016a8 <main+0x3e0>)
 80015c2:	f006 fb13 	bl	8007bec <ATC_SendReceive>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a38      	ldr	r2, [pc, #224]	@ (80016ac <main+0x3e4>)
 80015ca:	6013      	str	r3, [r2, #0]

    resp = ATC_SendReceive(&gsm, "AT+CIPSTART=\"TCP\",\"scz.pge.md\",\"16992\"\r\n", 100, NULL, 5000, 2, "\r\nCONNECT OK\r\n", "\r\nERROR\r\n");
 80015cc:	4b33      	ldr	r3, [pc, #204]	@ (800169c <main+0x3d4>)
 80015ce:	9303      	str	r3, [sp, #12]
 80015d0:	4b43      	ldr	r3, [pc, #268]	@ (80016e0 <main+0x418>)
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2302      	movs	r3, #2
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2300      	movs	r3, #0
 80015e0:	2264      	movs	r2, #100	@ 0x64
 80015e2:	4940      	ldr	r1, [pc, #256]	@ (80016e4 <main+0x41c>)
 80015e4:	4830      	ldr	r0, [pc, #192]	@ (80016a8 <main+0x3e0>)
 80015e6:	f006 fb01 	bl	8007bec <ATC_SendReceive>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a2f      	ldr	r2, [pc, #188]	@ (80016ac <main+0x3e4>)
 80015ee:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if((HAL_GetTick() - timer1) > 500) { //  500ms
 80015f0:	f001 fb06 	bl	8002c00 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b3c      	ldr	r3, [pc, #240]	@ (80016e8 <main+0x420>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001600:	d909      	bls.n	8001616 <main+0x34e>

			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001602:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001606:	4839      	ldr	r0, [pc, #228]	@ (80016ec <main+0x424>)
 8001608:	f002 fe79 	bl	80042fe <HAL_GPIO_TogglePin>
			timer1 = HAL_GetTick();
 800160c:	f001 faf8 	bl	8002c00 <HAL_GetTick>
 8001610:	4603      	mov	r3, r0
 8001612:	4a35      	ldr	r2, [pc, #212]	@ (80016e8 <main+0x420>)
 8001614:	6013      	str	r3, [r2, #0]
		}



		if((HAL_GetTick() - timer3) > 200) { //  200ms
 8001616:	f001 faf3 	bl	8002c00 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <main+0x428>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2bc8      	cmp	r3, #200	@ 0xc8
 8001624:	d921      	bls.n	800166a <main+0x3a2>
			//is '$2|' command receive?
			ATC_Loop(&gsm);
 8001626:	4820      	ldr	r0, [pc, #128]	@ (80016a8 <main+0x3e0>)
 8001628:	f006 fad2 	bl	8007bd0 <ATC_Loop>

			//check command receive
			if (flagCommand2 == 1){
 800162c:	4b31      	ldr	r3, [pc, #196]	@ (80016f4 <main+0x42c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d115      	bne.n	8001660 <main+0x398>
				flagCommand2 = 0;
 8001634:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <main+0x42c>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]

 				if ( strServerToStation(strStation, command2, 15) == 0 ){
 800163a:	220f      	movs	r2, #15
 800163c:	492e      	ldr	r1, [pc, #184]	@ (80016f8 <main+0x430>)
 800163e:	482f      	ldr	r0, [pc, #188]	@ (80016fc <main+0x434>)
 8001640:	f000 fcfa 	bl	8002038 <strServerToStation>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10a      	bne.n	8001660 <main+0x398>
 					// query data from station change current
 					HAL_UART_Transmit(&huart5, (uint8_t *)strStation, strlen(strStation), 400);
 800164a:	482c      	ldr	r0, [pc, #176]	@ (80016fc <main+0x434>)
 800164c:	f7fe fdc0 	bl	80001d0 <strlen>
 8001650:	4603      	mov	r3, r0
 8001652:	b29a      	uxth	r2, r3
 8001654:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001658:	4928      	ldr	r1, [pc, #160]	@ (80016fc <main+0x434>)
 800165a:	4829      	ldr	r0, [pc, #164]	@ (8001700 <main+0x438>)
 800165c:	f004 f8f8 	bl	8005850 <HAL_UART_Transmit>
 				}

			}

			timer3 = HAL_GetTick();
 8001660:	f001 face 	bl	8002c00 <HAL_GetTick>
 8001664:	4603      	mov	r3, r0
 8001666:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <main+0x428>)
 8001668:	6013      	str	r3, [r2, #0]
		}




		if((HAL_GetTick() - timer2) > 20000) { //  20sec
 800166a:	f001 fac9 	bl	8002c00 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <main+0x43c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800167a:	4293      	cmp	r3, r2
 800167c:	d9b8      	bls.n	80015f0 <main+0x328>
			//
			// query data from station
			HAL_UART_Transmit(&huart5, (uint8_t *)"$?;", 3, 200);
 800167e:	23c8      	movs	r3, #200	@ 0xc8
 8001680:	2203      	movs	r2, #3
 8001682:	4921      	ldr	r1, [pc, #132]	@ (8001708 <main+0x440>)
 8001684:	481e      	ldr	r0, [pc, #120]	@ (8001700 <main+0x438>)
 8001686:	f004 f8e3 	bl	8005850 <HAL_UART_Transmit>
			HAL_Delay(200);
 800168a:	20c8      	movs	r0, #200	@ 0xc8
 800168c:	f001 fac4 	bl	8002c18 <HAL_Delay>

			if( flagReceiveFromStation ) {
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <main+0x444>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d042      	beq.n	8001720 <main+0x458>
 800169a:	e039      	b.n	8001710 <main+0x448>
 800169c:	080089a0 	.word	0x080089a0
 80016a0:	080089ac 	.word	0x080089ac
 80016a4:	08008998 	.word	0x08008998
 80016a8:	2000012c 	.word	0x2000012c
 80016ac:	20000168 	.word	0x20000168
 80016b0:	080089b4 	.word	0x080089b4
 80016b4:	080089bc 	.word	0x080089bc
 80016b8:	080089cc 	.word	0x080089cc
 80016bc:	080089dc 	.word	0x080089dc
 80016c0:	080089e8 	.word	0x080089e8
 80016c4:	080089f4 	.word	0x080089f4
 80016c8:	08008a00 	.word	0x08008a00
 80016cc:	08008a10 	.word	0x08008a10
 80016d0:	08008a20 	.word	0x08008a20
 80016d4:	08008a30 	.word	0x08008a30
 80016d8:	08008a4c 	.word	0x08008a4c
 80016dc:	08008a58 	.word	0x08008a58
 80016e0:	08008a90 	.word	0x08008a90
 80016e4:	08008a64 	.word	0x08008a64
 80016e8:	20000120 	.word	0x20000120
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	20000128 	.word	0x20000128
 80016f4:	20000170 	.word	0x20000170
 80016f8:	20000174 	.word	0x20000174
 80016fc:	20000184 	.word	0x20000184
 8001700:	20000410 	.word	0x20000410
 8001704:	20000124 	.word	0x20000124
 8001708:	08008aa0 	.word	0x08008aa0
 800170c:	2000030e 	.word	0x2000030e
				decodeStrToStruct(&telData, (char *)temp_buff_rs485);
 8001710:	4995      	ldr	r1, [pc, #596]	@ (8001968 <main+0x6a0>)
 8001712:	4896      	ldr	r0, [pc, #600]	@ (800196c <main+0x6a4>)
 8001714:	f000 fb7c 	bl	8001e10 <decodeStrToStruct>
				flagReceiveFromStation = 0;
 8001718:	4b95      	ldr	r3, [pc, #596]	@ (8001970 <main+0x6a8>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	e002      	b.n	8001726 <main+0x45e>
			} else{
				defaultStrToStruct(&telData);
 8001720:	4892      	ldr	r0, [pc, #584]	@ (800196c <main+0x6a4>)
 8001722:	f000 fb11 	bl	8001d48 <defaultStrToStruct>
			}

			// signal quality
			resp = ATC_SendReceive(&gsm, "AT+CSQ\r\n", 100, NULL, 100, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8001726:	4b93      	ldr	r3, [pc, #588]	@ (8001974 <main+0x6ac>)
 8001728:	9303      	str	r3, [sp, #12]
 800172a:	4b93      	ldr	r3, [pc, #588]	@ (8001978 <main+0x6b0>)
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2302      	movs	r3, #2
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	2364      	movs	r3, #100	@ 0x64
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	2264      	movs	r2, #100	@ 0x64
 800173a:	4990      	ldr	r1, [pc, #576]	@ (800197c <main+0x6b4>)
 800173c:	4890      	ldr	r0, [pc, #576]	@ (8001980 <main+0x6b8>)
 800173e:	f006 fa55 	bl	8007bec <ATC_SendReceive>
 8001742:	4603      	mov	r3, r0
 8001744:	4a8f      	ldr	r2, [pc, #572]	@ (8001984 <main+0x6bc>)
 8001746:	6013      	str	r3, [r2, #0]
			if(resp) {
 8001748:	4b8e      	ldr	r3, [pc, #568]	@ (8001984 <main+0x6bc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d011      	beq.n	8001774 <main+0x4ac>
				//printf( (char *)gsm.pReadBuff );
				if (gsm.pReadBuff[5] == 'Q'){
 8001750:	4b8b      	ldr	r3, [pc, #556]	@ (8001980 <main+0x6b8>)
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	3305      	adds	r3, #5
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b51      	cmp	r3, #81	@ 0x51
 800175a:	d10b      	bne.n	8001774 <main+0x4ac>
					gsm.pReadBuff[10] = '\0';
 800175c:	4b88      	ldr	r3, [pc, #544]	@ (8001980 <main+0x6b8>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	330a      	adds	r3, #10
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
					strcpy( telData.sq, (char *)&gsm.pReadBuff[8]);
 8001766:	4b86      	ldr	r3, [pc, #536]	@ (8001980 <main+0x6b8>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176a:	3308      	adds	r3, #8
 800176c:	4619      	mov	r1, r3
 800176e:	4886      	ldr	r0, [pc, #536]	@ (8001988 <main+0x6c0>)
 8001770:	f006 fd6c 	bl	800824c <strcpy>
				}
			}

			// u_bat; 220v; temperature (run adc)
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc, 3); // run ADC
 8001774:	2203      	movs	r2, #3
 8001776:	4985      	ldr	r1, [pc, #532]	@ (800198c <main+0x6c4>)
 8001778:	4885      	ldr	r0, [pc, #532]	@ (8001990 <main+0x6c8>)
 800177a:	f001 fab5 	bl	8002ce8 <HAL_ADC_Start_DMA>
			HAL_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f001 fa4a 	bl	8002c18 <HAL_Delay>
			if( flagAdcDmaComplit ) {
 8001784:	4b83      	ldr	r3, [pc, #524]	@ (8001994 <main+0x6cc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80c4 	beq.w	8001918 <main+0x650>

				flagAdcDmaComplit = 0;
 8001790:	4b80      	ldr	r3, [pc, #512]	@ (8001994 <main+0x6cc>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Stop_DMA(&hadc1);
 8001796:	487e      	ldr	r0, [pc, #504]	@ (8001990 <main+0x6c8>)
 8001798:	f001 fbb6 	bl	8002f08 <HAL_ADC_Stop_DMA>

				u_bat = (int)(((adc[0] * 6.6) / 409.5) + 0.5) ;	// batery
 800179c:	4b7b      	ldr	r3, [pc, #492]	@ (800198c <main+0x6c4>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe febe 	bl	8000524 <__aeabi_i2d>
 80017a8:	a363      	add	r3, pc, #396	@ (adr r3, 8001938 <main+0x670>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff23 	bl	80005f8 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	a361      	add	r3, pc, #388	@ (adr r3, 8001940 <main+0x678>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7ff f844 	bl	800084c <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b71      	ldr	r3, [pc, #452]	@ (8001998 <main+0x6d0>)
 80017d2:	f7fe fd5b 	bl	800028c <__adddf3>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f91d 	bl	8000a1c <__aeabi_d2iz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a6d      	ldr	r2, [pc, #436]	@ (800199c <main+0x6d4>)
 80017e6:	6013      	str	r3, [r2, #0]
				u_5v = (int)(((adc[1] * 6.6) / 4095.0) + 0.5) ;	// 5 volt
 80017e8:	4b68      	ldr	r3, [pc, #416]	@ (800198c <main+0x6c4>)
 80017ea:	885b      	ldrh	r3, [r3, #2]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe98 	bl	8000524 <__aeabi_i2d>
 80017f4:	a350      	add	r3, pc, #320	@ (adr r3, 8001938 <main+0x670>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a350      	add	r3, pc, #320	@ (adr r3, 8001948 <main+0x680>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7ff f81e 	bl	800084c <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b5e      	ldr	r3, [pc, #376]	@ (8001998 <main+0x6d0>)
 800181e:	f7fe fd35 	bl	800028c <__adddf3>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7ff f8f7 	bl	8000a1c <__aeabi_d2iz>
 800182e:	4603      	mov	r3, r0
 8001830:	4a5b      	ldr	r2, [pc, #364]	@ (80019a0 <main+0x6d8>)
 8001832:	6013      	str	r3, [r2, #0]
				temperature = (int)((((adc[2] * 3.3) / 4095) - 0.76) / 0.0025 + 25.0) ;	// temperature
 8001834:	4b55      	ldr	r3, [pc, #340]	@ (800198c <main+0x6c4>)
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe72 	bl	8000524 <__aeabi_i2d>
 8001840:	a343      	add	r3, pc, #268	@ (adr r3, 8001950 <main+0x688>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	a33d      	add	r3, pc, #244	@ (adr r3, 8001948 <main+0x680>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fff8 	bl	800084c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	a33c      	add	r3, pc, #240	@ (adr r3, 8001958 <main+0x690>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fd0d 	bl	8000288 <__aeabi_dsub>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	a33a      	add	r3, pc, #232	@ (adr r3, 8001960 <main+0x698>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe ffe6 	bl	800084c <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b45      	ldr	r3, [pc, #276]	@ (80019a4 <main+0x6dc>)
 800188e:	f7fe fcfd 	bl	800028c <__adddf3>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7ff f8bf 	bl	8000a1c <__aeabi_d2iz>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a41      	ldr	r2, [pc, #260]	@ (80019a8 <main+0x6e0>)
 80018a2:	6013      	str	r3, [r2, #0]
				//
				sprintf(tempString, "%i", u_bat);
 80018a4:	4b3d      	ldr	r3, [pc, #244]	@ (800199c <main+0x6d4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4940      	ldr	r1, [pc, #256]	@ (80019ac <main+0x6e4>)
 80018ac:	4840      	ldr	r0, [pc, #256]	@ (80019b0 <main+0x6e8>)
 80018ae:	f006 fc31 	bl	8008114 <siprintf>
				strcpy( telData.u_bat, tempString);
 80018b2:	493f      	ldr	r1, [pc, #252]	@ (80019b0 <main+0x6e8>)
 80018b4:	483f      	ldr	r0, [pc, #252]	@ (80019b4 <main+0x6ec>)
 80018b6:	f006 fcc9 	bl	800824c <strcpy>
				//
				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				//todo del:
				strcpy( telData.u_bat, "42");
 80018ba:	4b3e      	ldr	r3, [pc, #248]	@ (80019b4 <main+0x6ec>)
 80018bc:	4a3e      	ldr	r2, [pc, #248]	@ (80019b8 <main+0x6f0>)
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4611      	mov	r1, r2
 80018c2:	8019      	strh	r1, [r3, #0]
 80018c4:	3302      	adds	r3, #2
 80018c6:	0c12      	lsrs	r2, r2, #16
 80018c8:	701a      	strb	r2, [r3, #0]
				//
				if( u_5v > 4) sprintf(tempString, "%s", "1");
 80018ca:	4b35      	ldr	r3, [pc, #212]	@ (80019a0 <main+0x6d8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	dd05      	ble.n	80018de <main+0x616>
 80018d2:	4a3a      	ldr	r2, [pc, #232]	@ (80019bc <main+0x6f4>)
 80018d4:	493a      	ldr	r1, [pc, #232]	@ (80019c0 <main+0x6f8>)
 80018d6:	4836      	ldr	r0, [pc, #216]	@ (80019b0 <main+0x6e8>)
 80018d8:	f006 fc1c 	bl	8008114 <siprintf>
 80018dc:	e004      	b.n	80018e8 <main+0x620>
				else sprintf(tempString, "%s", "0");
 80018de:	4a39      	ldr	r2, [pc, #228]	@ (80019c4 <main+0x6fc>)
 80018e0:	4937      	ldr	r1, [pc, #220]	@ (80019c0 <main+0x6f8>)
 80018e2:	4833      	ldr	r0, [pc, #204]	@ (80019b0 <main+0x6e8>)
 80018e4:	f006 fc16 	bl	8008114 <siprintf>
				strcpy( telData.u220, tempString);
 80018e8:	4931      	ldr	r1, [pc, #196]	@ (80019b0 <main+0x6e8>)
 80018ea:	4837      	ldr	r0, [pc, #220]	@ (80019c8 <main+0x700>)
 80018ec:	f006 fcae 	bl	800824c <strcpy>
				//
				sprintf(tempString, "%+i", temperature);
 80018f0:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <main+0x6e0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4935      	ldr	r1, [pc, #212]	@ (80019cc <main+0x704>)
 80018f8:	482d      	ldr	r0, [pc, #180]	@ (80019b0 <main+0x6e8>)
 80018fa:	f006 fc0b 	bl	8008114 <siprintf>
				strcpy( telData.temperature, tempString);
 80018fe:	492c      	ldr	r1, [pc, #176]	@ (80019b0 <main+0x6e8>)
 8001900:	4833      	ldr	r0, [pc, #204]	@ (80019d0 <main+0x708>)
 8001902:	f006 fca3 	bl	800824c <strcpy>

				adc[0] = 0;
 8001906:	4b21      	ldr	r3, [pc, #132]	@ (800198c <main+0x6c4>)
 8001908:	2200      	movs	r2, #0
 800190a:	801a      	strh	r2, [r3, #0]
				adc[1] = 0;
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <main+0x6c4>)
 800190e:	2200      	movs	r2, #0
 8001910:	805a      	strh	r2, [r3, #2]
				adc[2] = 0;
 8001912:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <main+0x6c4>)
 8001914:	2200      	movs	r2, #0
 8001916:	809a      	strh	r2, [r3, #4]
			}

			// door
			if ( HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin) ) {
 8001918:	2180      	movs	r1, #128	@ 0x80
 800191a:	482e      	ldr	r0, [pc, #184]	@ (80019d4 <main+0x70c>)
 800191c:	f002 fcbe 	bl	800429c <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d058      	beq.n	80019d8 <main+0x710>
				//close
				sprintf(tempString, "%s", "0");
 8001926:	4a27      	ldr	r2, [pc, #156]	@ (80019c4 <main+0x6fc>)
 8001928:	4925      	ldr	r1, [pc, #148]	@ (80019c0 <main+0x6f8>)
 800192a:	4821      	ldr	r0, [pc, #132]	@ (80019b0 <main+0x6e8>)
 800192c:	f006 fbf2 	bl	8008114 <siprintf>
 8001930:	e057      	b.n	80019e2 <main+0x71a>
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	66666666 	.word	0x66666666
 800193c:	401a6666 	.word	0x401a6666
 8001940:	00000000 	.word	0x00000000
 8001944:	40799800 	.word	0x40799800
 8001948:	00000000 	.word	0x00000000
 800194c:	40affe00 	.word	0x40affe00
 8001950:	66666666 	.word	0x66666666
 8001954:	400a6666 	.word	0x400a6666
 8001958:	851eb852 	.word	0x851eb852
 800195c:	3fe851eb 	.word	0x3fe851eb
 8001960:	47ae147b 	.word	0x47ae147b
 8001964:	3f647ae1 	.word	0x3f647ae1
 8001968:	200002dc 	.word	0x200002dc
 800196c:	20000194 	.word	0x20000194
 8001970:	2000030e 	.word	0x2000030e
 8001974:	080089a0 	.word	0x080089a0
 8001978:	080089ac 	.word	0x080089ac
 800197c:	080089e8 	.word	0x080089e8
 8001980:	2000012c 	.word	0x2000012c
 8001984:	20000168 	.word	0x20000168
 8001988:	200001c6 	.word	0x200001c6
 800198c:	20000310 	.word	0x20000310
 8001990:	20000078 	.word	0x20000078
 8001994:	2000030f 	.word	0x2000030f
 8001998:	3fe00000 	.word	0x3fe00000
 800199c:	20000318 	.word	0x20000318
 80019a0:	2000031c 	.word	0x2000031c
 80019a4:	40390000 	.word	0x40390000
 80019a8:	20000320 	.word	0x20000320
 80019ac:	08008aa4 	.word	0x08008aa4
 80019b0:	20000298 	.word	0x20000298
 80019b4:	200001bc 	.word	0x200001bc
 80019b8:	08008aa8 	.word	0x08008aa8
 80019bc:	08008aac 	.word	0x08008aac
 80019c0:	08008ab0 	.word	0x08008ab0
 80019c4:	08008ab4 	.word	0x08008ab4
 80019c8:	200001d0 	.word	0x200001d0
 80019cc:	08008ab8 	.word	0x08008ab8
 80019d0:	200001e4 	.word	0x200001e4
 80019d4:	40020c00 	.word	0x40020c00
			}else {
				//open
				sprintf(tempString, "%s", "1");
 80019d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a90 <main+0x7c8>)
 80019da:	492e      	ldr	r1, [pc, #184]	@ (8001a94 <main+0x7cc>)
 80019dc:	482e      	ldr	r0, [pc, #184]	@ (8001a98 <main+0x7d0>)
 80019de:	f006 fb99 	bl	8008114 <siprintf>
			}
			strcpy( telData.door, tempString);
 80019e2:	492d      	ldr	r1, [pc, #180]	@ (8001a98 <main+0x7d0>)
 80019e4:	482d      	ldr	r0, [pc, #180]	@ (8001a9c <main+0x7d4>)
 80019e6:	f006 fc31 	bl	800824c <strcpy>


			sprintf(telString, "%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|%s|",
 80019ea:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <main+0x7d8>)
 80019ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80019ee:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa4 <main+0x7dc>)
 80019f0:	9308      	str	r3, [sp, #32]
 80019f2:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <main+0x7e0>)
 80019f4:	9307      	str	r3, [sp, #28]
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <main+0x7e4>)
 80019f8:	9306      	str	r3, [sp, #24]
 80019fa:	4b28      	ldr	r3, [pc, #160]	@ (8001a9c <main+0x7d4>)
 80019fc:	9305      	str	r3, [sp, #20]
 80019fe:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab0 <main+0x7e8>)
 8001a00:	9304      	str	r3, [sp, #16]
 8001a02:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <main+0x7ec>)
 8001a04:	9303      	str	r3, [sp, #12]
 8001a06:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab8 <main+0x7f0>)
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <main+0x7f4>)
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <main+0x7f8>)
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <main+0x7fc>)
 8001a14:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac8 <main+0x800>)
 8001a16:	492d      	ldr	r1, [pc, #180]	@ (8001acc <main+0x804>)
 8001a18:	482d      	ldr	r0, [pc, #180]	@ (8001ad0 <main+0x808>)
 8001a1a:	f006 fb7b 	bl	8008114 <siprintf>
					telData.temperature,
					telData.power,
					telData.i_max,
					telData.t_max
					);
			uint8_t crc = crc_8(telString);
 8001a1e:	482c      	ldr	r0, [pc, #176]	@ (8001ad0 <main+0x808>)
 8001a20:	f000 f958 	bl	8001cd4 <crc_8>
 8001a24:	4603      	mov	r3, r0
 8001a26:	70fb      	strb	r3, [r7, #3]
			sprintf(tempString, "%u;\x1A", crc);
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4929      	ldr	r1, [pc, #164]	@ (8001ad4 <main+0x80c>)
 8001a2e:	481a      	ldr	r0, [pc, #104]	@ (8001a98 <main+0x7d0>)
 8001a30:	f006 fb70 	bl	8008114 <siprintf>
			strcat(telString, tempString);
 8001a34:	4918      	ldr	r1, [pc, #96]	@ (8001a98 <main+0x7d0>)
 8001a36:	4826      	ldr	r0, [pc, #152]	@ (8001ad0 <main+0x808>)
 8001a38:	f006 fb94 	bl	8008164 <strcat>


			resp = ATC_SendReceive(&gsm, "AT+CIPSEND\r\n", 100, NULL, 100, 2, "\r\n> ", "\r\nERROR\r\n");
 8001a3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <main+0x810>)
 8001a3e:	9303      	str	r3, [sp, #12]
 8001a40:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <main+0x814>)
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2302      	movs	r3, #2
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2364      	movs	r3, #100	@ 0x64
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2264      	movs	r2, #100	@ 0x64
 8001a50:	4923      	ldr	r1, [pc, #140]	@ (8001ae0 <main+0x818>)
 8001a52:	4824      	ldr	r0, [pc, #144]	@ (8001ae4 <main+0x81c>)
 8001a54:	f006 f8ca 	bl	8007bec <ATC_SendReceive>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ae8 <main+0x820>)
 8001a5c:	6013      	str	r3, [r2, #0]

			resp2 = ATC_SendReceive(&gsm, telString, 100, NULL, 2000, 2, "\r\nSEND OK\r\n", "\r\nERROR\r\n");
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <main+0x810>)
 8001a60:	9303      	str	r3, [sp, #12]
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <main+0x824>)
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	2302      	movs	r3, #2
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2300      	movs	r3, #0
 8001a72:	2264      	movs	r2, #100	@ 0x64
 8001a74:	4916      	ldr	r1, [pc, #88]	@ (8001ad0 <main+0x808>)
 8001a76:	481b      	ldr	r0, [pc, #108]	@ (8001ae4 <main+0x81c>)
 8001a78:	f006 f8b8 	bl	8007bec <ATC_SendReceive>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001af0 <main+0x828>)
 8001a80:	6013      	str	r3, [r2, #0]


			timer2 = HAL_GetTick();
 8001a82:	f001 f8bd 	bl	8002c00 <HAL_GetTick>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <main+0x82c>)
 8001a8a:	6013      	str	r3, [r2, #0]
		if((HAL_GetTick() - timer1) > 500) { //  500ms
 8001a8c:	e5b0      	b.n	80015f0 <main+0x328>
 8001a8e:	bf00      	nop
 8001a90:	08008aac 	.word	0x08008aac
 8001a94:	08008ab0 	.word	0x08008ab0
 8001a98:	20000298 	.word	0x20000298
 8001a9c:	200001da 	.word	0x200001da
 8001aa0:	20000207 	.word	0x20000207
 8001aa4:	200001fd 	.word	0x200001fd
 8001aa8:	200001ee 	.word	0x200001ee
 8001aac:	200001e4 	.word	0x200001e4
 8001ab0:	200001d0 	.word	0x200001d0
 8001ab4:	200001c6 	.word	0x200001c6
 8001ab8:	200001bc 	.word	0x200001bc
 8001abc:	200001b2 	.word	0x200001b2
 8001ac0:	200001a8 	.word	0x200001a8
 8001ac4:	2000019e 	.word	0x2000019e
 8001ac8:	20000194 	.word	0x20000194
 8001acc:	08008abc 	.word	0x08008abc
 8001ad0:	20000214 	.word	0x20000214
 8001ad4:	08008ae4 	.word	0x08008ae4
 8001ad8:	080089a0 	.word	0x080089a0
 8001adc:	08008afc 	.word	0x08008afc
 8001ae0:	08008aec 	.word	0x08008aec
 8001ae4:	2000012c 	.word	0x2000012c
 8001ae8:	20000168 	.word	0x20000168
 8001aec:	08008b04 	.word	0x08008b04
 8001af0:	2000016c 	.word	0x2000016c
 8001af4:	20000124 	.word	0x20000124

08001af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b094      	sub	sp, #80	@ 0x50
 8001afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afe:	f107 0320 	add.w	r3, r7, #32
 8001b02:	2230      	movs	r2, #48	@ 0x30
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f006 fb24 	bl	8008154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <SystemClock_Config+0xcc>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	4a27      	ldr	r2, [pc, #156]	@ (8001bc4 <SystemClock_Config+0xcc>)
 8001b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2c:	4b25      	ldr	r3, [pc, #148]	@ (8001bc4 <SystemClock_Config+0xcc>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <SystemClock_Config+0xd0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a21      	ldr	r2, [pc, #132]	@ (8001bc8 <SystemClock_Config+0xd0>)
 8001b42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <SystemClock_Config+0xd0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001b6c:	2360      	movs	r3, #96	@ 0x60
 8001b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b74:	2304      	movs	r3, #4
 8001b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fce7 	bl	8004550 <HAL_RCC_OscConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b88:	f000 f820 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 ff48 	bl	8004a40 <HAL_RCC_ClockConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bb6:	f000 f809 	bl	8001bcc <Error_Handler>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3750      	adds	r7, #80	@ 0x50
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <Error_Handler+0x8>

08001bd8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bde:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <MX_SPI1_Init+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001be4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c24:	220a      	movs	r2, #10
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <MX_SPI1_Init+0x64>)
 8001c2a:	f003 f929 	bl	8004e80 <HAL_SPI_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c34:	f7ff ffca 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000324 	.word	0x20000324
 8001c40:	40013000 	.word	0x40013000

08001c44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a19      	ldr	r2, [pc, #100]	@ (8001cc8 <HAL_SPI_MspInit+0x84>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d12b      	bne.n	8001cbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_SPI_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c9e:	23e0      	movs	r3, #224	@ 0xe0
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cae:	2305      	movs	r3, #5
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <HAL_SPI_MspInit+0x8c>)
 8001cba:	f002 f953 	bl	8003f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	@ 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013000 	.word	0x40013000
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <crc_8>:
#include "station.h"

uint8_t crc_8(char *str){
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0xFF;
 8001cdc:	23ff      	movs	r3, #255	@ 0xff
 8001cde:	73fb      	strb	r3, [r7, #15]
	for(uint8_t e = 0; str[e] != '\0'; e++){
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73bb      	strb	r3, [r7, #14]
 8001ce4:	e022      	b.n	8001d2c <crc_8+0x58>
		crc = crc ^ str[e];
 8001ce6:	7bbb      	ldrb	r3, [r7, #14]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	4053      	eors	r3, r2
 8001cf2:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i =0; i < 8; i++){
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	737b      	strb	r3, [r7, #13]
 8001cf8:	e012      	b.n	8001d20 <crc_8+0x4c>
			if((crc & 0x01) != 0){
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <crc_8+0x40>
				crc = (crc>>1) ^ 0x8C;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e002      	b.n	8001d1a <crc_8+0x46>
			} else {
				crc >>= 1;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i =0; i < 8; i++){
 8001d1a:	7b7b      	ldrb	r3, [r7, #13]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	737b      	strb	r3, [r7, #13]
 8001d20:	7b7b      	ldrb	r3, [r7, #13]
 8001d22:	2b07      	cmp	r3, #7
 8001d24:	d9e9      	bls.n	8001cfa <crc_8+0x26>
	for(uint8_t e = 0; str[e] != '\0'; e++){
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	73bb      	strb	r3, [r7, #14]
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1d6      	bne.n	8001ce6 <crc_8+0x12>
			}
		}
	}
	return crc;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <defaultStrToStruct>:

void defaultStrToStruct(TelData *telData){
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	strcpy(telData->id, ID);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	492d      	ldr	r1, [pc, #180]	@ (8001e08 <defaultStrToStruct+0xc0>)
 8001d54:	461a      	mov	r2, r3
 8001d56:	460b      	mov	r3, r1
 8001d58:	cb03      	ldmia	r3!, {r0, r1}
 8001d5a:	6010      	str	r0, [r2, #0]
 8001d5c:	6051      	str	r1, [r2, #4]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	7213      	strb	r3, [r2, #8]
	strcpy(telData->i, "0");
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	330a      	adds	r3, #10
 8001d66:	4929      	ldr	r1, [pc, #164]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001d68:	461a      	mov	r2, r3
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u, "0");
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3314      	adds	r3, #20
 8001d74:	4925      	ldr	r1, [pc, #148]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001d76:	461a      	mov	r2, r3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	8013      	strh	r3, [r2, #0]
	strcpy(telData->p, "0");
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	331e      	adds	r3, #30
 8001d82:	4922      	ldr	r1, [pc, #136]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001d84:	461a      	mov	r2, r3
 8001d86:	460b      	mov	r3, r1
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u_bat, "0");
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3328      	adds	r3, #40	@ 0x28
 8001d90:	491e      	ldr	r1, [pc, #120]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001d92:	461a      	mov	r2, r3
 8001d94:	460b      	mov	r3, r1
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	8013      	strh	r3, [r2, #0]
	strcpy(telData->sq, "0");
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3332      	adds	r3, #50	@ 0x32
 8001d9e:	491b      	ldr	r1, [pc, #108]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001da0:	461a      	mov	r2, r3
 8001da2:	460b      	mov	r3, r1
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u220, "0");
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	333c      	adds	r3, #60	@ 0x3c
 8001dac:	4917      	ldr	r1, [pc, #92]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001dae:	461a      	mov	r2, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	8013      	strh	r3, [r2, #0]
	strcpy(telData->door, "0");
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3346      	adds	r3, #70	@ 0x46
 8001dba:	4914      	ldr	r1, [pc, #80]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	8013      	strh	r3, [r2, #0]
	strcpy(telData->temperature, "0");
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3350      	adds	r3, #80	@ 0x50
 8001dc8:	4910      	ldr	r1, [pc, #64]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001dca:	461a      	mov	r2, r3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	8013      	strh	r3, [r2, #0]
	strcpy(telData->power, "0");
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	335a      	adds	r3, #90	@ 0x5a
 8001dd6:	490d      	ldr	r1, [pc, #52]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001dd8:	461a      	mov	r2, r3
 8001dda:	460b      	mov	r3, r1
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	8013      	strh	r3, [r2, #0]
	strcpy(telData->i_max, "0");
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3369      	adds	r3, #105	@ 0x69
 8001de4:	4909      	ldr	r1, [pc, #36]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001de6:	461a      	mov	r2, r3
 8001de8:	460b      	mov	r3, r1
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	8013      	strh	r3, [r2, #0]
	strcpy(telData->t_max, "0");
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3373      	adds	r3, #115	@ 0x73
 8001df2:	4906      	ldr	r1, [pc, #24]	@ (8001e0c <defaultStrToStruct+0xc4>)
 8001df4:	461a      	mov	r2, r3
 8001df6:	460b      	mov	r3, r1
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	8013      	strh	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	08008b10 	.word	0x08008b10
 8001e0c:	08008b1c 	.word	0x08008b1c

08001e10 <decodeStrToStruct>:

void decodeStrToStruct(TelData *telData, char *str){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]

	char tempStr[10];

	strcpy(telData->id, ID);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4984      	ldr	r1, [pc, #528]	@ (8002030 <decodeStrToStruct+0x220>)
 8001e1e:	461a      	mov	r2, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	cb03      	ldmia	r3!, {r0, r1}
 8001e24:	6010      	str	r0, [r2, #0]
 8001e26:	6051      	str	r1, [r2, #4]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	7213      	strb	r3, [r2, #8]
	strcpy(telData->i, "0");
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	330a      	adds	r3, #10
 8001e30:	4980      	ldr	r1, [pc, #512]	@ (8002034 <decodeStrToStruct+0x224>)
 8001e32:	461a      	mov	r2, r3
 8001e34:	460b      	mov	r3, r1
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u, "0");
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3314      	adds	r3, #20
 8001e3e:	497d      	ldr	r1, [pc, #500]	@ (8002034 <decodeStrToStruct+0x224>)
 8001e40:	461a      	mov	r2, r3
 8001e42:	460b      	mov	r3, r1
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	8013      	strh	r3, [r2, #0]
	strcpy(telData->p, "0");
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	331e      	adds	r3, #30
 8001e4c:	4979      	ldr	r1, [pc, #484]	@ (8002034 <decodeStrToStruct+0x224>)
 8001e4e:	461a      	mov	r2, r3
 8001e50:	460b      	mov	r3, r1
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u_bat, "0");
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3328      	adds	r3, #40	@ 0x28
 8001e5a:	4976      	ldr	r1, [pc, #472]	@ (8002034 <decodeStrToStruct+0x224>)
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	460b      	mov	r3, r1
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	8013      	strh	r3, [r2, #0]
	strcpy(telData->sq, "0");
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3332      	adds	r3, #50	@ 0x32
 8001e68:	4972      	ldr	r1, [pc, #456]	@ (8002034 <decodeStrToStruct+0x224>)
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	8013      	strh	r3, [r2, #0]
	strcpy(telData->u220, "0");
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	333c      	adds	r3, #60	@ 0x3c
 8001e76:	496f      	ldr	r1, [pc, #444]	@ (8002034 <decodeStrToStruct+0x224>)
 8001e78:	461a      	mov	r2, r3
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	8013      	strh	r3, [r2, #0]
	strcpy(telData->door, "0");
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3346      	adds	r3, #70	@ 0x46
 8001e84:	496b      	ldr	r1, [pc, #428]	@ (8002034 <decodeStrToStruct+0x224>)
 8001e86:	461a      	mov	r2, r3
 8001e88:	460b      	mov	r3, r1
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	8013      	strh	r3, [r2, #0]
	strcpy(telData->temperature, "0");
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3350      	adds	r3, #80	@ 0x50
 8001e92:	4968      	ldr	r1, [pc, #416]	@ (8002034 <decodeStrToStruct+0x224>)
 8001e94:	461a      	mov	r2, r3
 8001e96:	460b      	mov	r3, r1
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	8013      	strh	r3, [r2, #0]
	strcpy(telData->power, "0");
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	335a      	adds	r3, #90	@ 0x5a
 8001ea0:	4964      	ldr	r1, [pc, #400]	@ (8002034 <decodeStrToStruct+0x224>)
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	8013      	strh	r3, [r2, #0]
	strcpy(telData->i_max, "0");
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3369      	adds	r3, #105	@ 0x69
 8001eae:	4961      	ldr	r1, [pc, #388]	@ (8002034 <decodeStrToStruct+0x224>)
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	8013      	strh	r3, [r2, #0]
	strcpy(telData->t_max, "0");
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3373      	adds	r3, #115	@ 0x73
 8001ebc:	495d      	ldr	r1, [pc, #372]	@ (8002034 <decodeStrToStruct+0x224>)
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	8013      	strh	r3, [r2, #0]

	if (str[0] != '$') return;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b24      	cmp	r3, #36	@ 0x24
 8001ecc:	f040 80aa 	bne.w	8002024 <decodeStrToStruct+0x214>
	uint8_t j,k = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i = 1; (str[i] != '\0') && (i < 50); i++){
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	757b      	strb	r3, [r7, #21]
 8001ed8:	e099      	b.n	800200e <decodeStrToStruct+0x1fe>
		if( str[i] != '|') {
 8001eda:	7d7b      	ldrb	r3, [r7, #21]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b7c      	cmp	r3, #124	@ 0x7c
 8001ee4:	d013      	beq.n	8001f0e <decodeStrToStruct+0xfe>
			if( str[i] == ';') break;
 8001ee6:	7d7b      	ldrb	r3, [r7, #21]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b3b      	cmp	r3, #59	@ 0x3b
 8001ef0:	f000 809a 	beq.w	8002028 <decodeStrToStruct+0x218>
			tempStr[k] = str[i];
 8001ef4:	7d7b      	ldrb	r3, [r7, #21]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	441a      	add	r2, r3
 8001efa:	7dbb      	ldrb	r3, [r7, #22]
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	3318      	adds	r3, #24
 8001f00:	443b      	add	r3, r7
 8001f02:	f803 2c10 	strb.w	r2, [r3, #-16]
			k++;
 8001f06:	7dbb      	ldrb	r3, [r7, #22]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	75bb      	strb	r3, [r7, #22]
 8001f0c:	e07c      	b.n	8002008 <decodeStrToStruct+0x1f8>
		}
		else {
			tempStr[k] = '\0';
 8001f0e:	7dbb      	ldrb	r3, [r7, #22]
 8001f10:	3318      	adds	r3, #24
 8001f12:	443b      	add	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	f803 2c10 	strb.w	r2, [r3, #-16]
			if( j == 0) if(strlen(tempStr)<9) strcpy( telData->i, tempStr );
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10f      	bne.n	8001f40 <decodeStrToStruct+0x130>
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe f953 	bl	80001d0 <strlen>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d807      	bhi.n	8001f40 <decodeStrToStruct+0x130>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	330a      	adds	r3, #10
 8001f34:	f107 0208 	add.w	r2, r7, #8
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f006 f986 	bl	800824c <strcpy>
			if( j == 1) if(strlen(tempStr)<9) strcpy( telData->u, tempStr );
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10f      	bne.n	8001f66 <decodeStrToStruct+0x156>
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe f940 	bl	80001d0 <strlen>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d807      	bhi.n	8001f66 <decodeStrToStruct+0x156>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	f107 0208 	add.w	r2, r7, #8
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f006 f973 	bl	800824c <strcpy>
			if( j == 2) if(strlen(tempStr)<9) strcpy( telData->p, tempStr );
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d10f      	bne.n	8001f8c <decodeStrToStruct+0x17c>
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe f92d 	bl	80001d0 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d807      	bhi.n	8001f8c <decodeStrToStruct+0x17c>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	331e      	adds	r3, #30
 8001f80:	f107 0208 	add.w	r2, r7, #8
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f006 f960 	bl	800824c <strcpy>
			if( j == 3) if(strlen(tempStr)<9) strcpy( telData->i_max, tempStr );
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d10f      	bne.n	8001fb2 <decodeStrToStruct+0x1a2>
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe f91a 	bl	80001d0 <strlen>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d807      	bhi.n	8001fb2 <decodeStrToStruct+0x1a2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3369      	adds	r3, #105	@ 0x69
 8001fa6:	f107 0208 	add.w	r2, r7, #8
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f006 f94d 	bl	800824c <strcpy>
			if( j == 4) if(strlen(tempStr)<9) strcpy( telData->t_max, tempStr );
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d10f      	bne.n	8001fd8 <decodeStrToStruct+0x1c8>
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe f907 	bl	80001d0 <strlen>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d807      	bhi.n	8001fd8 <decodeStrToStruct+0x1c8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3373      	adds	r3, #115	@ 0x73
 8001fcc:	f107 0208 	add.w	r2, r7, #8
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f006 f93a 	bl	800824c <strcpy>
			if( j == 5) if(strlen(tempStr)<14) strcpy( telData->power, tempStr );
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d10f      	bne.n	8001ffe <decodeStrToStruct+0x1ee>
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe f8f4 	bl	80001d0 <strlen>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b0d      	cmp	r3, #13
 8001fec:	d807      	bhi.n	8001ffe <decodeStrToStruct+0x1ee>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	335a      	adds	r3, #90	@ 0x5a
 8001ff2:	f107 0208 	add.w	r2, r7, #8
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f006 f927 	bl	800824c <strcpy>
			k = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	75bb      	strb	r3, [r7, #22]
			j++;
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	3301      	adds	r3, #1
 8002006:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 1; (str[i] != '\0') && (i < 50); i++){
 8002008:	7d7b      	ldrb	r3, [r7, #21]
 800200a:	3301      	adds	r3, #1
 800200c:	757b      	strb	r3, [r7, #21]
 800200e:	7d7b      	ldrb	r3, [r7, #21]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	4413      	add	r3, r2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <decodeStrToStruct+0x21a>
 800201a:	7d7b      	ldrb	r3, [r7, #21]
 800201c:	2b31      	cmp	r3, #49	@ 0x31
 800201e:	f67f af5c 	bls.w	8001eda <decodeStrToStruct+0xca>
 8002022:	e002      	b.n	800202a <decodeStrToStruct+0x21a>
	if (str[0] != '$') return;
 8002024:	bf00      	nop
 8002026:	e000      	b.n	800202a <decodeStrToStruct+0x21a>
			if( str[i] == ';') break;
 8002028:	bf00      	nop
		}
	}
}
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	08008b10 	.word	0x08008b10
 8002034:	08008b1c 	.word	0x08008b1c

08002038 <strServerToStation>:

int strServerToStation(char * station, char * server, int lenStation){
 8002038:	b580      	push	{r7, lr}
 800203a:	b092      	sub	sp, #72	@ 0x48
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	char val[5] = {0,};
 8002044:	2300      	movs	r3, #0
 8002046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002048:	2300      	movs	r3, #0
 800204a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	char crc[5] = {0,};
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	char str[15] = {0,};
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	f8c3 2007 	str.w	r2, [r3, #7]
	int value = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int crc_int = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	63bb      	str	r3, [r7, #56]	@ 0x38

	int lenServer = strlen(server);
 8002072:	68b8      	ldr	r0, [r7, #8]
 8002074:	f7fe f8ac 	bl	80001d0 <strlen>
 8002078:	4603      	mov	r3, r0
 800207a:	637b      	str	r3, [r7, #52]	@ 0x34
	int position2 = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	@ 0x30
	int i,k = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	643b      	str	r3, [r7, #64]	@ 0x40
	for(i=0; i < lenStation; i++){
 8002084:	2300      	movs	r3, #0
 8002086:	647b      	str	r3, [r7, #68]	@ 0x44
 8002088:	e007      	b.n	800209a <strServerToStation+0x62>
		station[i] = '\0';
 800208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
	for(i=0; i < lenStation; i++){
 8002094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002096:	3301      	adds	r3, #1
 8002098:	647b      	str	r3, [r7, #68]	@ 0x44
 800209a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbf3      	blt.n	800208a <strServerToStation+0x52>
	}
	if (server[0] != '$') return 1;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b24      	cmp	r3, #36	@ 0x24
 80020a8:	d001      	beq.n	80020ae <strServerToStation+0x76>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e087      	b.n	80021be <strServerToStation+0x186>
	if (server[1] != '2') return 1;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b32      	cmp	r3, #50	@ 0x32
 80020b6:	d001      	beq.n	80020bc <strServerToStation+0x84>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e080      	b.n	80021be <strServerToStation+0x186>
	if (server[2] != '|') return 1;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	3302      	adds	r3, #2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b7c      	cmp	r3, #124	@ 0x7c
 80020c4:	d001      	beq.n	80020ca <strServerToStation+0x92>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e079      	b.n	80021be <strServerToStation+0x186>

	for( i=3,k=0; i < lenServer; i++,k++ ){
 80020ca:	2303      	movs	r3, #3
 80020cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ce:	2300      	movs	r3, #0
 80020d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80020d2:	e015      	b.n	8002100 <strServerToStation+0xc8>
		if(server[i] != '|') val[k] = server[i];
 80020d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b7c      	cmp	r3, #124	@ 0x7c
 80020de:	d014      	beq.n	800210a <strServerToStation+0xd2>
 80020e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4413      	add	r3, r2
 80020e6:	7819      	ldrb	r1, [r3, #0]
 80020e8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80020ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ee:	4413      	add	r3, r2
 80020f0:	460a      	mov	r2, r1
 80020f2:	701a      	strb	r2, [r3, #0]
	for( i=3,k=0; i < lenServer; i++,k++ ){
 80020f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020f6:	3301      	adds	r3, #1
 80020f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80020fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020fc:	3301      	adds	r3, #1
 80020fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002104:	429a      	cmp	r2, r3
 8002106:	dbe5      	blt.n	80020d4 <strServerToStation+0x9c>
 8002108:	e000      	b.n	800210c <strServerToStation+0xd4>
		else break;
 800210a:	bf00      	nop
	}
	position2 = i;
 800210c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800210e:	633b      	str	r3, [r7, #48]	@ 0x30
	i++;
 8002110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002112:	3301      	adds	r3, #1
 8002114:	647b      	str	r3, [r7, #68]	@ 0x44
	for( k=0; i < lenServer; i++,k++ ){
 8002116:	2300      	movs	r3, #0
 8002118:	643b      	str	r3, [r7, #64]	@ 0x40
 800211a:	e00f      	b.n	800213c <strServerToStation+0x104>
		crc[k] = server[i];
 800211c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	4413      	add	r3, r2
 8002122:	7819      	ldrb	r1, [r3, #0]
 8002124:	f107 0220 	add.w	r2, r7, #32
 8002128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800212a:	4413      	add	r3, r2
 800212c:	460a      	mov	r2, r1
 800212e:	701a      	strb	r2, [r3, #0]
	for( k=0; i < lenServer; i++,k++ ){
 8002130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002132:	3301      	adds	r3, #1
 8002134:	647b      	str	r3, [r7, #68]	@ 0x44
 8002136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002138:	3301      	adds	r3, #1
 800213a:	643b      	str	r3, [r7, #64]	@ 0x40
 800213c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800213e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002140:	429a      	cmp	r2, r3
 8002142:	dbeb      	blt.n	800211c <strServerToStation+0xe4>
	}
	for(i = 0; i <= position2; i++){
 8002144:	2300      	movs	r3, #0
 8002146:	647b      	str	r3, [r7, #68]	@ 0x44
 8002148:	e00c      	b.n	8002164 <strServerToStation+0x12c>
		str[i] = server[i];
 800214a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	4413      	add	r3, r2
 8002150:	7819      	ldrb	r1, [r3, #0]
 8002152:	f107 0210 	add.w	r2, r7, #16
 8002156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002158:	4413      	add	r3, r2
 800215a:	460a      	mov	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i <= position2; i++){
 800215e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002160:	3301      	adds	r3, #1
 8002162:	647b      	str	r3, [r7, #68]	@ 0x44
 8002164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002168:	429a      	cmp	r2, r3
 800216a:	ddee      	ble.n	800214a <strServerToStation+0x112>
	}
	str[i] = '\0';
 800216c:	f107 0210 	add.w	r2, r7, #16
 8002170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002172:	4413      	add	r3, r2
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
	//
	value = atoi(val);
 8002178:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800217c:	4618      	mov	r0, r3
 800217e:	f005 fe82 	bl	8007e86 <atoi>
 8002182:	63f8      	str	r0, [r7, #60]	@ 0x3c
	crc_int = atoi(crc);
 8002184:	f107 0320 	add.w	r3, r7, #32
 8002188:	4618      	mov	r0, r3
 800218a:	f005 fe7c 	bl	8007e86 <atoi>
 800218e:	63b8      	str	r0, [r7, #56]	@ 0x38
	//
	if ( crc_int != crc_8(str)) return 1;
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fd9d 	bl	8001cd4 <crc_8>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d001      	beq.n	80021a8 <strServerToStation+0x170>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e00a      	b.n	80021be <strServerToStation+0x186>
	value *= 3;
 80021a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sprintf( station, "$R%03d;", value);
 80021b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021b4:	4904      	ldr	r1, [pc, #16]	@ (80021c8 <strServerToStation+0x190>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f005 ffac 	bl	8008114 <siprintf>
	return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3748      	adds	r7, #72	@ 0x48
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	08008b20 	.word	0x08008b20

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <HAL_MspInit+0x4c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <HAL_MspInit+0x4c>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_MspInit+0x4c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <HAL_MspInit+0x4c>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_MspInit+0x4c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <NMI_Handler+0x4>

08002224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <HardFault_Handler+0x4>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <MemManage_Handler+0x4>

08002234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <UsageFault_Handler+0x4>

08002244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002272:	f000 fcb1 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <TIM2_IRQHandler+0x10>)
 8002282:	f002 fed5 	bl	8005030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000380 	.word	0x20000380

08002290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <USART1_IRQHandler+0x10>)
 8002296:	f003 fd9d 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000458 	.word	0x20000458

080022a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <USART2_IRQHandler+0x10>)
 80022aa:	f003 fd93 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200004a0 	.word	0x200004a0

080022b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <USART3_IRQHandler+0x10>)
 80022be:	f003 fd89 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200004e8 	.word	0x200004e8

080022cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <UART4_IRQHandler+0x10>)
 80022d2:	f003 fd7f 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200003c8 	.word	0x200003c8

080022e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <UART5_IRQHandler+0x10>)
 80022e6:	f003 fd75 	bl	8005dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000410 	.word	0x20000410

080022f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <DMA2_Stream0_IRQHandler+0x10>)
 80022fa:	f001 fbbd 	bl	8003a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200000c0 	.word	0x200000c0

08002308 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <DMA2_Stream2_IRQHandler+0x10>)
 800230e:	f001 fbb3 	bl	8003a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000530 	.word	0x20000530

0800231c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <DMA2_Stream7_IRQHandler+0x10>)
 8002322:	f001 fba9 	bl	8003a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000590 	.word	0x20000590

08002330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002338:	4a14      	ldr	r2, [pc, #80]	@ (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	@ (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f005 ff48 	bl	80081f4 <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20020000 	.word	0x20020000
 8002390:	00001000 	.word	0x00001000
 8002394:	2000037c 	.word	0x2000037c
 8002398:	20000c20 	.word	0x20000c20

0800239c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <SystemInit+0x20>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	4a05      	ldr	r2, [pc, #20]	@ (80023bc <SystemInit+0x20>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	463b      	mov	r3, r7
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <MX_TIM2_Init+0x98>)
 80023de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 80023e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <MX_TIM2_Init+0x98>)
 80023e6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80023ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <MX_TIM2_Init+0x98>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80023f2:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <MX_TIM2_Init+0x98>)
 80023f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fa:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <MX_TIM2_Init+0x98>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002400:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <MX_TIM2_Init+0x98>)
 8002402:	2200      	movs	r2, #0
 8002404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002406:	4814      	ldr	r0, [pc, #80]	@ (8002458 <MX_TIM2_Init+0x98>)
 8002408:	f002 fdc3 	bl	8004f92 <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002412:	f7ff fbdb 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800241a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0308 	add.w	r3, r7, #8
 8002420:	4619      	mov	r1, r3
 8002422:	480d      	ldr	r0, [pc, #52]	@ (8002458 <MX_TIM2_Init+0x98>)
 8002424:	f002 fef4 	bl	8005210 <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800242e:	f7ff fbcd 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	@ (8002458 <MX_TIM2_Init+0x98>)
 8002440:	f003 f926 	bl	8005690 <HAL_TIMEx_MasterConfigSynchronization>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800244a:	f7ff fbbf 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000380 	.word	0x20000380

0800245c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246c:	d115      	bne.n	800249a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <HAL_TIM_Base_MspInit+0x48>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	4a0b      	ldr	r2, [pc, #44]	@ (80024a4 <HAL_TIM_Base_MspInit+0x48>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6413      	str	r3, [r2, #64]	@ 0x40
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_TIM_Base_MspInit+0x48>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2100      	movs	r1, #0
 800248e:	201c      	movs	r0, #28
 8002490:	f001 f923 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002494:	201c      	movs	r0, #28
 8002496:	f001 f93c 	bl	8003712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <MX_UART4_Init+0x50>)
 80024b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024ce:	220c      	movs	r2, #12
 80024d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024de:	4805      	ldr	r0, [pc, #20]	@ (80024f4 <MX_UART4_Init+0x4c>)
 80024e0:	f003 f966 	bl	80057b0 <HAL_UART_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80024ea:	f7ff fb6f 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200003c8 	.word	0x200003c8
 80024f8:	40004c00 	.word	0x40004c00

080024fc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002500:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <MX_UART5_Init+0x4c>)
 8002502:	4a12      	ldr	r2, [pc, #72]	@ (800254c <MX_UART5_Init+0x50>)
 8002504:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2400;
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <MX_UART5_Init+0x4c>)
 8002508:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800250c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800250e:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <MX_UART5_Init+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <MX_UART5_Init+0x4c>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800251a:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <MX_UART5_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <MX_UART5_Init+0x4c>)
 8002522:	220c      	movs	r2, #12
 8002524:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002526:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <MX_UART5_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <MX_UART5_Init+0x4c>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002532:	4805      	ldr	r0, [pc, #20]	@ (8002548 <MX_UART5_Init+0x4c>)
 8002534:	f003 f93c 	bl	80057b0 <HAL_UART_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800253e:	f7ff fb45 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000410 	.word	0x20000410
 800254c:	40005000 	.word	0x40005000

08002550 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 8002556:	4a12      	ldr	r2, [pc, #72]	@ (80025a0 <MX_USART1_UART_Init+0x50>)
 8002558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 800255c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 8002576:	220c      	movs	r2, #12
 8002578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002586:	4805      	ldr	r0, [pc, #20]	@ (800259c <MX_USART1_UART_Init+0x4c>)
 8002588:	f003 f912 	bl	80057b0 <HAL_UART_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002592:	f7ff fb1b 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000458 	.word	0x20000458
 80025a0:	40011000 	.word	0x40011000

080025a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	@ (80025f4 <MX_USART2_UART_Init+0x50>)
 80025ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025c8:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025ca:	220c      	movs	r2, #12
 80025cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ce:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025da:	4805      	ldr	r0, [pc, #20]	@ (80025f0 <MX_USART2_UART_Init+0x4c>)
 80025dc:	f003 f8e8 	bl	80057b0 <HAL_UART_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025e6:	f7ff faf1 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200004a0 	.word	0x200004a0
 80025f4:	40004400 	.word	0x40004400

080025f8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <MX_USART3_UART_Init+0x50>)
 8002600:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b0e      	ldr	r3, [pc, #56]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	@ (8002644 <MX_USART3_UART_Init+0x4c>)
 8002630:	f003 f8be 	bl	80057b0 <HAL_UART_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800263a:	f7ff fac7 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200004e8 	.word	0x200004e8
 8002648:	40004800 	.word	0x40004800

0800264c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b092      	sub	sp, #72	@ 0x48
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a94      	ldr	r2, [pc, #592]	@ (80028bc <HAL_UART_MspInit+0x270>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d134      	bne.n	80026d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	633b      	str	r3, [r7, #48]	@ 0x30
 8002672:	4b93      	ldr	r3, [pc, #588]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a92      	ldr	r2, [pc, #584]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002678:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b90      	ldr	r3, [pc, #576]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268e:	4b8c      	ldr	r3, [pc, #560]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a8b      	ldr	r2, [pc, #556]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b89      	ldr	r3, [pc, #548]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026a6:	2303      	movs	r3, #3
 80026a8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026b6:	2308      	movs	r3, #8
 80026b8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026be:	4619      	mov	r1, r3
 80026c0:	4880      	ldr	r0, [pc, #512]	@ (80028c4 <HAL_UART_MspInit+0x278>)
 80026c2:	f001 fc4f 	bl	8003f64 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	2034      	movs	r0, #52	@ 0x34
 80026cc:	f001 f805 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80026d0:	2034      	movs	r0, #52	@ 0x34
 80026d2:	f001 f81e 	bl	8003712 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026d6:	e17b      	b.n	80029d0 <HAL_UART_MspInit+0x384>
  else if(uartHandle->Instance==UART5)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a7a      	ldr	r2, [pc, #488]	@ (80028c8 <HAL_UART_MspInit+0x27c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d153      	bne.n	800278a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e6:	4b76      	ldr	r3, [pc, #472]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	4a75      	ldr	r2, [pc, #468]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 80026ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f2:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
 8002702:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	4a6e      	ldr	r2, [pc, #440]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6313      	str	r3, [r2, #48]	@ 0x30
 800270e:	4b6c      	ldr	r3, [pc, #432]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	4b68      	ldr	r3, [pc, #416]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a67      	ldr	r2, [pc, #412]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b65      	ldr	r3, [pc, #404]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800273a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002748:	2308      	movs	r3, #8
 800274a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002750:	4619      	mov	r1, r3
 8002752:	485e      	ldr	r0, [pc, #376]	@ (80028cc <HAL_UART_MspInit+0x280>)
 8002754:	f001 fc06 	bl	8003f64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002758:	2304      	movs	r3, #4
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002768:	2308      	movs	r3, #8
 800276a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002770:	4619      	mov	r1, r3
 8002772:	4857      	ldr	r0, [pc, #348]	@ (80028d0 <HAL_UART_MspInit+0x284>)
 8002774:	f001 fbf6 	bl	8003f64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2035      	movs	r0, #53	@ 0x35
 800277e:	f000 ffac 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002782:	2035      	movs	r0, #53	@ 0x35
 8002784:	f000 ffc5 	bl	8003712 <HAL_NVIC_EnableIRQ>
}
 8002788:	e122      	b.n	80029d0 <HAL_UART_MspInit+0x384>
  else if(uartHandle->Instance==USART1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a51      	ldr	r2, [pc, #324]	@ (80028d4 <HAL_UART_MspInit+0x288>)
 8002790:	4293      	cmp	r3, r2
 8002792:	f040 80a9 	bne.w	80028e8 <HAL_UART_MspInit+0x29c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	4a48      	ldr	r2, [pc, #288]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 80027a0:	f043 0310 	orr.w	r3, r3, #16
 80027a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a6:	4b46      	ldr	r3, [pc, #280]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	4b42      	ldr	r3, [pc, #264]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a41      	ldr	r2, [pc, #260]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <HAL_UART_MspInit+0x274>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e0:	2307      	movs	r3, #7
 80027e2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027e8:	4619      	mov	r1, r3
 80027ea:	4836      	ldr	r0, [pc, #216]	@ (80028c4 <HAL_UART_MspInit+0x278>)
 80027ec:	f001 fbba 	bl	8003f64 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80027f0:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 80027f2:	4a3a      	ldr	r2, [pc, #232]	@ (80028dc <HAL_UART_MspInit+0x290>)
 80027f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80027f6:	4b38      	ldr	r3, [pc, #224]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 80027f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002804:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800280a:	4b33      	ldr	r3, [pc, #204]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 800280c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002810:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002812:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002818:	4b2f      	ldr	r3, [pc, #188]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800281e:	4b2e      	ldr	r3, [pc, #184]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 8002820:	2200      	movs	r2, #0
 8002822:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002824:	4b2c      	ldr	r3, [pc, #176]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 8002826:	2200      	movs	r2, #0
 8002828:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282a:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 800282c:	2200      	movs	r2, #0
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002830:	4829      	ldr	r0, [pc, #164]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 8002832:	f000 ff89 	bl	8003748 <HAL_DMA_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 800283c:	f7ff f9c6 	bl	8001bcc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 8002844:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002846:	4a24      	ldr	r2, [pc, #144]	@ (80028d8 <HAL_UART_MspInit+0x28c>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800284c:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 800284e:	4a25      	ldr	r2, [pc, #148]	@ (80028e4 <HAL_UART_MspInit+0x298>)
 8002850:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002852:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 8002854:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002858:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800285a:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002866:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 8002868:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800286c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286e:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800287a:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002880:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 8002882:	2200      	movs	r2, #0
 8002884:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002886:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800288c:	4814      	ldr	r0, [pc, #80]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 800288e:	f000 ff5b 	bl	8003748 <HAL_DMA_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_MspInit+0x250>
      Error_Handler();
 8002898:	f7ff f998 	bl	8001bcc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 80028a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80028a2:	4a0f      	ldr	r2, [pc, #60]	@ (80028e0 <HAL_UART_MspInit+0x294>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	2025      	movs	r0, #37	@ 0x25
 80028ae:	f000 ff14 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028b2:	2025      	movs	r0, #37	@ 0x25
 80028b4:	f000 ff2d 	bl	8003712 <HAL_NVIC_EnableIRQ>
}
 80028b8:	e08a      	b.n	80029d0 <HAL_UART_MspInit+0x384>
 80028ba:	bf00      	nop
 80028bc:	40004c00 	.word	0x40004c00
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40005000 	.word	0x40005000
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020c00 	.word	0x40020c00
 80028d4:	40011000 	.word	0x40011000
 80028d8:	20000530 	.word	0x20000530
 80028dc:	40026440 	.word	0x40026440
 80028e0:	20000590 	.word	0x20000590
 80028e4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3a      	ldr	r2, [pc, #232]	@ (80029d8 <HAL_UART_MspInit+0x38c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d134      	bne.n	800295c <HAL_UART_MspInit+0x310>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	4b39      	ldr	r3, [pc, #228]	@ (80029dc <HAL_UART_MspInit+0x390>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	4a38      	ldr	r2, [pc, #224]	@ (80029dc <HAL_UART_MspInit+0x390>)
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002900:	6413      	str	r3, [r2, #64]	@ 0x40
 8002902:	4b36      	ldr	r3, [pc, #216]	@ (80029dc <HAL_UART_MspInit+0x390>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	4b32      	ldr	r3, [pc, #200]	@ (80029dc <HAL_UART_MspInit+0x390>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a31      	ldr	r2, [pc, #196]	@ (80029dc <HAL_UART_MspInit+0x390>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b2f      	ldr	r3, [pc, #188]	@ (80029dc <HAL_UART_MspInit+0x390>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800292a:	230c      	movs	r3, #12
 800292c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800293a:	2307      	movs	r3, #7
 800293c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002942:	4619      	mov	r1, r3
 8002944:	4826      	ldr	r0, [pc, #152]	@ (80029e0 <HAL_UART_MspInit+0x394>)
 8002946:	f001 fb0d 	bl	8003f64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	2026      	movs	r0, #38	@ 0x26
 8002950:	f000 fec3 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002954:	2026      	movs	r0, #38	@ 0x26
 8002956:	f000 fedc 	bl	8003712 <HAL_NVIC_EnableIRQ>
}
 800295a:	e039      	b.n	80029d0 <HAL_UART_MspInit+0x384>
  else if(uartHandle->Instance==USART3)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a20      	ldr	r2, [pc, #128]	@ (80029e4 <HAL_UART_MspInit+0x398>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d134      	bne.n	80029d0 <HAL_UART_MspInit+0x384>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b1c      	ldr	r3, [pc, #112]	@ (80029dc <HAL_UART_MspInit+0x390>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <HAL_UART_MspInit+0x390>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_UART_MspInit+0x390>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_UART_MspInit+0x390>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <HAL_UART_MspInit+0x390>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <HAL_UART_MspInit+0x390>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800299e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80029a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029b0:	2307      	movs	r3, #7
 80029b2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029b8:	4619      	mov	r1, r3
 80029ba:	480b      	ldr	r0, [pc, #44]	@ (80029e8 <HAL_UART_MspInit+0x39c>)
 80029bc:	f001 fad2 	bl	8003f64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	2027      	movs	r0, #39	@ 0x27
 80029c6:	f000 fe88 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029ca:	2027      	movs	r0, #39	@ 0x27
 80029cc:	f000 fea1 	bl	8003712 <HAL_NVIC_EnableIRQ>
}
 80029d0:	bf00      	nop
 80029d2:	3748      	adds	r7, #72	@ 0x48
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40004400 	.word	0x40004400
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40004800 	.word	0x40004800
 80029e8:	40020400 	.word	0x40020400

080029ec <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80029f0:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80029f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80029fa:	2204      	movs	r2, #4
 80029fc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80029fe:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a00:	2202      	movs	r2, #2
 8002a02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002a22:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	@ (8002a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a30:	f001 fc7f 	bl	8004332 <HAL_PCD_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002a3a:	f7ff f8c7 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200005f0 	.word	0x200005f0

08002a48 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	@ 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a68:	d132      	bne.n	8002ad0 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_PCD_MspInit+0x90>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_PCD_MspInit+0x90>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_PCD_MspInit+0x90>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a94:	2303      	movs	r3, #3
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a98:	230a      	movs	r3, #10
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480e      	ldr	r0, [pc, #56]	@ (8002adc <HAL_PCD_MspInit+0x94>)
 8002aa4:	f001 fa5e 	bl	8003f64 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_PCD_MspInit+0x90>)
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad8 <HAL_PCD_MspInit+0x90>)
 8002aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab2:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <HAL_PCD_MspInit+0x90>)
 8002aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abc:	4a06      	ldr	r2, [pc, #24]	@ (8002ad8 <HAL_PCD_MspInit+0x90>)
 8002abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac4:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <HAL_PCD_MspInit+0x90>)
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	@ 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020000 	.word	0x40020000

08002ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ae4:	f7ff fc5a 	bl	800239c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ae8:	480c      	ldr	r0, [pc, #48]	@ (8002b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aea:	490d      	ldr	r1, [pc, #52]	@ (8002b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aec:	4a0d      	ldr	r2, [pc, #52]	@ (8002b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b00:	4c0a      	ldr	r4, [pc, #40]	@ (8002b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f005 fb77 	bl	8008200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b12:	f7fe fbd9 	bl	80012c8 <main>
  bx  lr    
 8002b16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002b24:	08008c94 	.word	0x08008c94
  ldr r2, =_sbss
 8002b28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002b2c:	20000c20 	.word	0x20000c20

08002b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b30:	e7fe      	b.n	8002b30 <ADC_IRQHandler>
	...

08002b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b74 <HAL_Init+0x40>)
 8002b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <HAL_Init+0x40>)
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	@ (8002b74 <HAL_Init+0x40>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f000 fdb1 	bl	80036c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b62:	200f      	movs	r0, #15
 8002b64:	f000 f808 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b68:	f7ff fb30 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00

08002b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b80:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_InitTick+0x54>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <HAL_InitTick+0x58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fdc9 	bl	800372e <HAL_SYSTICK_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00e      	b.n	8002bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d80a      	bhi.n	8002bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f000 fd91 	bl	80036da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4a06      	ldr	r2, [pc, #24]	@ (8002bd4 <HAL_InitTick+0x5c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000008 	.word	0x20000008
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000008 	.word	0x20000008
 8002bfc:	20000ad4 	.word	0x20000ad4

08002c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000ad4 	.word	0x20000ad4

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff ffee 	bl	8002c00 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000008 	.word	0x20000008

08002c60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e033      	b.n	8002cde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe f8da 	bl	8000e38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ca6:	f023 0302 	bic.w	r3, r3, #2
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fab8 	bl	8003228 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cce:	e001      	b.n	8002cd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_Start_DMA+0x1e>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0e9      	b.n	8002eda <HAL_ADC_Start_DMA+0x1f2>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d018      	beq.n	8002d4e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d2c:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee4 <HAL_ADC_Start_DMA+0x1fc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6d      	ldr	r2, [pc, #436]	@ (8002ee8 <HAL_ADC_Start_DMA+0x200>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0c9a      	lsrs	r2, r3, #18
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d40:	e002      	b.n	8002d48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f9      	bne.n	8002d42 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d5c:	d107      	bne.n	8002d6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d6c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f040 80a1 	bne.w	8002ec0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d86:	f023 0301 	bic.w	r3, r3, #1
 8002d8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002da8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dbc:	d106      	bne.n	8002dcc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	f023 0206 	bic.w	r2, r3, #6
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002dca:	e002      	b.n	8002dd2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dda:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <HAL_ADC_Start_DMA+0x204>)
 8002ddc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de2:	4a43      	ldr	r2, [pc, #268]	@ (8002ef0 <HAL_ADC_Start_DMA+0x208>)
 8002de4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dea:	4a42      	ldr	r2, [pc, #264]	@ (8002ef4 <HAL_ADC_Start_DMA+0x20c>)
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	4a41      	ldr	r2, [pc, #260]	@ (8002ef8 <HAL_ADC_Start_DMA+0x210>)
 8002df4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002e0e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e1e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	334c      	adds	r3, #76	@ 0x4c
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f000 fd38 	bl	80038a4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d12a      	bne.n	8002e96 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	@ (8002efc <HAL_ADC_Start_DMA+0x214>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d015      	beq.n	8002e76 <HAL_ADC_Start_DMA+0x18e>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f00 <HAL_ADC_Start_DMA+0x218>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d105      	bne.n	8002e60 <HAL_ADC_Start_DMA+0x178>
 8002e54:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <HAL_ADC_Start_DMA+0x204>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a27      	ldr	r2, [pc, #156]	@ (8002f04 <HAL_ADC_Start_DMA+0x21c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d136      	bne.n	8002ed8 <HAL_ADC_Start_DMA+0x1f0>
 8002e6a:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <HAL_ADC_Start_DMA+0x204>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d130      	bne.n	8002ed8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d129      	bne.n	8002ed8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	e020      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <HAL_ADC_Start_DMA+0x214>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_ADC_Start_DMA+0x1f0>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d114      	bne.n	8002ed8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f043 0210 	orr.w	r2, r3, #16
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	431bde83 	.word	0x431bde83
 8002eec:	40012300 	.word	0x40012300
 8002ef0:	08003421 	.word	0x08003421
 8002ef4:	080034db 	.word	0x080034db
 8002ef8:	080034f7 	.word	0x080034f7
 8002efc:	40012000 	.word	0x40012000
 8002f00:	40012100 	.word	0x40012100
 8002f04:	40012200 	.word	0x40012200

08002f08 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_Stop_DMA+0x1a>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e048      	b.n	8002fb4 <HAL_ADC_Stop_DMA+0xac>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d130      	bne.n	8002faa <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f56:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d10f      	bne.n	8002f86 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fcf2 	bl	8003954 <HAL_DMA_Abort>
 8002f70:	4603      	mov	r3, r0
 8002f72:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002f94:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x1c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e105      	b.n	800320c <HAL_ADC_ConfigChannel+0x228>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b09      	cmp	r3, #9
 800300e:	d925      	bls.n	800305c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68d9      	ldr	r1, [r3, #12]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	3b1e      	subs	r3, #30
 8003026:	2207      	movs	r2, #7
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43da      	mvns	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	400a      	ands	r2, r1
 8003034:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68d9      	ldr	r1, [r3, #12]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	b29b      	uxth	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	4603      	mov	r3, r0
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4403      	add	r3, r0
 800304e:	3b1e      	subs	r3, #30
 8003050:	409a      	lsls	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	e022      	b.n	80030a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6919      	ldr	r1, [r3, #16]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	2207      	movs	r2, #7
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	400a      	ands	r2, r1
 800307e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6919      	ldr	r1, [r3, #16]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	4618      	mov	r0, r3
 8003092:	4603      	mov	r3, r0
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4403      	add	r3, r0
 8003098:	409a      	lsls	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d824      	bhi.n	80030f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3b05      	subs	r3, #5
 80030bc:	221f      	movs	r2, #31
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	3b05      	subs	r3, #5
 80030e6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80030f2:	e04c      	b.n	800318e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d824      	bhi.n	8003146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	3b23      	subs	r3, #35	@ 0x23
 800310e:	221f      	movs	r2, #31
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43da      	mvns	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	400a      	ands	r2, r1
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	4618      	mov	r0, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	3b23      	subs	r3, #35	@ 0x23
 8003138:	fa00 f203 	lsl.w	r2, r0, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30
 8003144:	e023      	b.n	800318e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	3b41      	subs	r3, #65	@ 0x41
 8003158:	221f      	movs	r2, #31
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	400a      	ands	r2, r1
 8003166:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	4618      	mov	r0, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	3b41      	subs	r3, #65	@ 0x41
 8003182:	fa00 f203 	lsl.w	r2, r0, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318e:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <HAL_ADC_ConfigChannel+0x234>)
 8003190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a21      	ldr	r2, [pc, #132]	@ (800321c <HAL_ADC_ConfigChannel+0x238>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d109      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x1cc>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b12      	cmp	r3, #18
 80031a2:	d105      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a19      	ldr	r2, [pc, #100]	@ (800321c <HAL_ADC_ConfigChannel+0x238>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d123      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x21e>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d003      	beq.n	80031ca <HAL_ADC_ConfigChannel+0x1e6>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b11      	cmp	r3, #17
 80031c8:	d11b      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d111      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031de:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <HAL_ADC_ConfigChannel+0x23c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <HAL_ADC_ConfigChannel+0x240>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	0c9a      	lsrs	r2, r3, #18
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031f4:	e002      	b.n	80031fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f9      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40012300 	.word	0x40012300
 800321c:	40012000 	.word	0x40012000
 8003220:	20000000 	.word	0x20000000
 8003224:	431bde83 	.word	0x431bde83

08003228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003230:	4b79      	ldr	r3, [pc, #484]	@ (8003418 <ADC_Init+0x1f0>)
 8003232:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800325c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	4a58      	ldr	r2, [pc, #352]	@ (800341c <ADC_Init+0x1f4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d022      	beq.n	8003306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	e00f      	b.n	8003326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003324:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0202 	bic.w	r2, r2, #2
 8003334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6899      	ldr	r1, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7e1b      	ldrb	r3, [r3, #24]
 8003340:	005a      	lsls	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003362:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	3b01      	subs	r3, #1
 8003380:	035a      	lsls	r2, r3, #13
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	e007      	b.n	800339c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800339a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	051a      	lsls	r2, r3, #20
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033de:	025a      	lsls	r2, r3, #9
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6899      	ldr	r1, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	029a      	lsls	r2, r3, #10
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40012300 	.word	0x40012300
 800341c:	0f000001 	.word	0x0f000001

08003420 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d13c      	bne.n	80034b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d12b      	bne.n	80034ac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d127      	bne.n	80034ac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003474:	2b00      	cmp	r3, #0
 8003476:	d119      	bne.n	80034ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0220 	bic.w	r2, r2, #32
 8003486:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7fd fef3 	bl	8001298 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034b2:	e00e      	b.n	80034d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff fd85 	bl	8002fd0 <HAL_ADC_ErrorCallback>
}
 80034c6:	e004      	b.n	80034d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff fd67 	bl	8002fbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003502:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2240      	movs	r2, #64	@ 0x40
 8003508:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fd5a 	bl	8002fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003540:	4013      	ands	r3, r2
 8003542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800354c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003556:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <__NVIC_SetPriorityGrouping+0x44>)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	60d3      	str	r3, [r2, #12]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003570:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <__NVIC_GetPriorityGrouping+0x18>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 0307 	and.w	r3, r3, #7
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	2b00      	cmp	r3, #0
 8003598:	db0b      	blt.n	80035b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 021f 	and.w	r2, r3, #31
 80035a0:	4907      	ldr	r1, [pc, #28]	@ (80035c0 <__NVIC_EnableIRQ+0x38>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2001      	movs	r0, #1
 80035aa:	fa00 f202 	lsl.w	r2, r0, r2
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db0a      	blt.n	80035ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	490c      	ldr	r1, [pc, #48]	@ (8003610 <__NVIC_SetPriority+0x4c>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	440b      	add	r3, r1
 80035e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ec:	e00a      	b.n	8003604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4908      	ldr	r1, [pc, #32]	@ (8003614 <__NVIC_SetPriority+0x50>)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3b04      	subs	r3, #4
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	440b      	add	r3, r1
 8003602:	761a      	strb	r2, [r3, #24]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	@ 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f1c3 0307 	rsb	r3, r3, #7
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf28      	it	cs
 8003636:	2304      	movcs	r3, #4
 8003638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3304      	adds	r3, #4
 800363e:	2b06      	cmp	r3, #6
 8003640:	d902      	bls.n	8003648 <NVIC_EncodePriority+0x30>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3b03      	subs	r3, #3
 8003646:	e000      	b.n	800364a <NVIC_EncodePriority+0x32>
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43da      	mvns	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	401a      	ands	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003660:	f04f 31ff 	mov.w	r1, #4294967295
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43d9      	mvns	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	4313      	orrs	r3, r2
         );
}
 8003672:	4618      	mov	r0, r3
 8003674:	3724      	adds	r7, #36	@ 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003690:	d301      	bcc.n	8003696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003692:	2301      	movs	r3, #1
 8003694:	e00f      	b.n	80036b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003696:	4a0a      	ldr	r2, [pc, #40]	@ (80036c0 <SysTick_Config+0x40>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800369e:	210f      	movs	r1, #15
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f7ff ff8e 	bl	80035c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <SysTick_Config+0x40>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ae:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <SysTick_Config+0x40>)
 80036b0:	2207      	movs	r2, #7
 80036b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	e000e010 	.word	0xe000e010

080036c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff29 	bl	8003524 <__NVIC_SetPriorityGrouping>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ec:	f7ff ff3e 	bl	800356c <__NVIC_GetPriorityGrouping>
 80036f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f7ff ff8e 	bl	8003618 <NVIC_EncodePriority>
 80036fc:	4602      	mov	r2, r0
 80036fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff5d 	bl	80035c4 <__NVIC_SetPriority>
}
 800370a:	bf00      	nop
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff31 	bl	8003588 <__NVIC_EnableIRQ>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ffa2 	bl	8003680 <SysTick_Config>
 800373c:	4603      	mov	r3, r0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7ff fa54 	bl	8002c00 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e099      	b.n	8003898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003784:	e00f      	b.n	80037a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003786:	f7ff fa3b 	bl	8002c00 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b05      	cmp	r3, #5
 8003792:	d908      	bls.n	80037a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2203      	movs	r2, #3
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e078      	b.n	8003898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e8      	bne.n	8003786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4b38      	ldr	r3, [pc, #224]	@ (80038a0 <HAL_DMA_Init+0x158>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d107      	bne.n	8003810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	4313      	orrs	r3, r2
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	2b04      	cmp	r3, #4
 8003838:	d117      	bne.n	800386a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fb0d 	bl	8003e6c <DMA_CheckFifoParam>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2240      	movs	r2, #64	@ 0x40
 800385c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003866:	2301      	movs	r3, #1
 8003868:	e016      	b.n	8003898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fac4 	bl	8003e00 <DMA_CalcBaseAndBitshift>
 8003878:	4603      	mov	r3, r0
 800387a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	223f      	movs	r2, #63	@ 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	f010803f 	.word	0xf010803f

080038a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_DMA_Start_IT+0x26>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e040      	b.n	800394c <HAL_DMA_Start_IT+0xa8>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d12f      	bne.n	800393e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fa56 	bl	8003da4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fc:	223f      	movs	r2, #63	@ 0x3f
 80038fe:	409a      	lsls	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0216 	orr.w	r2, r2, #22
 8003912:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d007      	beq.n	800392c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0208 	orr.w	r2, r2, #8
 800392a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e005      	b.n	800394a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003946:	2302      	movs	r3, #2
 8003948:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003960:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003962:	f7ff f94d 	bl	8002c00 <HAL_GetTick>
 8003966:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d008      	beq.n	8003986 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2280      	movs	r2, #128	@ 0x80
 8003978:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e052      	b.n	8003a2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0216 	bic.w	r2, r2, #22
 8003994:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_DMA_Abort+0x62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0208 	bic.w	r2, r2, #8
 80039c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d6:	e013      	b.n	8003a00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039d8:	f7ff f912 	bl	8002c00 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d90c      	bls.n	8003a00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2203      	movs	r2, #3
 80039f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e015      	b.n	8003a2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e4      	bne.n	80039d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	223f      	movs	r2, #63	@ 0x3f
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2280      	movs	r2, #128	@ 0x80
 8003a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00c      	b.n	8003a6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2205      	movs	r2, #5
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a84:	4b8e      	ldr	r3, [pc, #568]	@ (8003cc0 <HAL_DMA_IRQHandler+0x248>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a8e      	ldr	r2, [pc, #568]	@ (8003cc4 <HAL_DMA_IRQHandler+0x24c>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0a9b      	lsrs	r3, r3, #10
 8003a90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01a      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0204 	bic.w	r2, r2, #4
 8003aca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	2201      	movs	r2, #1
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d012      	beq.n	8003b1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2201      	movs	r2, #1
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b12:	f043 0202 	orr.w	r2, r3, #2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1e:	2204      	movs	r2, #4
 8003b20:	409a      	lsls	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d012      	beq.n	8003b50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	2210      	movs	r2, #16
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d043      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d03c      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b72:	2210      	movs	r2, #16
 8003b74:	409a      	lsls	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d018      	beq.n	8003bba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d024      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
 8003ba6:	e01f      	b.n	8003be8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01b      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
 8003bb8:	e016      	b.n	8003be8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d107      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0208 	bic.w	r2, r2, #8
 8003bd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	2220      	movs	r2, #32
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 808f 	beq.w	8003d18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8087 	beq.w	8003d18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0e:	2220      	movs	r2, #32
 8003c10:	409a      	lsls	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d136      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0216 	bic.w	r2, r2, #22
 8003c30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <HAL_DMA_IRQHandler+0x1da>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0208 	bic.w	r2, r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	223f      	movs	r2, #63	@ 0x3f
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d07e      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4798      	blx	r3
        }
        return;
 8003c8e:	e079      	b.n	8003d84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01d      	beq.n	8003cda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10d      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d031      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4798      	blx	r3
 8003cbc:	e02c      	b.n	8003d18 <HAL_DMA_IRQHandler+0x2a0>
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d023      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
 8003cd8:	e01e      	b.n	8003d18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10f      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0210 	bic.w	r2, r2, #16
 8003cf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d032      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d022      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2205      	movs	r2, #5
 8003d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d307      	bcc.n	8003d60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f2      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x2cc>
 8003d5e:	e000      	b.n	8003d62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
 8003d82:	e000      	b.n	8003d86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d84:	bf00      	nop
    }
  }
}
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b40      	cmp	r3, #64	@ 0x40
 8003dd0:	d108      	bne.n	8003de4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003de2:	e007      	b.n	8003df4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	60da      	str	r2, [r3, #12]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3b10      	subs	r3, #16
 8003e10:	4a14      	ldr	r2, [pc, #80]	@ (8003e64 <DMA_CalcBaseAndBitshift+0x64>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e1a:	4a13      	ldr	r2, [pc, #76]	@ (8003e68 <DMA_CalcBaseAndBitshift+0x68>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d909      	bls.n	8003e42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e36:	f023 0303 	bic.w	r3, r3, #3
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e40:	e007      	b.n	8003e52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e4a:	f023 0303 	bic.w	r3, r3, #3
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	aaaaaaab 	.word	0xaaaaaaab
 8003e68:	08008b48 	.word	0x08008b48

08003e6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11f      	bne.n	8003ec6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d856      	bhi.n	8003f3a <DMA_CheckFifoParam+0xce>
 8003e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <DMA_CheckFifoParam+0x28>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb7 	.word	0x08003eb7
 8003e9c:	08003ea5 	.word	0x08003ea5
 8003ea0:	08003f3b 	.word	0x08003f3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d046      	beq.n	8003f3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb4:	e043      	b.n	8003f3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ebe:	d140      	bne.n	8003f42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec4:	e03d      	b.n	8003f42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ece:	d121      	bne.n	8003f14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d837      	bhi.n	8003f46 <DMA_CheckFifoParam+0xda>
 8003ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <DMA_CheckFifoParam+0x70>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003ef3 	.word	0x08003ef3
 8003ee4:	08003eed 	.word	0x08003eed
 8003ee8:	08003f05 	.word	0x08003f05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e030      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d025      	beq.n	8003f4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f02:	e022      	b.n	8003f4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f0c:	d11f      	bne.n	8003f4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f12:	e01c      	b.n	8003f4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d903      	bls.n	8003f22 <DMA_CheckFifoParam+0xb6>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d003      	beq.n	8003f28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f20:	e018      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      break;
 8003f26:	e015      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00e      	beq.n	8003f52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      break;
 8003f38:	e00b      	b.n	8003f52 <DMA_CheckFifoParam+0xe6>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e00a      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e008      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f42:	bf00      	nop
 8003f44:	e006      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f46:	bf00      	nop
 8003f48:	e004      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <DMA_CheckFifoParam+0xe8>
      break;
 8003f52:	bf00      	nop
    }
  } 
  
  return status; 
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	@ 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	e16b      	b.n	8004258 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f80:	2201      	movs	r2, #1
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	f040 815a 	bne.w	8004252 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d005      	beq.n	8003fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d130      	bne.n	8004018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 0201 	and.w	r2, r3, #1
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b03      	cmp	r3, #3
 8004022:	d017      	beq.n	8004054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d123      	bne.n	80040a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	08da      	lsrs	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3208      	adds	r2, #8
 8004068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	220f      	movs	r2, #15
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	08da      	lsrs	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3208      	adds	r2, #8
 80040a2:	69b9      	ldr	r1, [r7, #24]
 80040a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0203 	and.w	r2, r3, #3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80b4 	beq.w	8004252 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	4b60      	ldr	r3, [pc, #384]	@ (8004270 <HAL_GPIO_Init+0x30c>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004270 <HAL_GPIO_Init+0x30c>)
 80040f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004270 <HAL_GPIO_Init+0x30c>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004106:	4a5b      	ldr	r2, [pc, #364]	@ (8004274 <HAL_GPIO_Init+0x310>)
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	3302      	adds	r3, #2
 800410e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	220f      	movs	r2, #15
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a52      	ldr	r2, [pc, #328]	@ (8004278 <HAL_GPIO_Init+0x314>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02b      	beq.n	800418a <HAL_GPIO_Init+0x226>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a51      	ldr	r2, [pc, #324]	@ (800427c <HAL_GPIO_Init+0x318>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d025      	beq.n	8004186 <HAL_GPIO_Init+0x222>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a50      	ldr	r2, [pc, #320]	@ (8004280 <HAL_GPIO_Init+0x31c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01f      	beq.n	8004182 <HAL_GPIO_Init+0x21e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4f      	ldr	r2, [pc, #316]	@ (8004284 <HAL_GPIO_Init+0x320>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d019      	beq.n	800417e <HAL_GPIO_Init+0x21a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4e      	ldr	r2, [pc, #312]	@ (8004288 <HAL_GPIO_Init+0x324>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_GPIO_Init+0x216>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a4d      	ldr	r2, [pc, #308]	@ (800428c <HAL_GPIO_Init+0x328>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00d      	beq.n	8004176 <HAL_GPIO_Init+0x212>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4c      	ldr	r2, [pc, #304]	@ (8004290 <HAL_GPIO_Init+0x32c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <HAL_GPIO_Init+0x20e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a4b      	ldr	r2, [pc, #300]	@ (8004294 <HAL_GPIO_Init+0x330>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_GPIO_Init+0x20a>
 800416a:	2307      	movs	r3, #7
 800416c:	e00e      	b.n	800418c <HAL_GPIO_Init+0x228>
 800416e:	2308      	movs	r3, #8
 8004170:	e00c      	b.n	800418c <HAL_GPIO_Init+0x228>
 8004172:	2306      	movs	r3, #6
 8004174:	e00a      	b.n	800418c <HAL_GPIO_Init+0x228>
 8004176:	2305      	movs	r3, #5
 8004178:	e008      	b.n	800418c <HAL_GPIO_Init+0x228>
 800417a:	2304      	movs	r3, #4
 800417c:	e006      	b.n	800418c <HAL_GPIO_Init+0x228>
 800417e:	2303      	movs	r3, #3
 8004180:	e004      	b.n	800418c <HAL_GPIO_Init+0x228>
 8004182:	2302      	movs	r3, #2
 8004184:	e002      	b.n	800418c <HAL_GPIO_Init+0x228>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_GPIO_Init+0x228>
 800418a:	2300      	movs	r3, #0
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	f002 0203 	and.w	r2, r2, #3
 8004192:	0092      	lsls	r2, r2, #2
 8004194:	4093      	lsls	r3, r2
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800419c:	4935      	ldr	r1, [pc, #212]	@ (8004274 <HAL_GPIO_Init+0x310>)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	3302      	adds	r3, #2
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004298 <HAL_GPIO_Init+0x334>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ce:	4a32      	ldr	r2, [pc, #200]	@ (8004298 <HAL_GPIO_Init+0x334>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041d4:	4b30      	ldr	r3, [pc, #192]	@ (8004298 <HAL_GPIO_Init+0x334>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041f8:	4a27      	ldr	r2, [pc, #156]	@ (8004298 <HAL_GPIO_Init+0x334>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041fe:	4b26      	ldr	r3, [pc, #152]	@ (8004298 <HAL_GPIO_Init+0x334>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004222:	4a1d      	ldr	r2, [pc, #116]	@ (8004298 <HAL_GPIO_Init+0x334>)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004228:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <HAL_GPIO_Init+0x334>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800424c:	4a12      	ldr	r2, [pc, #72]	@ (8004298 <HAL_GPIO_Init+0x334>)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3301      	adds	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b0f      	cmp	r3, #15
 800425c:	f67f ae90 	bls.w	8003f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3724      	adds	r7, #36	@ 0x24
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	40013800 	.word	0x40013800
 8004278:	40020000 	.word	0x40020000
 800427c:	40020400 	.word	0x40020400
 8004280:	40020800 	.word	0x40020800
 8004284:	40020c00 	.word	0x40020c00
 8004288:	40021000 	.word	0x40021000
 800428c:	40021400 	.word	0x40021400
 8004290:	40021800 	.word	0x40021800
 8004294:	40021c00 	.word	0x40021c00
 8004298:	40013c00 	.word	0x40013c00

0800429c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e001      	b.n	80042be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
 80042d8:	4613      	mov	r3, r2
 80042da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042dc:	787b      	ldrb	r3, [r7, #1]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042e8:	e003      	b.n	80042f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	041a      	lsls	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	619a      	str	r2, [r3, #24]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004310:	887a      	ldrh	r2, [r7, #2]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4013      	ands	r3, r2
 8004316:	041a      	lsls	r2, r3, #16
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	43d9      	mvns	r1, r3
 800431c:	887b      	ldrh	r3, [r7, #2]
 800431e:	400b      	ands	r3, r1
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	619a      	str	r2, [r3, #24]
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af02      	add	r7, sp, #8
 8004338:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e101      	b.n	8004548 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fe fb72 	bl	8002a48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2203      	movs	r2, #3
 8004368:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004372:	d102      	bne.n	800437a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f002 ff3a 	bl	80071f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7c1a      	ldrb	r2, [r3, #16]
 800438c:	f88d 2000 	strb.w	r2, [sp]
 8004390:	3304      	adds	r3, #4
 8004392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004394:	f002 fecc 	bl	8007130 <USB_CoreInit>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e0ce      	b.n	8004548 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f002 ff32 	bl	800721a <USB_SetCurrentMode>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e0bf      	b.n	8004548 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c8:	2300      	movs	r3, #0
 80043ca:	73fb      	strb	r3, [r7, #15]
 80043cc:	e04a      	b.n	8004464 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3315      	adds	r3, #21
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043e2:	7bfa      	ldrb	r2, [r7, #15]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	3314      	adds	r3, #20
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043f6:	7bfa      	ldrb	r2, [r7, #15]
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	b298      	uxth	r0, r3
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	332e      	adds	r3, #46	@ 0x2e
 800440a:	4602      	mov	r2, r0
 800440c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800440e:	7bfa      	ldrb	r2, [r7, #15]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3318      	adds	r3, #24
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	331c      	adds	r3, #28
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004436:	7bfa      	ldrb	r2, [r7, #15]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3320      	adds	r3, #32
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800444a:	7bfa      	ldrb	r2, [r7, #15]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3324      	adds	r3, #36	@ 0x24
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	3301      	adds	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	791b      	ldrb	r3, [r3, #4]
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	429a      	cmp	r2, r3
 800446c:	d3af      	bcc.n	80043ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e044      	b.n	80044fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004474:	7bfa      	ldrb	r2, [r7, #15]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800449c:	7bfa      	ldrb	r2, [r7, #15]
 800449e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044a0:	7bfa      	ldrb	r2, [r7, #15]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044b6:	7bfa      	ldrb	r2, [r7, #15]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044cc:	7bfa      	ldrb	r2, [r7, #15]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	3301      	adds	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	429a      	cmp	r2, r3
 8004506:	d3b5      	bcc.n	8004474 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7c1a      	ldrb	r2, [r3, #16]
 8004510:	f88d 2000 	strb.w	r2, [sp]
 8004514:	3304      	adds	r3, #4
 8004516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004518:	f002 fecc 	bl	80072b4 <USB_DevInit>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e00c      	b.n	8004548 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f003 f894 	bl	800766e <USB_DevDisconnect>

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e267      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d075      	beq.n	800465a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800456e:	4b88      	ldr	r3, [pc, #544]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b04      	cmp	r3, #4
 8004578:	d00c      	beq.n	8004594 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004582:	2b08      	cmp	r3, #8
 8004584:	d112      	bne.n	80045ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004586:	4b82      	ldr	r3, [pc, #520]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004592:	d10b      	bne.n	80045ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	4b7e      	ldr	r3, [pc, #504]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05b      	beq.n	8004658 <HAL_RCC_OscConfig+0x108>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d157      	bne.n	8004658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e242      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b4:	d106      	bne.n	80045c4 <HAL_RCC_OscConfig+0x74>
 80045b6:	4b76      	ldr	r3, [pc, #472]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a75      	ldr	r2, [pc, #468]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e01d      	b.n	8004600 <HAL_RCC_OscConfig+0xb0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x98>
 80045ce:	4b70      	ldr	r3, [pc, #448]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b6d      	ldr	r3, [pc, #436]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6c      	ldr	r2, [pc, #432]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0xb0>
 80045e8:	4b69      	ldr	r3, [pc, #420]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a68      	ldr	r2, [pc, #416]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b66      	ldr	r3, [pc, #408]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a65      	ldr	r2, [pc, #404]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fe fafa 	bl	8002c00 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe faf6 	bl	8002c00 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	@ 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e207      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	4b5b      	ldr	r3, [pc, #364]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0xc0>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fe fae6 	bl	8002c00 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004638:	f7fe fae2 	bl	8002c00 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	@ 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e1f3      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	4b51      	ldr	r3, [pc, #324]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0xe8>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d063      	beq.n	800472e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004666:	4b4a      	ldr	r3, [pc, #296]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b47      	ldr	r3, [pc, #284]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800467a:	2b08      	cmp	r3, #8
 800467c:	d11c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467e:	4b44      	ldr	r3, [pc, #272]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d116      	bne.n	80046b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	4b41      	ldr	r3, [pc, #260]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_RCC_OscConfig+0x152>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d001      	beq.n	80046a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e1c7      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4937      	ldr	r1, [pc, #220]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	e03a      	b.n	800472e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c0:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <HAL_RCC_OscConfig+0x244>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fe fa9b 	bl	8002c00 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ce:	f7fe fa97 	bl	8002c00 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e1a8      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ec:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4925      	ldr	r1, [pc, #148]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]
 8004700:	e015      	b.n	800472e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004702:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <HAL_RCC_OscConfig+0x244>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fe fa7a 	bl	8002c00 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004710:	f7fe fa76 	bl	8002c00 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e187      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d036      	beq.n	80047a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004742:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <HAL_RCC_OscConfig+0x248>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fe fa5a 	bl	8002c00 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004750:	f7fe fa56 	bl	8002c00 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e167      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x200>
 800476e:	e01b      	b.n	80047a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004770:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <HAL_RCC_OscConfig+0x248>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004776:	f7fe fa43 	bl	8002c00 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	e00e      	b.n	800479c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477e:	f7fe fa3f 	bl	8002c00 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d907      	bls.n	800479c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e150      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
 8004790:	40023800 	.word	0x40023800
 8004794:	42470000 	.word	0x42470000
 8004798:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	4b88      	ldr	r3, [pc, #544]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1ea      	bne.n	800477e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8097 	beq.w	80048e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ba:	4b81      	ldr	r3, [pc, #516]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	4b7d      	ldr	r3, [pc, #500]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	4a7c      	ldr	r2, [pc, #496]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80047d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d6:	4b7a      	ldr	r3, [pc, #488]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e2:	2301      	movs	r3, #1
 80047e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e6:	4b77      	ldr	r3, [pc, #476]	@ (80049c4 <HAL_RCC_OscConfig+0x474>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d118      	bne.n	8004824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f2:	4b74      	ldr	r3, [pc, #464]	@ (80049c4 <HAL_RCC_OscConfig+0x474>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a73      	ldr	r2, [pc, #460]	@ (80049c4 <HAL_RCC_OscConfig+0x474>)
 80047f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fe:	f7fe f9ff 	bl	8002c00 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004806:	f7fe f9fb 	bl	8002c00 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e10c      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	4b6a      	ldr	r3, [pc, #424]	@ (80049c4 <HAL_RCC_OscConfig+0x474>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d106      	bne.n	800483a <HAL_RCC_OscConfig+0x2ea>
 800482c:	4b64      	ldr	r3, [pc, #400]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004830:	4a63      	ldr	r2, [pc, #396]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6713      	str	r3, [r2, #112]	@ 0x70
 8004838:	e01c      	b.n	8004874 <HAL_RCC_OscConfig+0x324>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b05      	cmp	r3, #5
 8004840:	d10c      	bne.n	800485c <HAL_RCC_OscConfig+0x30c>
 8004842:	4b5f      	ldr	r3, [pc, #380]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	4a5e      	ldr	r2, [pc, #376]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004848:	f043 0304 	orr.w	r3, r3, #4
 800484c:	6713      	str	r3, [r2, #112]	@ 0x70
 800484e:	4b5c      	ldr	r3, [pc, #368]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004852:	4a5b      	ldr	r2, [pc, #364]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6713      	str	r3, [r2, #112]	@ 0x70
 800485a:	e00b      	b.n	8004874 <HAL_RCC_OscConfig+0x324>
 800485c:	4b58      	ldr	r3, [pc, #352]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004860:	4a57      	ldr	r2, [pc, #348]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	@ 0x70
 8004868:	4b55      	ldr	r3, [pc, #340]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	4a54      	ldr	r2, [pc, #336]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800486e:	f023 0304 	bic.w	r3, r3, #4
 8004872:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d015      	beq.n	80048a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fe f9c0 	bl	8002c00 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004882:	e00a      	b.n	800489a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004884:	f7fe f9bc 	bl	8002c00 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0cb      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489a:	4b49      	ldr	r3, [pc, #292]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0ee      	beq.n	8004884 <HAL_RCC_OscConfig+0x334>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a8:	f7fe f9aa 	bl	8002c00 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fe f9a6 	bl	8002c00 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0b5      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c6:	4b3e      	ldr	r3, [pc, #248]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1ee      	bne.n	80048b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d8:	4b39      	ldr	r3, [pc, #228]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	4a38      	ldr	r2, [pc, #224]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80048de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80a1 	beq.w	8004a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ee:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d05c      	beq.n	80049b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d141      	bne.n	8004986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b31      	ldr	r3, [pc, #196]	@ (80049c8 <HAL_RCC_OscConfig+0x478>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fe f97a 	bl	8002c00 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fe f976 	bl	8002c00 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e087      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	4b27      	ldr	r3, [pc, #156]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69da      	ldr	r2, [r3, #28]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	3b01      	subs	r3, #1
 8004948:	041b      	lsls	r3, r3, #16
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	061b      	lsls	r3, r3, #24
 8004952:	491b      	ldr	r1, [pc, #108]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004954:	4313      	orrs	r3, r2
 8004956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004958:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <HAL_RCC_OscConfig+0x478>)
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495e:	f7fe f94f 	bl	8002c00 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004966:	f7fe f94b 	bl	8002c00 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e05c      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004978:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x416>
 8004984:	e054      	b.n	8004a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004986:	4b10      	ldr	r3, [pc, #64]	@ (80049c8 <HAL_RCC_OscConfig+0x478>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fe f938 	bl	8002c00 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004994:	f7fe f934 	bl	8002c00 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e045      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x444>
 80049b2:	e03d      	b.n	8004a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e038      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40007000 	.word	0x40007000
 80049c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049cc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <HAL_RCC_OscConfig+0x4ec>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d028      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d121      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d11a      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049fc:	4013      	ands	r3, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	3b01      	subs	r3, #1
 8004a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800

08004a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0cc      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a54:	4b68      	ldr	r3, [pc, #416]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d90c      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b65      	ldr	r3, [pc, #404]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b63      	ldr	r3, [pc, #396]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0b8      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a94:	4b59      	ldr	r3, [pc, #356]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a58      	ldr	r2, [pc, #352]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aac:	4b53      	ldr	r3, [pc, #332]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4a52      	ldr	r2, [pc, #328]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab8:	4b50      	ldr	r3, [pc, #320]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	494d      	ldr	r1, [pc, #308]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d044      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	4b47      	ldr	r3, [pc, #284]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d119      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e07f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d003      	beq.n	8004afe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afe:	4b3f      	ldr	r3, [pc, #252]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e06f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e067      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1e:	4b37      	ldr	r3, [pc, #220]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f023 0203 	bic.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4934      	ldr	r1, [pc, #208]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b30:	f7fe f866 	bl	8002c00 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b38:	f7fe f862 	bl	8002c00 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e04f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 020c 	and.w	r2, r3, #12
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d1eb      	bne.n	8004b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b60:	4b25      	ldr	r3, [pc, #148]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d20c      	bcs.n	8004b88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b22      	ldr	r3, [pc, #136]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b20      	ldr	r3, [pc, #128]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e032      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b94:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4916      	ldr	r1, [pc, #88]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb2:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	490e      	ldr	r1, [pc, #56]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bc6:	f000 f821 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	490a      	ldr	r1, [pc, #40]	@ (8004c00 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	5ccb      	ldrb	r3, [r1, r3]
 8004bda:	fa22 f303 	lsr.w	r3, r2, r3
 8004bde:	4a09      	ldr	r2, [pc, #36]	@ (8004c04 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <HAL_RCC_ClockConfig+0x1c8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fd ffc6 	bl	8002b78 <HAL_InitTick>

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023c00 	.word	0x40023c00
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	08008b30 	.word	0x08008b30
 8004c04:	20000000 	.word	0x20000000
 8004c08:	20000004 	.word	0x20000004

08004c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c10:	b094      	sub	sp, #80	@ 0x50
 8004c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c24:	4b79      	ldr	r3, [pc, #484]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 030c 	and.w	r3, r3, #12
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d00d      	beq.n	8004c4c <HAL_RCC_GetSysClockFreq+0x40>
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	f200 80e1 	bhi.w	8004df8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x34>
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c3e:	e0db      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c40:	4b73      	ldr	r3, [pc, #460]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c44:	e0db      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c46:	4b73      	ldr	r3, [pc, #460]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c4a:	e0d8      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c56:	4b6d      	ldr	r3, [pc, #436]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d063      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c62:	4b6a      	ldr	r3, [pc, #424]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	2200      	movs	r2, #0
 8004c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c76:	2300      	movs	r3, #0
 8004c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	0159      	lsls	r1, r3, #5
 8004c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c90:	0150      	lsls	r0, r2, #5
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4621      	mov	r1, r4
 8004c98:	1a51      	subs	r1, r2, r1
 8004c9a:	6139      	str	r1, [r7, #16]
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	018b      	lsls	r3, r1, #6
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cba:	4651      	mov	r1, sl
 8004cbc:	018a      	lsls	r2, r1, #6
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	ebb2 0801 	subs.w	r8, r2, r1
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cde:	4690      	mov	r8, r2
 8004ce0:	4699      	mov	r9, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	eb18 0303 	adds.w	r3, r8, r3
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	462b      	mov	r3, r5
 8004cec:	eb49 0303 	adc.w	r3, r9, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cfe:	4629      	mov	r1, r5
 8004d00:	024b      	lsls	r3, r1, #9
 8004d02:	4621      	mov	r1, r4
 8004d04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d08:	4621      	mov	r1, r4
 8004d0a:	024a      	lsls	r2, r1, #9
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d12:	2200      	movs	r2, #0
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d1c:	f7fb fea6 	bl	8000a6c <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4613      	mov	r3, r2
 8004d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d28:	e058      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2a:	4b38      	ldr	r3, [pc, #224]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	2200      	movs	r2, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	4611      	mov	r1, r2
 8004d36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d3a:	623b      	str	r3, [r7, #32]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d44:	4642      	mov	r2, r8
 8004d46:	464b      	mov	r3, r9
 8004d48:	f04f 0000 	mov.w	r0, #0
 8004d4c:	f04f 0100 	mov.w	r1, #0
 8004d50:	0159      	lsls	r1, r3, #5
 8004d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d56:	0150      	lsls	r0, r2, #5
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d62:	4649      	mov	r1, r9
 8004d64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d80:	eb63 050b 	sbc.w	r5, r3, fp
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	00eb      	lsls	r3, r5, #3
 8004d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d92:	00e2      	lsls	r2, r4, #3
 8004d94:	4614      	mov	r4, r2
 8004d96:	461d      	mov	r5, r3
 8004d98:	4643      	mov	r3, r8
 8004d9a:	18e3      	adds	r3, r4, r3
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	464b      	mov	r3, r9
 8004da0:	eb45 0303 	adc.w	r3, r5, r3
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004db2:	4629      	mov	r1, r5
 8004db4:	028b      	lsls	r3, r1, #10
 8004db6:	4621      	mov	r1, r4
 8004db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	028a      	lsls	r2, r1, #10
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	61fa      	str	r2, [r7, #28]
 8004dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd0:	f7fb fe4c 	bl	8000a6c <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4613      	mov	r3, r2
 8004dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	3301      	adds	r3, #1
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004dec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004df6:	e002      	b.n	8004dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3750      	adds	r7, #80	@ 0x50
 8004e04:	46bd      	mov	sp, r7
 8004e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	007a1200 	.word	0x007a1200

08004e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b03      	ldr	r3, [pc, #12]	@ (8004e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000000 	.word	0x20000000

08004e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e34:	f7ff fff0 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0a9b      	lsrs	r3, r3, #10
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	4903      	ldr	r1, [pc, #12]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40023800 	.word	0x40023800
 8004e54:	08008b40 	.word	0x08008b40

08004e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e5c:	f7ff ffdc 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0b5b      	lsrs	r3, r3, #13
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4903      	ldr	r1, [pc, #12]	@ (8004e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	08008b40 	.word	0x08008b40

08004e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e07b      	b.n	8004f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d108      	bne.n	8004eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ea2:	d009      	beq.n	8004eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	61da      	str	r2, [r3, #28]
 8004eaa:	e005      	b.n	8004eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fc feb6 	bl	8001c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3c:	ea42 0103 	orr.w	r1, r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	f003 0104 	and.w	r1, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	f003 0210 	and.w	r2, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e041      	b.n	8005028 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fd fa4f 	bl	800245c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f000 fa17 	bl	8005404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d020      	beq.n	8005094 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0202 	mvn.w	r2, #2
 8005064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f9a3 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f995 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f9a6 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d020      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0204 	mvn.w	r2, #4
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f97d 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f96f 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f980 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d020      	beq.n	800512c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0208 	mvn.w	r2, #8
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2204      	movs	r2, #4
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f957 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f949 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f95a 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0210 	mvn.w	r2, #16
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2208      	movs	r2, #8
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f931 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f923 	bl	80053b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f934 	bl	80053da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0201 	mvn.w	r2, #1
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f901 	bl	800539e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 faee 	bl	800579c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00c      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f905 	bl	80053ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0220 	mvn.w	r2, #32
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fac0 	bl	8005788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIM_ConfigClockSource+0x1c>
 8005228:	2302      	movs	r3, #2
 800522a:	e0b4      	b.n	8005396 <HAL_TIM_ConfigClockSource+0x186>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800524a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005264:	d03e      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800526a:	f200 8087 	bhi.w	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005272:	f000 8086 	beq.w	8005382 <HAL_TIM_ConfigClockSource+0x172>
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527a:	d87f      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b70      	cmp	r3, #112	@ 0x70
 800527e:	d01a      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005280:	2b70      	cmp	r3, #112	@ 0x70
 8005282:	d87b      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b60      	cmp	r3, #96	@ 0x60
 8005286:	d050      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x11a>
 8005288:	2b60      	cmp	r3, #96	@ 0x60
 800528a:	d877      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b50      	cmp	r3, #80	@ 0x50
 800528e:	d03c      	beq.n	800530a <HAL_TIM_ConfigClockSource+0xfa>
 8005290:	2b50      	cmp	r3, #80	@ 0x50
 8005292:	d873      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b40      	cmp	r3, #64	@ 0x40
 8005296:	d058      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x13a>
 8005298:	2b40      	cmp	r3, #64	@ 0x40
 800529a:	d86f      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b30      	cmp	r3, #48	@ 0x30
 800529e:	d064      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	2b30      	cmp	r3, #48	@ 0x30
 80052a2:	d86b      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d060      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d867      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d05c      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d05a      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	e062      	b.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c6:	f000 f9c3 	bl	8005650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	609a      	str	r2, [r3, #8]
      break;
 80052e2:	e04f      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052f4:	f000 f9ac 	bl	8005650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005306:	609a      	str	r2, [r3, #8]
      break;
 8005308:	e03c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	461a      	mov	r2, r3
 8005318:	f000 f920 	bl	800555c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2150      	movs	r1, #80	@ 0x50
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f979 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8005328:	e02c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	461a      	mov	r2, r3
 8005338:	f000 f93f 	bl	80055ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2160      	movs	r1, #96	@ 0x60
 8005342:	4618      	mov	r0, r3
 8005344:	f000 f969 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8005348:	e01c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	461a      	mov	r2, r3
 8005358:	f000 f900 	bl	800555c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2140      	movs	r1, #64	@ 0x40
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f959 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 8005368:	e00c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f000 f950 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 800537a:	e003      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e000      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a46      	ldr	r2, [pc, #280]	@ (8005530 <TIM_Base_SetConfig+0x12c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005422:	d00f      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a43      	ldr	r2, [pc, #268]	@ (8005534 <TIM_Base_SetConfig+0x130>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a42      	ldr	r2, [pc, #264]	@ (8005538 <TIM_Base_SetConfig+0x134>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a41      	ldr	r2, [pc, #260]	@ (800553c <TIM_Base_SetConfig+0x138>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a40      	ldr	r2, [pc, #256]	@ (8005540 <TIM_Base_SetConfig+0x13c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d108      	bne.n	8005456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a35      	ldr	r2, [pc, #212]	@ (8005530 <TIM_Base_SetConfig+0x12c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d02b      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005464:	d027      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a32      	ldr	r2, [pc, #200]	@ (8005534 <TIM_Base_SetConfig+0x130>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d023      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a31      	ldr	r2, [pc, #196]	@ (8005538 <TIM_Base_SetConfig+0x134>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d01f      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a30      	ldr	r2, [pc, #192]	@ (800553c <TIM_Base_SetConfig+0x138>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01b      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2f      	ldr	r2, [pc, #188]	@ (8005540 <TIM_Base_SetConfig+0x13c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d017      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2e      	ldr	r2, [pc, #184]	@ (8005544 <TIM_Base_SetConfig+0x140>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2d      	ldr	r2, [pc, #180]	@ (8005548 <TIM_Base_SetConfig+0x144>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00f      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2c      	ldr	r2, [pc, #176]	@ (800554c <TIM_Base_SetConfig+0x148>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00b      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005550 <TIM_Base_SetConfig+0x14c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d007      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005554 <TIM_Base_SetConfig+0x150>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a29      	ldr	r2, [pc, #164]	@ (8005558 <TIM_Base_SetConfig+0x154>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d108      	bne.n	80054c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a10      	ldr	r2, [pc, #64]	@ (8005530 <TIM_Base_SetConfig+0x12c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_Base_SetConfig+0xf8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <TIM_Base_SetConfig+0x13c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d103      	bne.n	8005504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b01      	cmp	r3, #1
 8005514:	d105      	bne.n	8005522 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f023 0201 	bic.w	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	611a      	str	r2, [r3, #16]
  }
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800
 8005550:	40001800 	.word	0x40001800
 8005554:	40001c00 	.word	0x40001c00
 8005558:	40002000 	.word	0x40002000

0800555c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 030a 	bic.w	r3, r3, #10
 8005598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f023 0210 	bic.w	r2, r3, #16
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	f043 0307 	orr.w	r3, r3, #7
 800563c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800566a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	609a      	str	r2, [r3, #8]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e05a      	b.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a21      	ldr	r2, [pc, #132]	@ (800576c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f4:	d01d      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1b      	ldr	r2, [pc, #108]	@ (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1a      	ldr	r2, [pc, #104]	@ (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a18      	ldr	r2, [pc, #96]	@ (800577c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a17      	ldr	r2, [pc, #92]	@ (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10c      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4313      	orrs	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40010400 	.word	0x40010400
 8005780:	40014000 	.word	0x40014000
 8005784:	40001800 	.word	0x40001800

08005788 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e042      	b.n	8005848 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc ff38 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2224      	movs	r2, #36	@ 0x24
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 fa27 	bl	8006c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	@ 0x28
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	4613      	mov	r3, r2
 800585e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b20      	cmp	r3, #32
 800586e:	d175      	bne.n	800595c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_Transmit+0x2c>
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e06e      	b.n	800595e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2221      	movs	r2, #33	@ 0x21
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800588e:	f7fd f9b7 	bl	8002c00 <HAL_GetTick>
 8005892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a8:	d108      	bne.n	80058bc <HAL_UART_Transmit+0x6c>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d104      	bne.n	80058bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e003      	b.n	80058c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058c4:	e02e      	b.n	8005924 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2180      	movs	r1, #128	@ 0x80
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fec6 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e03a      	b.n	800595e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	3302      	adds	r3, #2
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e007      	b.n	8005916 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1cb      	bne.n	80058c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	2140      	movs	r1, #64	@ 0x40
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fe92 	bl	8006662 <UART_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e006      	b.n	800595e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	@ 0x30
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b20      	cmp	r3, #32
 8005980:	d156      	bne.n	8005a30 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_UART_Transmit_DMA+0x26>
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e04f      	b.n	8005a32 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2221      	movs	r2, #33	@ 0x21
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b6:	4a21      	ldr	r2, [pc, #132]	@ (8005a3c <HAL_UART_Transmit_DMA+0xd4>)
 80059b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059be:	4a20      	ldr	r2, [pc, #128]	@ (8005a40 <HAL_UART_Transmit_DMA+0xd8>)
 80059c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a44 <HAL_UART_Transmit_DMA+0xdc>)
 80059c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	2200      	movs	r2, #0
 80059d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80059dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059de:	6819      	ldr	r1, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3304      	adds	r3, #4
 80059e6:	461a      	mov	r2, r3
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	f7fd ff5b 	bl	80038a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3314      	adds	r3, #20
 80059fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	617b      	str	r3, [r7, #20]
   return(result);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a18:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6a39      	ldr	r1, [r7, #32]
 8005a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3730      	adds	r7, #48	@ 0x30
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	080063b1 	.word	0x080063b1
 8005a40:	0800644b 	.word	0x0800644b
 8005a44:	080065cf 	.word	0x080065cf

08005a48 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08c      	sub	sp, #48	@ 0x30
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d14a      	bne.n	8005af8 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e043      	b.n	8005afa <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	461a      	mov	r2, r3
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 fe45 	bl	8006714 <UART_Start_Receive_IT>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005a90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d12c      	bne.n	8005af2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d125      	bne.n	8005aec <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f043 0310 	orr.w	r3, r3, #16
 8005acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ad6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	6a39      	ldr	r1, [r7, #32]
 8005adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ade:	e841 2300 	strex	r3, r2, [r1]
 8005ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1e5      	bne.n	8005ab6 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005aea:	e002      	b.n	8005af2 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005af2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005af6:	e000      	b.n	8005afa <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3730      	adds	r7, #48	@ 0x30
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08c      	sub	sp, #48	@ 0x30
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d14a      	bne.n	8005bb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e043      	b.n	8005bb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fe22 	bl	8006788 <UART_Start_Receive_DMA>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d12c      	bne.n	8005bac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d125      	bne.n	8005ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f043 0310 	orr.w	r3, r3, #16
 8005b86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b90:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6a39      	ldr	r1, [r7, #32]
 8005b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005ba4:	e002      	b.n	8005bac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005bac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005bb0:	e000      	b.n	8005bb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005bb2:	2302      	movs	r3, #2
  }
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3730      	adds	r7, #48	@ 0x30
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08e      	sub	sp, #56	@ 0x38
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e5      	bne.n	8005bc4 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c02:	2b80      	cmp	r3, #128	@ 0x80
 8005c04:	d136      	bne.n	8005c74 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3314      	adds	r3, #20
 8005c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c26:	61ba      	str	r2, [r7, #24]
 8005c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	613b      	str	r3, [r7, #16]
   return(result);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c46:	2200      	movs	r2, #0
 8005c48:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fd fe80 	bl	8003954 <HAL_DMA_Abort>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe f894 	bl	8003d8c <HAL_DMA_GetError>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d104      	bne.n	8005c74 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2210      	movs	r2, #16
 8005c6e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e007      	b.n	8005c84 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3738      	adds	r7, #56	@ 0x38
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b09a      	sub	sp, #104	@ 0x68
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005caa:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005cb4:	657a      	str	r2, [r7, #84]	@ 0x54
 8005cb6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e5      	bne.n	8005c94 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ce8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d119      	bne.n	8005d38 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f023 0310 	bic.w	r3, r3, #16
 8005d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d136      	bne.n	8005db4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3314      	adds	r3, #20
 8005d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d66:	61ba      	str	r2, [r7, #24]
 8005d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6979      	ldr	r1, [r7, #20]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	613b      	str	r3, [r7, #16]
   return(result);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d018      	beq.n	8005db4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d86:	2200      	movs	r2, #0
 8005d88:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fd fde0 	bl	8003954 <HAL_DMA_Abort>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd fff4 	bl	8003d8c <HAL_DMA_GetError>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d104      	bne.n	8005db4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2210      	movs	r2, #16
 8005dae:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e00a      	b.n	8005dca <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3768      	adds	r7, #104	@ 0x68
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10f      	bne.n	8005e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <HAL_UART_IRQHandler+0x66>
 8005e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fe49 	bl	8006aca <UART_Receive_IT>
      return;
 8005e38:	e25b      	b.n	80062f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80de 	beq.w	8006000 <HAL_UART_IRQHandler+0x22c>
 8005e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d106      	bne.n	8005e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 80d1 	beq.w	8006000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <HAL_UART_IRQHandler+0xae>
 8005e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xd2>
 8005e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	f043 0202 	orr.w	r2, r3, #2
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_UART_IRQHandler+0xf6>
 8005eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec2:	f043 0204 	orr.w	r2, r3, #4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d011      	beq.n	8005efa <HAL_UART_IRQHandler+0x126>
 8005ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d105      	bne.n	8005eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef2:	f043 0208 	orr.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 81f2 	beq.w	80062e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_UART_IRQHandler+0x14e>
 8005f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fdd4 	bl	8006aca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2c:	2b40      	cmp	r3, #64	@ 0x40
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <HAL_UART_IRQHandler+0x17a>
 8005f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d04f      	beq.n	8005fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fcdc 	bl	800690c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5e:	2b40      	cmp	r3, #64	@ 0x40
 8005f60:	d141      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3314      	adds	r3, #20
 8005f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3314      	adds	r3, #20
 8005f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1d9      	bne.n	8005f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d013      	beq.n	8005fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fba:	4a7e      	ldr	r2, [pc, #504]	@ (80061b4 <HAL_UART_IRQHandler+0x3e0>)
 8005fbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fd fd36 	bl	8003a34 <HAL_DMA_Abort_IT>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e00e      	b.n	8005ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9b2 	bl	8006348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e00a      	b.n	8005ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9ae 	bl	8006348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	e006      	b.n	8005ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9aa 	bl	8006348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005ffa:	e175      	b.n	80062e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffc:	bf00      	nop
    return;
 8005ffe:	e173      	b.n	80062e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006004:	2b01      	cmp	r3, #1
 8006006:	f040 814f 	bne.w	80062a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 8148 	beq.w	80062a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8141 	beq.w	80062a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	f040 80b6 	bne.w	80061b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8145 	beq.w	80062ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800606a:	429a      	cmp	r2, r3
 800606c:	f080 813e 	bcs.w	80062ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006076:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006082:	f000 8088 	beq.w	8006196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800609c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1d9      	bne.n	8006086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060e4:	f023 0301 	bic.w	r3, r3, #1
 80060e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3314      	adds	r3, #20
 80060f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e1      	bne.n	80060d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3314      	adds	r3, #20
 8006114:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800611e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3314      	adds	r3, #20
 800612e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006132:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006134:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006138:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e3      	bne.n	800610e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006166:	f023 0310 	bic.w	r3, r3, #16
 800616a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006178:	65ba      	str	r2, [r7, #88]	@ 0x58
 800617a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800617e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e3      	bne.n	8006154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006190:	4618      	mov	r0, r3
 8006192:	f7fd fbdf 	bl	8003954 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7fb f829 	bl	8001204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061b2:	e09b      	b.n	80062ec <HAL_UART_IRQHandler+0x518>
 80061b4:	080069d3 	.word	0x080069d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 808e 	beq.w	80062f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8089 	beq.w	80062f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006202:	647a      	str	r2, [r7, #68]	@ 0x44
 8006204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e3      	bne.n	80061de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3314      	adds	r3, #20
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	623b      	str	r3, [r7, #32]
   return(result);
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3314      	adds	r3, #20
 8006236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800623a:	633a      	str	r2, [r7, #48]	@ 0x30
 800623c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60fb      	str	r3, [r7, #12]
   return(result);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006280:	61fa      	str	r2, [r7, #28]
 8006282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69b9      	ldr	r1, [r7, #24]
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	617b      	str	r3, [r7, #20]
   return(result);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e3      	bne.n	800625c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800629a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fa ffaf 	bl	8001204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062a6:	e023      	b.n	80062f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d009      	beq.n	80062c8 <HAL_UART_IRQHandler+0x4f4>
 80062b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fb9a 	bl	80069fa <UART_Transmit_IT>
    return;
 80062c6:	e014      	b.n	80062f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00e      	beq.n	80062f2 <HAL_UART_IRQHandler+0x51e>
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fbda 	bl	8006a9a <UART_EndTransmit_IT>
    return;
 80062e6:	e004      	b.n	80062f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80062e8:	bf00      	nop
 80062ea:	e002      	b.n	80062f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80062ec:	bf00      	nop
 80062ee:	e000      	b.n	80062f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80062f0:	bf00      	nop
  }
}
 80062f2:	37e8      	adds	r7, #232	@ 0xe8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	2300      	movs	r3, #0
 800636a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006372:	b2db      	uxtb	r3, r3
 8006374:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800637c:	b2db      	uxtb	r3, r3
 800637e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	b2da      	uxtb	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	4313      	orrs	r3, r2
 800638a:	b2db      	uxtb	r3, r3
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b090      	sub	sp, #64	@ 0x40
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d137      	bne.n	800643c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80063cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ce:	2200      	movs	r2, #0
 80063d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3314      	adds	r3, #20
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	623b      	str	r3, [r7, #32]
   return(result);
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3314      	adds	r3, #20
 80063f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80063f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e5      	bne.n	80063d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	60fb      	str	r3, [r7, #12]
   return(result);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800641c:	637b      	str	r3, [r7, #52]	@ 0x34
 800641e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006426:	61fa      	str	r2, [r7, #28]
 8006428:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	69b9      	ldr	r1, [r7, #24]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	617b      	str	r3, [r7, #20]
   return(result);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e5      	bne.n	8006406 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800643a:	e002      	b.n	8006442 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800643c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800643e:	f7ff ff5b 	bl	80062f8 <HAL_UART_TxCpltCallback>
}
 8006442:	bf00      	nop
 8006444:	3740      	adds	r7, #64	@ 0x40
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006456:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff ff57 	bl	800630c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b09c      	sub	sp, #112	@ 0x70
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006472:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d172      	bne.n	8006568 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006484:	2200      	movs	r2, #0
 8006486:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800649e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80064a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e5      	bne.n	8006488 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3314      	adds	r3, #20
 80064c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ce:	f023 0301 	bic.w	r3, r3, #1
 80064d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80064d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3314      	adds	r3, #20
 80064da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80064dc:	647a      	str	r2, [r7, #68]	@ 0x44
 80064de:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e5      	bne.n	80064bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3314      	adds	r3, #20
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006506:	663b      	str	r3, [r7, #96]	@ 0x60
 8006508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006510:	633a      	str	r2, [r7, #48]	@ 0x30
 8006512:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800652c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800652e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006530:	2b01      	cmp	r3, #1
 8006532:	d119      	bne.n	8006568 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	60fb      	str	r3, [r7, #12]
   return(result);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0310 	bic.w	r3, r3, #16
 800654a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800654c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	330c      	adds	r3, #12
 8006552:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006554:	61fa      	str	r2, [r7, #28]
 8006556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	69b9      	ldr	r1, [r7, #24]
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	617b      	str	r3, [r7, #20]
   return(result);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e5      	bne.n	8006534 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800656a:	2200      	movs	r2, #0
 800656c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006572:	2b01      	cmp	r3, #1
 8006574:	d106      	bne.n	8006584 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006578:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800657a:	4619      	mov	r1, r3
 800657c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800657e:	f7fa fe41 	bl	8001204 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006582:	e002      	b.n	800658a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006584:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006586:	f7ff fecb 	bl	8006320 <HAL_UART_RxCpltCallback>
}
 800658a:	bf00      	nop
 800658c:	3770      	adds	r7, #112	@ 0x70
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d108      	bne.n	80065c0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7fa fe23 	bl	8001204 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065be:	e002      	b.n	80065c6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7ff feb7 	bl	8006334 <HAL_UART_RxHalfCpltCallback>
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ea:	2b80      	cmp	r3, #128	@ 0x80
 80065ec:	bf0c      	ite	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	2300      	movne	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b21      	cmp	r3, #33	@ 0x21
 8006600:	d108      	bne.n	8006614 <UART_DMAError+0x46>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800660e:	68b8      	ldr	r0, [r7, #8]
 8006610:	f000 f954 	bl	80068bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661e:	2b40      	cmp	r3, #64	@ 0x40
 8006620:	bf0c      	ite	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	2300      	movne	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b22      	cmp	r3, #34	@ 0x22
 8006634:	d108      	bne.n	8006648 <UART_DMAError+0x7a>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2200      	movs	r2, #0
 8006640:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006642:	68b8      	ldr	r0, [r7, #8]
 8006644:	f000 f962 	bl	800690c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664c:	f043 0210 	orr.w	r2, r3, #16
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006654:	68b8      	ldr	r0, [r7, #8]
 8006656:	f7ff fe77 	bl	8006348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006672:	e03b      	b.n	80066ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667a:	d037      	beq.n	80066ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667c:	f7fc fac0 	bl	8002c00 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	6a3a      	ldr	r2, [r7, #32]
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <UART_WaitOnFlagUntilTimeout+0x30>
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e03a      	b.n	800670c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d023      	beq.n	80066ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b80      	cmp	r3, #128	@ 0x80
 80066a8:	d020      	beq.n	80066ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b40      	cmp	r3, #64	@ 0x40
 80066ae:	d01d      	beq.n	80066ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d116      	bne.n	80066ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f919 	bl	800690c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2208      	movs	r2, #8
 80066de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e00f      	b.n	800670c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4013      	ands	r3, r2
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	bf0c      	ite	eq
 80066fc:	2301      	moveq	r3, #1
 80066fe:	2300      	movne	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	429a      	cmp	r2, r3
 8006708:	d0b4      	beq.n	8006674 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	88fa      	ldrh	r2, [r7, #6]
 8006732:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2222      	movs	r2, #34	@ 0x22
 800673e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006758:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695a      	ldr	r2, [r3, #20]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0220 	orr.w	r2, r2, #32
 8006778:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b098      	sub	sp, #96	@ 0x60
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2222      	movs	r2, #34	@ 0x22
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b4:	4a3e      	ldr	r2, [pc, #248]	@ (80068b0 <UART_Start_Receive_DMA+0x128>)
 80067b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067bc:	4a3d      	ldr	r2, [pc, #244]	@ (80068b4 <UART_Start_Receive_DMA+0x12c>)
 80067be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c4:	4a3c      	ldr	r2, [pc, #240]	@ (80068b8 <UART_Start_Receive_DMA+0x130>)
 80067c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067cc:	2200      	movs	r2, #0
 80067ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80067d0:	f107 0308 	add.w	r3, r7, #8
 80067d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3304      	adds	r3, #4
 80067e0:	4619      	mov	r1, r3
 80067e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	f7fd f85c 	bl	80038a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d019      	beq.n	800683e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800681a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800681c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	330c      	adds	r3, #12
 8006828:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800682a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800682c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006830:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3314      	adds	r3, #20
 8006844:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	657b      	str	r3, [r7, #84]	@ 0x54
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3314      	adds	r3, #20
 800685c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800685e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006860:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3314      	adds	r3, #20
 8006878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	617b      	str	r3, [r7, #20]
   return(result);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006888:	653b      	str	r3, [r7, #80]	@ 0x50
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3314      	adds	r3, #20
 8006890:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006892:	627a      	str	r2, [r7, #36]	@ 0x24
 8006894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6a39      	ldr	r1, [r7, #32]
 8006898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3760      	adds	r7, #96	@ 0x60
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	08006467 	.word	0x08006467
 80068b4:	08006593 	.word	0x08006593
 80068b8:	080065cf 	.word	0x080065cf

080068bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b089      	sub	sp, #36	@ 0x24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	61ba      	str	r2, [r7, #24]
 80068e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6979      	ldr	r1, [r7, #20]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006900:	bf00      	nop
 8006902:	3724      	adds	r7, #36	@ 0x24
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b095      	sub	sp, #84	@ 0x54
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800692a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006934:	643a      	str	r2, [r7, #64]	@ 0x40
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800693a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e5      	bne.n	8006914 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	e853 3f00 	ldrex	r3, [r3]
 8006956:	61fb      	str	r3, [r7, #28]
   return(result);
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800696a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800696e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006970:	e841 2300 	strex	r3, r2, [r1]
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e5      	bne.n	8006948 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006980:	2b01      	cmp	r3, #1
 8006982:	d119      	bne.n	80069b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60bb      	str	r3, [r7, #8]
   return(result);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	647b      	str	r3, [r7, #68]	@ 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a4:	61ba      	str	r2, [r7, #24]
 80069a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	613b      	str	r3, [r7, #16]
   return(result);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e5      	bne.n	8006984 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069c6:	bf00      	nop
 80069c8:	3754      	adds	r7, #84	@ 0x54
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7ff fcab 	bl	8006348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b21      	cmp	r3, #33	@ 0x21
 8006a0c:	d13e      	bne.n	8006a8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a16:	d114      	bne.n	8006a42 <UART_Transmit_IT+0x48>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d110      	bne.n	8006a42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	621a      	str	r2, [r3, #32]
 8006a40:	e008      	b.n	8006a54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	1c59      	adds	r1, r3, #1
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6211      	str	r1, [r2, #32]
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4619      	mov	r1, r3
 8006a62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10f      	bne.n	8006a88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e000      	b.n	8006a8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ab0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fc1c 	bl	80062f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08c      	sub	sp, #48	@ 0x30
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b22      	cmp	r3, #34	@ 0x22
 8006adc:	f040 80ae 	bne.w	8006c3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae8:	d117      	bne.n	8006b1a <UART_Receive_IT+0x50>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d113      	bne.n	8006b1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b12:	1c9a      	adds	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b18:	e026      	b.n	8006b68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2c:	d007      	beq.n	8006b3e <UART_Receive_IT+0x74>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <UART_Receive_IT+0x82>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e008      	b.n	8006b5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4619      	mov	r1, r3
 8006b76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d15d      	bne.n	8006c38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0220 	bic.w	r2, r2, #32
 8006b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d135      	bne.n	8006c2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be8:	623a      	str	r2, [r7, #32]
 8006bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	69f9      	ldr	r1, [r7, #28]
 8006bee:	6a3a      	ldr	r2, [r7, #32]
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e5      	bne.n	8006bc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b10      	cmp	r3, #16
 8006c08:	d10a      	bne.n	8006c20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fa faec 	bl	8001204 <HAL_UARTEx_RxEventCallback>
 8006c2c:	e002      	b.n	8006c34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fb76 	bl	8006320 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e002      	b.n	8006c3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3730      	adds	r7, #48	@ 0x30
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c4c:	b0c0      	sub	sp, #256	@ 0x100
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	68d9      	ldr	r1, [r3, #12]
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	ea40 0301 	orr.w	r3, r0, r1
 8006c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	431a      	orrs	r2, r3
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ca0:	f021 010c 	bic.w	r1, r1, #12
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc2:	6999      	ldr	r1, [r3, #24]
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	ea40 0301 	orr.w	r3, r0, r1
 8006cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	4b8f      	ldr	r3, [pc, #572]	@ (8006f14 <UART_SetConfig+0x2cc>)
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d005      	beq.n	8006ce8 <UART_SetConfig+0xa0>
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8006f18 <UART_SetConfig+0x2d0>)
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d104      	bne.n	8006cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ce8:	f7fe f8b6 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 8006cec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cf0:	e003      	b.n	8006cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cf2:	f7fe f89d 	bl	8004e30 <HAL_RCC_GetPCLK1Freq>
 8006cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d04:	f040 810c 	bne.w	8006f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	1891      	adds	r1, r2, r2
 8006d20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d22:	415b      	adcs	r3, r3
 8006d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	eb12 0801 	adds.w	r8, r2, r1
 8006d30:	4629      	mov	r1, r5
 8006d32:	eb43 0901 	adc.w	r9, r3, r1
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d4a:	4690      	mov	r8, r2
 8006d4c:	4699      	mov	r9, r3
 8006d4e:	4623      	mov	r3, r4
 8006d50:	eb18 0303 	adds.w	r3, r8, r3
 8006d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d58:	462b      	mov	r3, r5
 8006d5a:	eb49 0303 	adc.w	r3, r9, r3
 8006d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d76:	460b      	mov	r3, r1
 8006d78:	18db      	adds	r3, r3, r3
 8006d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	eb42 0303 	adc.w	r3, r2, r3
 8006d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d8c:	f7f9 fe6e 	bl	8000a6c <__aeabi_uldivmod>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4b61      	ldr	r3, [pc, #388]	@ (8006f1c <UART_SetConfig+0x2d4>)
 8006d96:	fba3 2302 	umull	r2, r3, r3, r2
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	011c      	lsls	r4, r3, #4
 8006d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006da8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006db0:	4642      	mov	r2, r8
 8006db2:	464b      	mov	r3, r9
 8006db4:	1891      	adds	r1, r2, r2
 8006db6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006db8:	415b      	adcs	r3, r3
 8006dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006de0:	4692      	mov	sl, r2
 8006de2:	469b      	mov	fp, r3
 8006de4:	4643      	mov	r3, r8
 8006de6:	eb1a 0303 	adds.w	r3, sl, r3
 8006dea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dee:	464b      	mov	r3, r9
 8006df0:	eb4b 0303 	adc.w	r3, fp, r3
 8006df4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	18db      	adds	r3, r3, r3
 8006e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e12:	4613      	mov	r3, r2
 8006e14:	eb42 0303 	adc.w	r3, r2, r3
 8006e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e22:	f7f9 fe23 	bl	8000a6c <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f1c <UART_SetConfig+0x2d4>)
 8006e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e32:	095b      	lsrs	r3, r3, #5
 8006e34:	2264      	movs	r2, #100	@ 0x64
 8006e36:	fb02 f303 	mul.w	r3, r2, r3
 8006e3a:	1acb      	subs	r3, r1, r3
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e42:	4b36      	ldr	r3, [pc, #216]	@ (8006f1c <UART_SetConfig+0x2d4>)
 8006e44:	fba3 2302 	umull	r2, r3, r3, r2
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e50:	441c      	add	r4, r3
 8006e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	1891      	adds	r1, r2, r2
 8006e6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e6c:	415b      	adcs	r3, r3
 8006e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e74:	4641      	mov	r1, r8
 8006e76:	1851      	adds	r1, r2, r1
 8006e78:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	414b      	adcs	r3, r1
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e8c:	4659      	mov	r1, fp
 8006e8e:	00cb      	lsls	r3, r1, #3
 8006e90:	4651      	mov	r1, sl
 8006e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e96:	4651      	mov	r1, sl
 8006e98:	00ca      	lsls	r2, r1, #3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	189b      	adds	r3, r3, r2
 8006ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ea8:	464b      	mov	r3, r9
 8006eaa:	460a      	mov	r2, r1
 8006eac:	eb42 0303 	adc.w	r3, r2, r3
 8006eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ec8:	460b      	mov	r3, r1
 8006eca:	18db      	adds	r3, r3, r3
 8006ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ece:	4613      	mov	r3, r2
 8006ed0:	eb42 0303 	adc.w	r3, r2, r3
 8006ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ede:	f7f9 fdc5 	bl	8000a6c <__aeabi_uldivmod>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8006f1c <UART_SetConfig+0x2d4>)
 8006ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	2164      	movs	r1, #100	@ 0x64
 8006ef0:	fb01 f303 	mul.w	r3, r1, r3
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	3332      	adds	r3, #50	@ 0x32
 8006efa:	4a08      	ldr	r2, [pc, #32]	@ (8006f1c <UART_SetConfig+0x2d4>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	f003 0207 	and.w	r2, r3, #7
 8006f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4422      	add	r2, r4
 8006f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f10:	e106      	b.n	8007120 <UART_SetConfig+0x4d8>
 8006f12:	bf00      	nop
 8006f14:	40011000 	.word	0x40011000
 8006f18:	40011400 	.word	0x40011400
 8006f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f32:	4642      	mov	r2, r8
 8006f34:	464b      	mov	r3, r9
 8006f36:	1891      	adds	r1, r2, r2
 8006f38:	6239      	str	r1, [r7, #32]
 8006f3a:	415b      	adcs	r3, r3
 8006f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f42:	4641      	mov	r1, r8
 8006f44:	1854      	adds	r4, r2, r1
 8006f46:	4649      	mov	r1, r9
 8006f48:	eb43 0501 	adc.w	r5, r3, r1
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	00eb      	lsls	r3, r5, #3
 8006f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f5a:	00e2      	lsls	r2, r4, #3
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	461d      	mov	r5, r3
 8006f60:	4643      	mov	r3, r8
 8006f62:	18e3      	adds	r3, r4, r3
 8006f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f68:	464b      	mov	r3, r9
 8006f6a:	eb45 0303 	adc.w	r3, r5, r3
 8006f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f8e:	4629      	mov	r1, r5
 8006f90:	008b      	lsls	r3, r1, #2
 8006f92:	4621      	mov	r1, r4
 8006f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f98:	4621      	mov	r1, r4
 8006f9a:	008a      	lsls	r2, r1, #2
 8006f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fa0:	f7f9 fd64 	bl	8000a6c <__aeabi_uldivmod>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4b60      	ldr	r3, [pc, #384]	@ (800712c <UART_SetConfig+0x4e4>)
 8006faa:	fba3 2302 	umull	r2, r3, r3, r2
 8006fae:	095b      	lsrs	r3, r3, #5
 8006fb0:	011c      	lsls	r4, r3, #4
 8006fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	1891      	adds	r1, r2, r2
 8006fca:	61b9      	str	r1, [r7, #24]
 8006fcc:	415b      	adcs	r3, r3
 8006fce:	61fb      	str	r3, [r7, #28]
 8006fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	1851      	adds	r1, r2, r1
 8006fd8:	6139      	str	r1, [r7, #16]
 8006fda:	4649      	mov	r1, r9
 8006fdc:	414b      	adcs	r3, r1
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fec:	4659      	mov	r1, fp
 8006fee:	00cb      	lsls	r3, r1, #3
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	00ca      	lsls	r2, r1, #3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	4642      	mov	r2, r8
 8007002:	189b      	adds	r3, r3, r2
 8007004:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007008:	464b      	mov	r3, r9
 800700a:	460a      	mov	r2, r1
 800700c:	eb42 0303 	adc.w	r3, r2, r3
 8007010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800701e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800702c:	4649      	mov	r1, r9
 800702e:	008b      	lsls	r3, r1, #2
 8007030:	4641      	mov	r1, r8
 8007032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007036:	4641      	mov	r1, r8
 8007038:	008a      	lsls	r2, r1, #2
 800703a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800703e:	f7f9 fd15 	bl	8000a6c <__aeabi_uldivmod>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4611      	mov	r1, r2
 8007048:	4b38      	ldr	r3, [pc, #224]	@ (800712c <UART_SetConfig+0x4e4>)
 800704a:	fba3 2301 	umull	r2, r3, r3, r1
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	2264      	movs	r2, #100	@ 0x64
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	1acb      	subs	r3, r1, r3
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	3332      	adds	r3, #50	@ 0x32
 800705c:	4a33      	ldr	r2, [pc, #204]	@ (800712c <UART_SetConfig+0x4e4>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007068:	441c      	add	r4, r3
 800706a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800706e:	2200      	movs	r2, #0
 8007070:	673b      	str	r3, [r7, #112]	@ 0x70
 8007072:	677a      	str	r2, [r7, #116]	@ 0x74
 8007074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007078:	4642      	mov	r2, r8
 800707a:	464b      	mov	r3, r9
 800707c:	1891      	adds	r1, r2, r2
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	415b      	adcs	r3, r3
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007088:	4641      	mov	r1, r8
 800708a:	1851      	adds	r1, r2, r1
 800708c:	6039      	str	r1, [r7, #0]
 800708e:	4649      	mov	r1, r9
 8007090:	414b      	adcs	r3, r1
 8007092:	607b      	str	r3, [r7, #4]
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070a0:	4659      	mov	r1, fp
 80070a2:	00cb      	lsls	r3, r1, #3
 80070a4:	4651      	mov	r1, sl
 80070a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070aa:	4651      	mov	r1, sl
 80070ac:	00ca      	lsls	r2, r1, #3
 80070ae:	4610      	mov	r0, r2
 80070b0:	4619      	mov	r1, r3
 80070b2:	4603      	mov	r3, r0
 80070b4:	4642      	mov	r2, r8
 80070b6:	189b      	adds	r3, r3, r2
 80070b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ba:	464b      	mov	r3, r9
 80070bc:	460a      	mov	r2, r1
 80070be:	eb42 0303 	adc.w	r3, r2, r3
 80070c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80070ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070dc:	4649      	mov	r1, r9
 80070de:	008b      	lsls	r3, r1, #2
 80070e0:	4641      	mov	r1, r8
 80070e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070e6:	4641      	mov	r1, r8
 80070e8:	008a      	lsls	r2, r1, #2
 80070ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070ee:	f7f9 fcbd 	bl	8000a6c <__aeabi_uldivmod>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <UART_SetConfig+0x4e4>)
 80070f8:	fba3 1302 	umull	r1, r3, r3, r2
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	2164      	movs	r1, #100	@ 0x64
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	3332      	adds	r3, #50	@ 0x32
 800710a:	4a08      	ldr	r2, [pc, #32]	@ (800712c <UART_SetConfig+0x4e4>)
 800710c:	fba2 2303 	umull	r2, r3, r2, r3
 8007110:	095b      	lsrs	r3, r3, #5
 8007112:	f003 020f 	and.w	r2, r3, #15
 8007116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4422      	add	r2, r4
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	bf00      	nop
 8007122:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007126:	46bd      	mov	sp, r7
 8007128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800712c:	51eb851f 	.word	0x51eb851f

08007130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007130:	b084      	sub	sp, #16
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	f107 001c 	add.w	r0, r7, #28
 800713e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007142:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007146:	2b01      	cmp	r3, #1
 8007148:	d123      	bne.n	8007192 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800715e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007172:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007176:	2b01      	cmp	r3, #1
 8007178:	d105      	bne.n	8007186 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 faa0 	bl	80076cc <USB_CoreReset>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
 8007190:	e01b      	b.n	80071ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa94 	bl	80076cc <USB_CoreReset>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80071bc:	e005      	b.n	80071ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071ca:	7fbb      	ldrb	r3, [r7, #30]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d10b      	bne.n	80071e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f043 0206 	orr.w	r2, r3, #6
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f043 0220 	orr.w	r2, r3, #32
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071f4:	b004      	add	sp, #16
 80071f6:	4770      	bx	lr

080071f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f023 0201 	bic.w	r2, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d115      	bne.n	8007268 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007248:	200a      	movs	r0, #10
 800724a:	f7fb fce5 	bl	8002c18 <HAL_Delay>
      ms += 10U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	330a      	adds	r3, #10
 8007252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fa2b 	bl	80076b0 <USB_GetMode>
 800725a:	4603      	mov	r3, r0
 800725c:	2b01      	cmp	r3, #1
 800725e:	d01e      	beq.n	800729e <USB_SetCurrentMode+0x84>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2bc7      	cmp	r3, #199	@ 0xc7
 8007264:	d9f0      	bls.n	8007248 <USB_SetCurrentMode+0x2e>
 8007266:	e01a      	b.n	800729e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d115      	bne.n	800729a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800727a:	200a      	movs	r0, #10
 800727c:	f7fb fccc 	bl	8002c18 <HAL_Delay>
      ms += 10U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	330a      	adds	r3, #10
 8007284:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa12 	bl	80076b0 <USB_GetMode>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <USB_SetCurrentMode+0x84>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2bc7      	cmp	r3, #199	@ 0xc7
 8007296:	d9f0      	bls.n	800727a <USB_SetCurrentMode+0x60>
 8007298:	e001      	b.n	800729e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e005      	b.n	80072aa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2bc8      	cmp	r3, #200	@ 0xc8
 80072a2:	d101      	bne.n	80072a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072b4:	b084      	sub	sp, #16
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b086      	sub	sp, #24
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80072c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072ce:	2300      	movs	r3, #0
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	e009      	b.n	80072e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3340      	adds	r3, #64	@ 0x40
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	2200      	movs	r2, #0
 80072e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	3301      	adds	r3, #1
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b0e      	cmp	r3, #14
 80072ec:	d9f2      	bls.n	80072d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d11c      	bne.n	8007330 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007304:	f043 0302 	orr.w	r3, r3, #2
 8007308:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007326:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	639a      	str	r2, [r3, #56]	@ 0x38
 800732e:	e00b      	b.n	8007348 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007340:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800734e:	461a      	mov	r2, r3
 8007350:	2300      	movs	r3, #0
 8007352:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007354:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007358:	2b01      	cmp	r3, #1
 800735a:	d10d      	bne.n	8007378 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800735c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007364:	2100      	movs	r1, #0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f968 	bl	800763c <USB_SetDevSpeed>
 800736c:	e008      	b.n	8007380 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800736e:	2101      	movs	r1, #1
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f963 	bl	800763c <USB_SetDevSpeed>
 8007376:	e003      	b.n	8007380 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007378:	2103      	movs	r1, #3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f95e 	bl	800763c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007380:	2110      	movs	r1, #16
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f8fa 	bl	800757c <USB_FlushTxFifo>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f924 	bl	80075e0 <USB_FlushRxFifo>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a8:	461a      	mov	r2, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b4:	461a      	mov	r2, r3
 80073b6:	2300      	movs	r3, #0
 80073b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c0:	461a      	mov	r2, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c6:	2300      	movs	r3, #0
 80073c8:	613b      	str	r3, [r7, #16]
 80073ca:	e043      	b.n	8007454 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073e2:	d118      	bne.n	8007416 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f6:	461a      	mov	r2, r3
 80073f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	e013      	b.n	8007428 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800740c:	461a      	mov	r2, r3
 800740e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	e008      	b.n	8007428 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007422:	461a      	mov	r2, r3
 8007424:	2300      	movs	r3, #0
 8007426:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007434:	461a      	mov	r2, r3
 8007436:	2300      	movs	r3, #0
 8007438:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007446:	461a      	mov	r2, r3
 8007448:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800744c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	3301      	adds	r3, #1
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007458:	461a      	mov	r2, r3
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	4293      	cmp	r3, r2
 800745e:	d3b5      	bcc.n	80073cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	e043      	b.n	80074ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800747c:	d118      	bne.n	80074b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007490:	461a      	mov	r2, r3
 8007492:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e013      	b.n	80074c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a6:	461a      	mov	r2, r3
 80074a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074ac:	6013      	str	r3, [r2, #0]
 80074ae:	e008      	b.n	80074c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074bc:	461a      	mov	r2, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ce:	461a      	mov	r2, r3
 80074d0:	2300      	movs	r3, #0
 80074d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e0:	461a      	mov	r2, r3
 80074e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	3301      	adds	r3, #1
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074f2:	461a      	mov	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d3b5      	bcc.n	8007466 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800750c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800751a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800751c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007520:	2b00      	cmp	r3, #0
 8007522:	d105      	bne.n	8007530 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f043 0210 	orr.w	r2, r3, #16
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	4b10      	ldr	r3, [pc, #64]	@ (8007578 <USB_DevInit+0x2c4>)
 8007536:	4313      	orrs	r3, r2
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800753c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f043 0208 	orr.w	r2, r3, #8
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007550:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007554:	2b01      	cmp	r3, #1
 8007556:	d107      	bne.n	8007568 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007560:	f043 0304 	orr.w	r3, r3, #4
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007574:	b004      	add	sp, #16
 8007576:	4770      	bx	lr
 8007578:	803c3800 	.word	0x803c3800

0800757c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007596:	d901      	bls.n	800759c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e01b      	b.n	80075d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	daf2      	bge.n	800758a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	019b      	lsls	r3, r3, #6
 80075ac:	f043 0220 	orr.w	r2, r3, #32
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c0:	d901      	bls.n	80075c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e006      	b.n	80075d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d0f0      	beq.n	80075b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075f8:	d901      	bls.n	80075fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e018      	b.n	8007630 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	daf2      	bge.n	80075ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2210      	movs	r2, #16
 800760e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800761c:	d901      	bls.n	8007622 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e006      	b.n	8007630 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b10      	cmp	r3, #16
 800762c:	d0f0      	beq.n	8007610 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	68f9      	ldr	r1, [r7, #12]
 8007658:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800765c:	4313      	orrs	r3, r2
 800765e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007688:	f023 0303 	bic.w	r3, r3, #3
 800768c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800769c:	f043 0302 	orr.w	r3, r3, #2
 80076a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	f003 0301 	and.w	r3, r3, #1
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076e4:	d901      	bls.n	80076ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e01b      	b.n	8007722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	daf2      	bge.n	80076d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f043 0201 	orr.w	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800770e:	d901      	bls.n	8007714 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e006      	b.n	8007722 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b01      	cmp	r3, #1
 800771e:	d0f0      	beq.n	8007702 <USB_CoreReset+0x36>

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fba8 	bl	8007e90 <malloc>
 8007740:	4603      	mov	r3, r0
 8007742:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <ATC_Free+0x26>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fb99 	bl	8007ea0 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
  }
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8a9b      	ldrh	r3, [r3, #20]
 8007792:	461a      	mov	r2, r3
 8007794:	2100      	movs	r1, #0
 8007796:	f000 fcdd 	bl	8008154 <memset>
}
 800779a:	bf00      	nop
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	4613      	mov	r3, r2
 80077ae:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 80077b0:	2300      	movs	r3, #0
 80077b2:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	88fa      	ldrh	r2, [r7, #6]
 80077b8:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	88fa      	ldrh	r2, [r7, #6]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe f8d0 	bl	8005968 <HAL_UART_Transmit_DMA>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 80077ce:	2301      	movs	r3, #1
 80077d0:	75fb      	strb	r3, [r7, #23]
 80077d2:	e000      	b.n	80077d6 <ATC_TxRaw+0x34>
      break;
 80077d4:	bf00      	nop

  } while (0);

  return answer;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fe fdb5 	bl	800635c <HAL_UART_GetState>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b21      	cmp	r3, #33	@ 0x21
 80077f6:	d007      	beq.n	8007808 <ATC_TxBusy+0x28>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fe fdad 	bl	800635c <HAL_UART_GetState>
 8007802:	4603      	mov	r3, r0
 8007804:	2b23      	cmp	r3, #35	@ 0x23
 8007806:	d101      	bne.n	800780c <ATC_TxBusy+0x2c>
  {
    return true;
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800780c:	2300      	movs	r3, #0
  }
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 8007824:	f7fb f9ec 	bl	8002c00 <HAL_GetTick>
 8007828:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800782a:	2001      	movs	r0, #1
 800782c:	f000 fb20 	bl	8007e70 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe fd91 	bl	800635c <HAL_UART_GetState>
 800783a:	4603      	mov	r3, r0
 800783c:	2b22      	cmp	r3, #34	@ 0x22
 800783e:	d007      	beq.n	8007850 <ATC_TxWait+0x3a>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe fd89 	bl	800635c <HAL_UART_GetState>
 800784a:	4603      	mov	r3, r0
 800784c:	2b20      	cmp	r3, #32
 800784e:	d102      	bne.n	8007856 <ATC_TxWait+0x40>
    {
      answer = true;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
      break;
 8007854:	e01c      	b.n	8007890 <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fd7e 	bl	800635c <HAL_UART_GetState>
 8007860:	4603      	mov	r3, r0
 8007862:	2be0      	cmp	r3, #224	@ 0xe0
 8007864:	d014      	beq.n	8007890 <ATC_TxWait+0x7a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fd76 	bl	800635c <HAL_UART_GetState>
 8007870:	4603      	mov	r3, r0
 8007872:	2ba0      	cmp	r3, #160	@ 0xa0
 8007874:	d00c      	beq.n	8007890 <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8007876:	f7fb f9c3 	bl	8002c00 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d8d1      	bhi.n	800782a <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe f996 	bl	8005bbc <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	8b1b      	ldrh	r3, [r3, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d024      	beq.n	80078f4 <ATC_CheckEvents+0x5a>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	e019      	b.n	80078e4 <ATC_CheckEvents+0x4a>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	4413      	add	r3, r2
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4619      	mov	r1, r3
 80078c2:	f000 fc71 	bl	80081a8 <strstr>
 80078c6:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <ATC_CheckEvents+0x44>
      {
        hAtc->psEvents[ev].EventCallback(found);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	4413      	add	r3, r2
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68b8      	ldr	r0, [r7, #8]
 80078dc:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d3e0      	bcc.n	80078b0 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7ff ff44 	bl	800777c <ATC_RxFlush>
  }
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	8b1b      	ldrh	r3, [r3, #24]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d023      	beq.n	800795a <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007912:	2300      	movs	r3, #0
 8007914:	81bb      	strh	r3, [r7, #12]
 8007916:	e01b      	b.n	8007950 <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800791c:	89ba      	ldrh	r2, [r7, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	320a      	adds	r2, #10
 8007922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007926:	4619      	mov	r1, r3
 8007928:	f000 fc3e 	bl	80081a8 <strstr>
 800792c:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8007940:	89bb      	ldrh	r3, [r7, #12]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	3301      	adds	r3, #1
 8007946:	73fb      	strb	r3, [r7, #15]
        break;
 8007948:	e007      	b.n	800795a <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 800794a:	89bb      	ldrh	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	81bb      	strh	r3, [r7, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8adb      	ldrh	r3, [r3, #22]
 8007954:	89ba      	ldrh	r2, [r7, #12]
 8007956:	429a      	cmp	r2, r3
 8007958:	d3de      	bcc.n	8007918 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe fd11 	bl	8006398 <HAL_UART_GetError>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01e      	beq.n	80079ba <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe f97e 	bl	8005c8c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	69d9      	ldr	r1, [r3, #28]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8a9b      	ldrh	r3, [r3, #20]
 800799c:	461a      	mov	r2, r3
 800799e:	f7fe f8b0 	bl	8005b02 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0208 	bic.w	r2, r2, #8
 80079b8:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fccc 	bl	800635c <HAL_UART_GetState>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b22      	cmp	r3, #34	@ 0x22
 80079c8:	d026      	beq.n	8007a18 <ATC_CheckErrors+0xb4>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fcc4 	bl	800635c <HAL_UART_GetState>
 80079d4:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80079d6:	2b23      	cmp	r3, #35	@ 0x23
 80079d8:	d01e      	beq.n	8007a18 <ATC_CheckErrors+0xb4>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
    HAL_UART_AbortReceive(hAtc->hUart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe f94f 	bl	8005c8c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69d9      	ldr	r1, [r3, #28]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	8a9b      	ldrh	r3, [r3, #20]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f7fe f881 	bl	8005b02 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0208 	bic.w	r2, r2, #8
 8007a16:	601a      	str	r2, [r3, #0]
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007a30:	2300      	movs	r3, #0
 8007a32:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d074      	beq.n	8007b24 <ATC_Init+0x104>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d071      	beq.n	8007b24 <ATC_Init+0x104>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007a40:	223c      	movs	r2, #60	@ 0x3c
 8007a42:	2100      	movs	r1, #0
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fb85 	bl	8008154 <memset>
    if (pName != NULL)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d006      	beq.n	8007a5e <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3304      	adds	r3, #4
 8007a54:	2207      	movs	r2, #7
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fb92 	bl	8008182 <strncpy>
    }
    hAtc->hUart = hUart;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8007a64:	88fb      	ldrh	r3, [r7, #6]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fe61 	bl	800772e <ATC_Malloc>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04d      	beq.n	8007b16 <ATC_Init+0xf6>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	88fa      	ldrh	r2, [r7, #6]
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fb66 	bl	8008154 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8007a88:	88fb      	ldrh	r3, [r7, #6]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff fe4f 	bl	800772e <ATC_Malloc>
 8007a90:	4602      	mov	r2, r0
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d03d      	beq.n	8007b1a <ATC_Init+0xfa>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fb54 	bl	8008154 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fe3d 	bl	800772e <ATC_Malloc>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d02d      	beq.n	8007b1e <ATC_Init+0xfe>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fb42 	bl	8008154 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	69d9      	ldr	r1, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8a9b      	ldrh	r3, [r3, #20]
 8007aec:	461a      	mov	r2, r3
 8007aee:	f7fe f808 	bl	8005b02 <HAL_UARTEx_ReceiveToIdle_DMA>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d114      	bne.n	8007b22 <ATC_Init+0x102>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0208 	bic.w	r2, r2, #8
 8007b0e:	601a      	str	r2, [r3, #0]
    answer = true;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
 8007b14:	e006      	b.n	8007b24 <ATC_Init+0x104>
      break;
 8007b16:	bf00      	nop
 8007b18:	e004      	b.n	8007b24 <ATC_Init+0x104>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <ATC_Init+0x104>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <ATC_Init+0x104>
      break;
 8007b22:	bf00      	nop

  } while (0);

  if (answer == false)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	f083 0301 	eor.w	r3, r3, #1
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d016      	beq.n	8007b5e <ATC_Init+0x13e>
  {
    if (hAtc->pRxBuff != NULL)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <ATC_Init+0x122>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	331c      	adds	r3, #28
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff fe06 	bl	800774e <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <ATC_Init+0x134>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3324      	adds	r3, #36	@ 0x24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fdfd 	bl	800774e <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007b54:	223c      	movs	r2, #60	@ 0x3c
 8007b56:	2100      	movs	r1, #0
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fafb 	bl	8008154 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
  uint32_t ev = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01d      	beq.n	8007bbc <ATC_SetEvents+0x54>
    {
      break;
    }
    if (psEvents == NULL)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01c      	beq.n	8007bc0 <ATC_SetEvents+0x58>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8007b86:	e002      	b.n	8007b8e <ATC_SetEvents+0x26>
    {
      ev++;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	4413      	add	r3, r2
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d006      	beq.n	8007baa <ATC_SetEvents+0x42>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1ee      	bne.n	8007b88 <ATC_SetEvents+0x20>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	611a      	str	r2, [r3, #16]
    answer = true;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
 8007bba:	e002      	b.n	8007bc2 <ATC_SetEvents+0x5a>
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e000      	b.n	8007bc2 <ATC_SetEvents+0x5a>
      break;
 8007bc0:	bf00      	nop

  } while (0);

  return answer;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fec3 	bl	8007964 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff fe5b 	bl	800789a <ATC_CheckEvents>
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b08d      	sub	sp, #52	@ 0x34
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fdee 	bl	80077e0 <ATC_TxBusy>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8007c0a:	f06f 0303 	mvn.w	r3, #3
 8007c0e:	e0c8      	b.n	8007da2 <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 8007c10:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	d902      	bls.n	8007c1e <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 8007c18:	f06f 0304 	mvn.w	r3, #4
 8007c1c:	e0c1      	b.n	8007da2 <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fea0 	bl	8007964 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8007c24:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007c28:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c2e:	e04b      	b.n	8007cc8 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	1d1a      	adds	r2, r3, #4
 8007c34:	617a      	str	r2, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8007c3a:	69b8      	ldr	r0, [r7, #24]
 8007c3c:	f7f8 fac8 	bl	80001d0 <strlen>
 8007c40:	4603      	mov	r3, r0
 8007c42:	3301      	adds	r3, #1
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fd72 	bl	800772e <ATC_Malloc>
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c50:	320a      	adds	r2, #10
 8007c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c5a:	320a      	adds	r2, #10
 8007c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d119      	bne.n	8007c98 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c6a:	e00d      	b.n	8007c88 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8007c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c70:	330a      	adds	r3, #10
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fd68 	bl	800774e <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8007c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c82:	3301      	adds	r3, #1
 8007c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	dcec      	bgt.n	8007c6c <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 8007c92:	f06f 0302 	mvn.w	r3, #2
 8007c96:	e084      	b.n	8007da2 <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c9c:	320a      	adds	r2, #10
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	69b9      	ldr	r1, [r7, #24]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fad1 	bl	800824c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cae:	320a      	adds	r2, #10
 8007cb0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007cb4:	69b8      	ldr	r0, [r7, #24]
 8007cb6:	f7f8 fa8b 	bl	80001d0 <strlen>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4423      	add	r3, r4
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8007cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cc8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	dbae      	blt.n	8007c30 <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7ff fd52 	bl	800777c <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8007cd8:	68b8      	ldr	r0, [r7, #8]
 8007cda:	f7f8 fa79 	bl	80001d0 <strlen>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68b9      	ldr	r1, [r7, #8]
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff fd5b 	bl	80077a2 <ATC_TxRaw>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f083 0301 	eor.w	r3, r3, #1
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007cfe:	e00d      	b.n	8007d1c <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff fd87 	bl	8007816 <ATC_TxWait>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f083 0301 	eor.w	r3, r3, #1
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8007d14:	f06f 0301 	mvn.w	r3, #1
 8007d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007d1a:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8007d1c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d022      	beq.n	8007d6a <ATC_SendReceive+0x17e>
 8007d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d11f      	bne.n	8007d6a <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 8007d2a:	f7fa ff69 	bl	8002c00 <HAL_GetTick>
 8007d2e:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 8007d30:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8007d3a:	e00e      	b.n	8007d5a <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	f000 f897 	bl	8007e70 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff fdd9 	bl	80078fc <ATC_CheckResponse>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 8007d4e:	7ffb      	ldrb	r3, [r7, #31]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 8007d54:	7ffb      	ldrb	r3, [r7, #31]
 8007d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d58:	e007      	b.n	8007d6a <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 8007d5a:	f7fa ff51 	bl	8002c00 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d8e8      	bhi.n	8007d3c <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d76:	e00d      	b.n	8007d94 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8007d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d7c:	330a      	adds	r3, #10
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff fce2 	bl	800774e <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8007d8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007d94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007d98:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d3eb      	bcc.n	8007d78 <ATC_SendReceive+0x18c>
  }
  return answer;
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3734      	adds	r7, #52	@ 0x34
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd90      	pop	{r4, r7, pc}

08007daa <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8007db6:	887a      	ldrh	r2, [r7, #2]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	8a9b      	ldrh	r3, [r3, #20]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8b1b      	ldrh	r3, [r3, #24]
 8007dc2:	1acb      	subs	r3, r1, r3
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	dd05      	ble.n	8007dd4 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8a9a      	ldrh	r2, [r3, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	8b1b      	ldrh	r3, [r3, #24]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	8b12      	ldrh	r2, [r2, #24]
 8007ddc:	1898      	adds	r0, r3, r2
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	69db      	ldr	r3, [r3, #28]
 8007de2:	887a      	ldrh	r2, [r7, #2]
 8007de4:	4619      	mov	r1, r3
 8007de6:	f000 fa39 	bl	800825c <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	8b1a      	ldrh	r2, [r3, #24]
 8007dee:	887b      	ldrh	r3, [r7, #2]
 8007df0:	4413      	add	r3, r2
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69d9      	ldr	r1, [r3, #28]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8a9b      	ldrh	r3, [r3, #20]
 8007e04:	461a      	mov	r2, r3
 8007e06:	f7fd fe7c 	bl	8005b02 <HAL_UARTEx_ReceiveToIdle_DMA>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10c      	bne.n	8007e2a <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0208 	bic.w	r2, r2, #8
 8007e26:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8007e28:	e01e      	b.n	8007e68 <ATC_IdleLineCallback+0xbe>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fd ff27 	bl	8005c8c <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69d9      	ldr	r1, [r3, #28]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	8a9b      	ldrh	r3, [r3, #20]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f7fd fe59 	bl	8005b02 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0208 	bic.w	r2, r2, #8
 8007e66:	601a      	str	r2, [r3, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7fa fecd 	bl	8002c18 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <atoi>:
 8007e86:	220a      	movs	r2, #10
 8007e88:	2100      	movs	r1, #0
 8007e8a:	f000 b939 	b.w	8008100 <strtol>
	...

08007e90 <malloc>:
 8007e90:	4b02      	ldr	r3, [pc, #8]	@ (8007e9c <malloc+0xc>)
 8007e92:	4601      	mov	r1, r0
 8007e94:	6818      	ldr	r0, [r3, #0]
 8007e96:	f000 b82d 	b.w	8007ef4 <_malloc_r>
 8007e9a:	bf00      	nop
 8007e9c:	2000000c 	.word	0x2000000c

08007ea0 <free>:
 8007ea0:	4b02      	ldr	r3, [pc, #8]	@ (8007eac <free+0xc>)
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	f000 b9e7 	b.w	8008278 <_free_r>
 8007eaa:	bf00      	nop
 8007eac:	2000000c 	.word	0x2000000c

08007eb0 <sbrk_aligned>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	4e0f      	ldr	r6, [pc, #60]	@ (8007ef0 <sbrk_aligned+0x40>)
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	6831      	ldr	r1, [r6, #0]
 8007eb8:	4605      	mov	r5, r0
 8007eba:	b911      	cbnz	r1, 8007ec2 <sbrk_aligned+0x12>
 8007ebc:	f000 f98a 	bl	80081d4 <_sbrk_r>
 8007ec0:	6030      	str	r0, [r6, #0]
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 f985 	bl	80081d4 <_sbrk_r>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	d103      	bne.n	8007ed6 <sbrk_aligned+0x26>
 8007ece:	f04f 34ff 	mov.w	r4, #4294967295
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	bd70      	pop	{r4, r5, r6, pc}
 8007ed6:	1cc4      	adds	r4, r0, #3
 8007ed8:	f024 0403 	bic.w	r4, r4, #3
 8007edc:	42a0      	cmp	r0, r4
 8007ede:	d0f8      	beq.n	8007ed2 <sbrk_aligned+0x22>
 8007ee0:	1a21      	subs	r1, r4, r0
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 f976 	bl	80081d4 <_sbrk_r>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d1f2      	bne.n	8007ed2 <sbrk_aligned+0x22>
 8007eec:	e7ef      	b.n	8007ece <sbrk_aligned+0x1e>
 8007eee:	bf00      	nop
 8007ef0:	20000ad8 	.word	0x20000ad8

08007ef4 <_malloc_r>:
 8007ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef8:	1ccd      	adds	r5, r1, #3
 8007efa:	f025 0503 	bic.w	r5, r5, #3
 8007efe:	3508      	adds	r5, #8
 8007f00:	2d0c      	cmp	r5, #12
 8007f02:	bf38      	it	cc
 8007f04:	250c      	movcc	r5, #12
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	4606      	mov	r6, r0
 8007f0a:	db01      	blt.n	8007f10 <_malloc_r+0x1c>
 8007f0c:	42a9      	cmp	r1, r5
 8007f0e:	d904      	bls.n	8007f1a <_malloc_r+0x26>
 8007f10:	230c      	movs	r3, #12
 8007f12:	6033      	str	r3, [r6, #0]
 8007f14:	2000      	movs	r0, #0
 8007f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ff0 <_malloc_r+0xfc>
 8007f1e:	f000 f869 	bl	8007ff4 <__malloc_lock>
 8007f22:	f8d8 3000 	ldr.w	r3, [r8]
 8007f26:	461c      	mov	r4, r3
 8007f28:	bb44      	cbnz	r4, 8007f7c <_malloc_r+0x88>
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f7ff ffbf 	bl	8007eb0 <sbrk_aligned>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	4604      	mov	r4, r0
 8007f36:	d158      	bne.n	8007fea <_malloc_r+0xf6>
 8007f38:	f8d8 4000 	ldr.w	r4, [r8]
 8007f3c:	4627      	mov	r7, r4
 8007f3e:	2f00      	cmp	r7, #0
 8007f40:	d143      	bne.n	8007fca <_malloc_r+0xd6>
 8007f42:	2c00      	cmp	r4, #0
 8007f44:	d04b      	beq.n	8007fde <_malloc_r+0xea>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	4639      	mov	r1, r7
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	eb04 0903 	add.w	r9, r4, r3
 8007f50:	f000 f940 	bl	80081d4 <_sbrk_r>
 8007f54:	4581      	cmp	r9, r0
 8007f56:	d142      	bne.n	8007fde <_malloc_r+0xea>
 8007f58:	6821      	ldr	r1, [r4, #0]
 8007f5a:	1a6d      	subs	r5, r5, r1
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f7ff ffa6 	bl	8007eb0 <sbrk_aligned>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d03a      	beq.n	8007fde <_malloc_r+0xea>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	442b      	add	r3, r5
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	bb62      	cbnz	r2, 8007fd0 <_malloc_r+0xdc>
 8007f76:	f8c8 7000 	str.w	r7, [r8]
 8007f7a:	e00f      	b.n	8007f9c <_malloc_r+0xa8>
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	1b52      	subs	r2, r2, r5
 8007f80:	d420      	bmi.n	8007fc4 <_malloc_r+0xd0>
 8007f82:	2a0b      	cmp	r2, #11
 8007f84:	d917      	bls.n	8007fb6 <_malloc_r+0xc2>
 8007f86:	1961      	adds	r1, r4, r5
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	6025      	str	r5, [r4, #0]
 8007f8c:	bf18      	it	ne
 8007f8e:	6059      	strne	r1, [r3, #4]
 8007f90:	6863      	ldr	r3, [r4, #4]
 8007f92:	bf08      	it	eq
 8007f94:	f8c8 1000 	streq.w	r1, [r8]
 8007f98:	5162      	str	r2, [r4, r5]
 8007f9a:	604b      	str	r3, [r1, #4]
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f000 f82f 	bl	8008000 <__malloc_unlock>
 8007fa2:	f104 000b 	add.w	r0, r4, #11
 8007fa6:	1d23      	adds	r3, r4, #4
 8007fa8:	f020 0007 	bic.w	r0, r0, #7
 8007fac:	1ac2      	subs	r2, r0, r3
 8007fae:	bf1c      	itt	ne
 8007fb0:	1a1b      	subne	r3, r3, r0
 8007fb2:	50a3      	strne	r3, [r4, r2]
 8007fb4:	e7af      	b.n	8007f16 <_malloc_r+0x22>
 8007fb6:	6862      	ldr	r2, [r4, #4]
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	bf0c      	ite	eq
 8007fbc:	f8c8 2000 	streq.w	r2, [r8]
 8007fc0:	605a      	strne	r2, [r3, #4]
 8007fc2:	e7eb      	b.n	8007f9c <_malloc_r+0xa8>
 8007fc4:	4623      	mov	r3, r4
 8007fc6:	6864      	ldr	r4, [r4, #4]
 8007fc8:	e7ae      	b.n	8007f28 <_malloc_r+0x34>
 8007fca:	463c      	mov	r4, r7
 8007fcc:	687f      	ldr	r7, [r7, #4]
 8007fce:	e7b6      	b.n	8007f3e <_malloc_r+0x4a>
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	d1fb      	bne.n	8007fd0 <_malloc_r+0xdc>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	6053      	str	r3, [r2, #4]
 8007fdc:	e7de      	b.n	8007f9c <_malloc_r+0xa8>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	6033      	str	r3, [r6, #0]
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f000 f80c 	bl	8008000 <__malloc_unlock>
 8007fe8:	e794      	b.n	8007f14 <_malloc_r+0x20>
 8007fea:	6005      	str	r5, [r0, #0]
 8007fec:	e7d6      	b.n	8007f9c <_malloc_r+0xa8>
 8007fee:	bf00      	nop
 8007ff0:	20000adc 	.word	0x20000adc

08007ff4 <__malloc_lock>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	@ (8007ffc <__malloc_lock+0x8>)
 8007ff6:	f000 b927 	b.w	8008248 <__retarget_lock_acquire_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	20000c1c 	.word	0x20000c1c

08008000 <__malloc_unlock>:
 8008000:	4801      	ldr	r0, [pc, #4]	@ (8008008 <__malloc_unlock+0x8>)
 8008002:	f000 b922 	b.w	800824a <__retarget_lock_release_recursive>
 8008006:	bf00      	nop
 8008008:	20000c1c 	.word	0x20000c1c

0800800c <_strtol_l.constprop.0>:
 800800c:	2b24      	cmp	r3, #36	@ 0x24
 800800e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008012:	4686      	mov	lr, r0
 8008014:	4690      	mov	r8, r2
 8008016:	d801      	bhi.n	800801c <_strtol_l.constprop.0+0x10>
 8008018:	2b01      	cmp	r3, #1
 800801a:	d106      	bne.n	800802a <_strtol_l.constprop.0+0x1e>
 800801c:	f000 f8ea 	bl	80081f4 <__errno>
 8008020:	2316      	movs	r3, #22
 8008022:	6003      	str	r3, [r0, #0]
 8008024:	2000      	movs	r0, #0
 8008026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802a:	4834      	ldr	r0, [pc, #208]	@ (80080fc <_strtol_l.constprop.0+0xf0>)
 800802c:	460d      	mov	r5, r1
 800802e:	462a      	mov	r2, r5
 8008030:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008034:	5d06      	ldrb	r6, [r0, r4]
 8008036:	f016 0608 	ands.w	r6, r6, #8
 800803a:	d1f8      	bne.n	800802e <_strtol_l.constprop.0+0x22>
 800803c:	2c2d      	cmp	r4, #45	@ 0x2d
 800803e:	d12d      	bne.n	800809c <_strtol_l.constprop.0+0x90>
 8008040:	782c      	ldrb	r4, [r5, #0]
 8008042:	2601      	movs	r6, #1
 8008044:	1c95      	adds	r5, r2, #2
 8008046:	f033 0210 	bics.w	r2, r3, #16
 800804a:	d109      	bne.n	8008060 <_strtol_l.constprop.0+0x54>
 800804c:	2c30      	cmp	r4, #48	@ 0x30
 800804e:	d12a      	bne.n	80080a6 <_strtol_l.constprop.0+0x9a>
 8008050:	782a      	ldrb	r2, [r5, #0]
 8008052:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008056:	2a58      	cmp	r2, #88	@ 0x58
 8008058:	d125      	bne.n	80080a6 <_strtol_l.constprop.0+0x9a>
 800805a:	786c      	ldrb	r4, [r5, #1]
 800805c:	2310      	movs	r3, #16
 800805e:	3502      	adds	r5, #2
 8008060:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008064:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008068:	2200      	movs	r2, #0
 800806a:	fbbc f9f3 	udiv	r9, ip, r3
 800806e:	4610      	mov	r0, r2
 8008070:	fb03 ca19 	mls	sl, r3, r9, ip
 8008074:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008078:	2f09      	cmp	r7, #9
 800807a:	d81b      	bhi.n	80080b4 <_strtol_l.constprop.0+0xa8>
 800807c:	463c      	mov	r4, r7
 800807e:	42a3      	cmp	r3, r4
 8008080:	dd27      	ble.n	80080d2 <_strtol_l.constprop.0+0xc6>
 8008082:	1c57      	adds	r7, r2, #1
 8008084:	d007      	beq.n	8008096 <_strtol_l.constprop.0+0x8a>
 8008086:	4581      	cmp	r9, r0
 8008088:	d320      	bcc.n	80080cc <_strtol_l.constprop.0+0xc0>
 800808a:	d101      	bne.n	8008090 <_strtol_l.constprop.0+0x84>
 800808c:	45a2      	cmp	sl, r4
 800808e:	db1d      	blt.n	80080cc <_strtol_l.constprop.0+0xc0>
 8008090:	fb00 4003 	mla	r0, r0, r3, r4
 8008094:	2201      	movs	r2, #1
 8008096:	f815 4b01 	ldrb.w	r4, [r5], #1
 800809a:	e7eb      	b.n	8008074 <_strtol_l.constprop.0+0x68>
 800809c:	2c2b      	cmp	r4, #43	@ 0x2b
 800809e:	bf04      	itt	eq
 80080a0:	782c      	ldrbeq	r4, [r5, #0]
 80080a2:	1c95      	addeq	r5, r2, #2
 80080a4:	e7cf      	b.n	8008046 <_strtol_l.constprop.0+0x3a>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1da      	bne.n	8008060 <_strtol_l.constprop.0+0x54>
 80080aa:	2c30      	cmp	r4, #48	@ 0x30
 80080ac:	bf0c      	ite	eq
 80080ae:	2308      	moveq	r3, #8
 80080b0:	230a      	movne	r3, #10
 80080b2:	e7d5      	b.n	8008060 <_strtol_l.constprop.0+0x54>
 80080b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080b8:	2f19      	cmp	r7, #25
 80080ba:	d801      	bhi.n	80080c0 <_strtol_l.constprop.0+0xb4>
 80080bc:	3c37      	subs	r4, #55	@ 0x37
 80080be:	e7de      	b.n	800807e <_strtol_l.constprop.0+0x72>
 80080c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080c4:	2f19      	cmp	r7, #25
 80080c6:	d804      	bhi.n	80080d2 <_strtol_l.constprop.0+0xc6>
 80080c8:	3c57      	subs	r4, #87	@ 0x57
 80080ca:	e7d8      	b.n	800807e <_strtol_l.constprop.0+0x72>
 80080cc:	f04f 32ff 	mov.w	r2, #4294967295
 80080d0:	e7e1      	b.n	8008096 <_strtol_l.constprop.0+0x8a>
 80080d2:	1c53      	adds	r3, r2, #1
 80080d4:	d108      	bne.n	80080e8 <_strtol_l.constprop.0+0xdc>
 80080d6:	2322      	movs	r3, #34	@ 0x22
 80080d8:	f8ce 3000 	str.w	r3, [lr]
 80080dc:	4660      	mov	r0, ip
 80080de:	f1b8 0f00 	cmp.w	r8, #0
 80080e2:	d0a0      	beq.n	8008026 <_strtol_l.constprop.0+0x1a>
 80080e4:	1e69      	subs	r1, r5, #1
 80080e6:	e006      	b.n	80080f6 <_strtol_l.constprop.0+0xea>
 80080e8:	b106      	cbz	r6, 80080ec <_strtol_l.constprop.0+0xe0>
 80080ea:	4240      	negs	r0, r0
 80080ec:	f1b8 0f00 	cmp.w	r8, #0
 80080f0:	d099      	beq.n	8008026 <_strtol_l.constprop.0+0x1a>
 80080f2:	2a00      	cmp	r2, #0
 80080f4:	d1f6      	bne.n	80080e4 <_strtol_l.constprop.0+0xd8>
 80080f6:	f8c8 1000 	str.w	r1, [r8]
 80080fa:	e794      	b.n	8008026 <_strtol_l.constprop.0+0x1a>
 80080fc:	08008b51 	.word	0x08008b51

08008100 <strtol>:
 8008100:	4613      	mov	r3, r2
 8008102:	460a      	mov	r2, r1
 8008104:	4601      	mov	r1, r0
 8008106:	4802      	ldr	r0, [pc, #8]	@ (8008110 <strtol+0x10>)
 8008108:	6800      	ldr	r0, [r0, #0]
 800810a:	f7ff bf7f 	b.w	800800c <_strtol_l.constprop.0>
 800810e:	bf00      	nop
 8008110:	2000000c 	.word	0x2000000c

08008114 <siprintf>:
 8008114:	b40e      	push	{r1, r2, r3}
 8008116:	b500      	push	{lr}
 8008118:	b09c      	sub	sp, #112	@ 0x70
 800811a:	ab1d      	add	r3, sp, #116	@ 0x74
 800811c:	9002      	str	r0, [sp, #8]
 800811e:	9006      	str	r0, [sp, #24]
 8008120:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008124:	4809      	ldr	r0, [pc, #36]	@ (800814c <siprintf+0x38>)
 8008126:	9107      	str	r1, [sp, #28]
 8008128:	9104      	str	r1, [sp, #16]
 800812a:	4909      	ldr	r1, [pc, #36]	@ (8008150 <siprintf+0x3c>)
 800812c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008130:	9105      	str	r1, [sp, #20]
 8008132:	6800      	ldr	r0, [r0, #0]
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	a902      	add	r1, sp, #8
 8008138:	f000 f944 	bl	80083c4 <_svfiprintf_r>
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	b01c      	add	sp, #112	@ 0x70
 8008144:	f85d eb04 	ldr.w	lr, [sp], #4
 8008148:	b003      	add	sp, #12
 800814a:	4770      	bx	lr
 800814c:	2000000c 	.word	0x2000000c
 8008150:	ffff0208 	.word	0xffff0208

08008154 <memset>:
 8008154:	4402      	add	r2, r0
 8008156:	4603      	mov	r3, r0
 8008158:	4293      	cmp	r3, r2
 800815a:	d100      	bne.n	800815e <memset+0xa>
 800815c:	4770      	bx	lr
 800815e:	f803 1b01 	strb.w	r1, [r3], #1
 8008162:	e7f9      	b.n	8008158 <memset+0x4>

08008164 <strcat>:
 8008164:	b510      	push	{r4, lr}
 8008166:	4602      	mov	r2, r0
 8008168:	7814      	ldrb	r4, [r2, #0]
 800816a:	4613      	mov	r3, r2
 800816c:	3201      	adds	r2, #1
 800816e:	2c00      	cmp	r4, #0
 8008170:	d1fa      	bne.n	8008168 <strcat+0x4>
 8008172:	3b01      	subs	r3, #1
 8008174:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008178:	f803 2f01 	strb.w	r2, [r3, #1]!
 800817c:	2a00      	cmp	r2, #0
 800817e:	d1f9      	bne.n	8008174 <strcat+0x10>
 8008180:	bd10      	pop	{r4, pc}

08008182 <strncpy>:
 8008182:	b510      	push	{r4, lr}
 8008184:	3901      	subs	r1, #1
 8008186:	4603      	mov	r3, r0
 8008188:	b132      	cbz	r2, 8008198 <strncpy+0x16>
 800818a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800818e:	f803 4b01 	strb.w	r4, [r3], #1
 8008192:	3a01      	subs	r2, #1
 8008194:	2c00      	cmp	r4, #0
 8008196:	d1f7      	bne.n	8008188 <strncpy+0x6>
 8008198:	441a      	add	r2, r3
 800819a:	2100      	movs	r1, #0
 800819c:	4293      	cmp	r3, r2
 800819e:	d100      	bne.n	80081a2 <strncpy+0x20>
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	f803 1b01 	strb.w	r1, [r3], #1
 80081a6:	e7f9      	b.n	800819c <strncpy+0x1a>

080081a8 <strstr>:
 80081a8:	780a      	ldrb	r2, [r1, #0]
 80081aa:	b570      	push	{r4, r5, r6, lr}
 80081ac:	b96a      	cbnz	r2, 80081ca <strstr+0x22>
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d109      	bne.n	80081c8 <strstr+0x20>
 80081b4:	460c      	mov	r4, r1
 80081b6:	4605      	mov	r5, r0
 80081b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f6      	beq.n	80081ae <strstr+0x6>
 80081c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80081c4:	429e      	cmp	r6, r3
 80081c6:	d0f7      	beq.n	80081b8 <strstr+0x10>
 80081c8:	3001      	adds	r0, #1
 80081ca:	7803      	ldrb	r3, [r0, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1ef      	bne.n	80081b0 <strstr+0x8>
 80081d0:	4618      	mov	r0, r3
 80081d2:	e7ec      	b.n	80081ae <strstr+0x6>

080081d4 <_sbrk_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4d06      	ldr	r5, [pc, #24]	@ (80081f0 <_sbrk_r+0x1c>)
 80081d8:	2300      	movs	r3, #0
 80081da:	4604      	mov	r4, r0
 80081dc:	4608      	mov	r0, r1
 80081de:	602b      	str	r3, [r5, #0]
 80081e0:	f7fa f8a6 	bl	8002330 <_sbrk>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_sbrk_r+0x1a>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_sbrk_r+0x1a>
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	20000c18 	.word	0x20000c18

080081f4 <__errno>:
 80081f4:	4b01      	ldr	r3, [pc, #4]	@ (80081fc <__errno+0x8>)
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	2000000c 	.word	0x2000000c

08008200 <__libc_init_array>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4d0d      	ldr	r5, [pc, #52]	@ (8008238 <__libc_init_array+0x38>)
 8008204:	4c0d      	ldr	r4, [pc, #52]	@ (800823c <__libc_init_array+0x3c>)
 8008206:	1b64      	subs	r4, r4, r5
 8008208:	10a4      	asrs	r4, r4, #2
 800820a:	2600      	movs	r6, #0
 800820c:	42a6      	cmp	r6, r4
 800820e:	d109      	bne.n	8008224 <__libc_init_array+0x24>
 8008210:	4d0b      	ldr	r5, [pc, #44]	@ (8008240 <__libc_init_array+0x40>)
 8008212:	4c0c      	ldr	r4, [pc, #48]	@ (8008244 <__libc_init_array+0x44>)
 8008214:	f000 fbb0 	bl	8008978 <_init>
 8008218:	1b64      	subs	r4, r4, r5
 800821a:	10a4      	asrs	r4, r4, #2
 800821c:	2600      	movs	r6, #0
 800821e:	42a6      	cmp	r6, r4
 8008220:	d105      	bne.n	800822e <__libc_init_array+0x2e>
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	f855 3b04 	ldr.w	r3, [r5], #4
 8008228:	4798      	blx	r3
 800822a:	3601      	adds	r6, #1
 800822c:	e7ee      	b.n	800820c <__libc_init_array+0xc>
 800822e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008232:	4798      	blx	r3
 8008234:	3601      	adds	r6, #1
 8008236:	e7f2      	b.n	800821e <__libc_init_array+0x1e>
 8008238:	08008c8c 	.word	0x08008c8c
 800823c:	08008c8c 	.word	0x08008c8c
 8008240:	08008c8c 	.word	0x08008c8c
 8008244:	08008c90 	.word	0x08008c90

08008248 <__retarget_lock_acquire_recursive>:
 8008248:	4770      	bx	lr

0800824a <__retarget_lock_release_recursive>:
 800824a:	4770      	bx	lr

0800824c <strcpy>:
 800824c:	4603      	mov	r3, r0
 800824e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008252:	f803 2b01 	strb.w	r2, [r3], #1
 8008256:	2a00      	cmp	r2, #0
 8008258:	d1f9      	bne.n	800824e <strcpy+0x2>
 800825a:	4770      	bx	lr

0800825c <memcpy>:
 800825c:	440a      	add	r2, r1
 800825e:	4291      	cmp	r1, r2
 8008260:	f100 33ff 	add.w	r3, r0, #4294967295
 8008264:	d100      	bne.n	8008268 <memcpy+0xc>
 8008266:	4770      	bx	lr
 8008268:	b510      	push	{r4, lr}
 800826a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800826e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008272:	4291      	cmp	r1, r2
 8008274:	d1f9      	bne.n	800826a <memcpy+0xe>
 8008276:	bd10      	pop	{r4, pc}

08008278 <_free_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4605      	mov	r5, r0
 800827c:	2900      	cmp	r1, #0
 800827e:	d041      	beq.n	8008304 <_free_r+0x8c>
 8008280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008284:	1f0c      	subs	r4, r1, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	bfb8      	it	lt
 800828a:	18e4      	addlt	r4, r4, r3
 800828c:	f7ff feb2 	bl	8007ff4 <__malloc_lock>
 8008290:	4a1d      	ldr	r2, [pc, #116]	@ (8008308 <_free_r+0x90>)
 8008292:	6813      	ldr	r3, [r2, #0]
 8008294:	b933      	cbnz	r3, 80082a4 <_free_r+0x2c>
 8008296:	6063      	str	r3, [r4, #4]
 8008298:	6014      	str	r4, [r2, #0]
 800829a:	4628      	mov	r0, r5
 800829c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082a0:	f7ff beae 	b.w	8008000 <__malloc_unlock>
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	d908      	bls.n	80082ba <_free_r+0x42>
 80082a8:	6820      	ldr	r0, [r4, #0]
 80082aa:	1821      	adds	r1, r4, r0
 80082ac:	428b      	cmp	r3, r1
 80082ae:	bf01      	itttt	eq
 80082b0:	6819      	ldreq	r1, [r3, #0]
 80082b2:	685b      	ldreq	r3, [r3, #4]
 80082b4:	1809      	addeq	r1, r1, r0
 80082b6:	6021      	streq	r1, [r4, #0]
 80082b8:	e7ed      	b.n	8008296 <_free_r+0x1e>
 80082ba:	461a      	mov	r2, r3
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	b10b      	cbz	r3, 80082c4 <_free_r+0x4c>
 80082c0:	42a3      	cmp	r3, r4
 80082c2:	d9fa      	bls.n	80082ba <_free_r+0x42>
 80082c4:	6811      	ldr	r1, [r2, #0]
 80082c6:	1850      	adds	r0, r2, r1
 80082c8:	42a0      	cmp	r0, r4
 80082ca:	d10b      	bne.n	80082e4 <_free_r+0x6c>
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	4401      	add	r1, r0
 80082d0:	1850      	adds	r0, r2, r1
 80082d2:	4283      	cmp	r3, r0
 80082d4:	6011      	str	r1, [r2, #0]
 80082d6:	d1e0      	bne.n	800829a <_free_r+0x22>
 80082d8:	6818      	ldr	r0, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	6053      	str	r3, [r2, #4]
 80082de:	4408      	add	r0, r1
 80082e0:	6010      	str	r0, [r2, #0]
 80082e2:	e7da      	b.n	800829a <_free_r+0x22>
 80082e4:	d902      	bls.n	80082ec <_free_r+0x74>
 80082e6:	230c      	movs	r3, #12
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	e7d6      	b.n	800829a <_free_r+0x22>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	1821      	adds	r1, r4, r0
 80082f0:	428b      	cmp	r3, r1
 80082f2:	bf04      	itt	eq
 80082f4:	6819      	ldreq	r1, [r3, #0]
 80082f6:	685b      	ldreq	r3, [r3, #4]
 80082f8:	6063      	str	r3, [r4, #4]
 80082fa:	bf04      	itt	eq
 80082fc:	1809      	addeq	r1, r1, r0
 80082fe:	6021      	streq	r1, [r4, #0]
 8008300:	6054      	str	r4, [r2, #4]
 8008302:	e7ca      	b.n	800829a <_free_r+0x22>
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	20000adc 	.word	0x20000adc

0800830c <__ssputs_r>:
 800830c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	688e      	ldr	r6, [r1, #8]
 8008312:	461f      	mov	r7, r3
 8008314:	42be      	cmp	r6, r7
 8008316:	680b      	ldr	r3, [r1, #0]
 8008318:	4682      	mov	sl, r0
 800831a:	460c      	mov	r4, r1
 800831c:	4690      	mov	r8, r2
 800831e:	d82d      	bhi.n	800837c <__ssputs_r+0x70>
 8008320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008328:	d026      	beq.n	8008378 <__ssputs_r+0x6c>
 800832a:	6965      	ldr	r5, [r4, #20]
 800832c:	6909      	ldr	r1, [r1, #16]
 800832e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008332:	eba3 0901 	sub.w	r9, r3, r1
 8008336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800833a:	1c7b      	adds	r3, r7, #1
 800833c:	444b      	add	r3, r9
 800833e:	106d      	asrs	r5, r5, #1
 8008340:	429d      	cmp	r5, r3
 8008342:	bf38      	it	cc
 8008344:	461d      	movcc	r5, r3
 8008346:	0553      	lsls	r3, r2, #21
 8008348:	d527      	bpl.n	800839a <__ssputs_r+0x8e>
 800834a:	4629      	mov	r1, r5
 800834c:	f7ff fdd2 	bl	8007ef4 <_malloc_r>
 8008350:	4606      	mov	r6, r0
 8008352:	b360      	cbz	r0, 80083ae <__ssputs_r+0xa2>
 8008354:	6921      	ldr	r1, [r4, #16]
 8008356:	464a      	mov	r2, r9
 8008358:	f7ff ff80 	bl	800825c <memcpy>
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	6126      	str	r6, [r4, #16]
 800836a:	6165      	str	r5, [r4, #20]
 800836c:	444e      	add	r6, r9
 800836e:	eba5 0509 	sub.w	r5, r5, r9
 8008372:	6026      	str	r6, [r4, #0]
 8008374:	60a5      	str	r5, [r4, #8]
 8008376:	463e      	mov	r6, r7
 8008378:	42be      	cmp	r6, r7
 800837a:	d900      	bls.n	800837e <__ssputs_r+0x72>
 800837c:	463e      	mov	r6, r7
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	4632      	mov	r2, r6
 8008382:	4641      	mov	r1, r8
 8008384:	f000 faa8 	bl	80088d8 <memmove>
 8008388:	68a3      	ldr	r3, [r4, #8]
 800838a:	1b9b      	subs	r3, r3, r6
 800838c:	60a3      	str	r3, [r4, #8]
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	4433      	add	r3, r6
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	2000      	movs	r0, #0
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839a:	462a      	mov	r2, r5
 800839c:	f000 fab6 	bl	800890c <_realloc_r>
 80083a0:	4606      	mov	r6, r0
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d1e0      	bne.n	8008368 <__ssputs_r+0x5c>
 80083a6:	6921      	ldr	r1, [r4, #16]
 80083a8:	4650      	mov	r0, sl
 80083aa:	f7ff ff65 	bl	8008278 <_free_r>
 80083ae:	230c      	movs	r3, #12
 80083b0:	f8ca 3000 	str.w	r3, [sl]
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	f04f 30ff 	mov.w	r0, #4294967295
 80083c0:	e7e9      	b.n	8008396 <__ssputs_r+0x8a>
	...

080083c4 <_svfiprintf_r>:
 80083c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c8:	4698      	mov	r8, r3
 80083ca:	898b      	ldrh	r3, [r1, #12]
 80083cc:	061b      	lsls	r3, r3, #24
 80083ce:	b09d      	sub	sp, #116	@ 0x74
 80083d0:	4607      	mov	r7, r0
 80083d2:	460d      	mov	r5, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	d510      	bpl.n	80083fa <_svfiprintf_r+0x36>
 80083d8:	690b      	ldr	r3, [r1, #16]
 80083da:	b973      	cbnz	r3, 80083fa <_svfiprintf_r+0x36>
 80083dc:	2140      	movs	r1, #64	@ 0x40
 80083de:	f7ff fd89 	bl	8007ef4 <_malloc_r>
 80083e2:	6028      	str	r0, [r5, #0]
 80083e4:	6128      	str	r0, [r5, #16]
 80083e6:	b930      	cbnz	r0, 80083f6 <_svfiprintf_r+0x32>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	b01d      	add	sp, #116	@ 0x74
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	2340      	movs	r3, #64	@ 0x40
 80083f8:	616b      	str	r3, [r5, #20]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083fe:	2320      	movs	r3, #32
 8008400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008404:	f8cd 800c 	str.w	r8, [sp, #12]
 8008408:	2330      	movs	r3, #48	@ 0x30
 800840a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085a8 <_svfiprintf_r+0x1e4>
 800840e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008412:	f04f 0901 	mov.w	r9, #1
 8008416:	4623      	mov	r3, r4
 8008418:	469a      	mov	sl, r3
 800841a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800841e:	b10a      	cbz	r2, 8008424 <_svfiprintf_r+0x60>
 8008420:	2a25      	cmp	r2, #37	@ 0x25
 8008422:	d1f9      	bne.n	8008418 <_svfiprintf_r+0x54>
 8008424:	ebba 0b04 	subs.w	fp, sl, r4
 8008428:	d00b      	beq.n	8008442 <_svfiprintf_r+0x7e>
 800842a:	465b      	mov	r3, fp
 800842c:	4622      	mov	r2, r4
 800842e:	4629      	mov	r1, r5
 8008430:	4638      	mov	r0, r7
 8008432:	f7ff ff6b 	bl	800830c <__ssputs_r>
 8008436:	3001      	adds	r0, #1
 8008438:	f000 80a7 	beq.w	800858a <_svfiprintf_r+0x1c6>
 800843c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800843e:	445a      	add	r2, fp
 8008440:	9209      	str	r2, [sp, #36]	@ 0x24
 8008442:	f89a 3000 	ldrb.w	r3, [sl]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 809f 	beq.w	800858a <_svfiprintf_r+0x1c6>
 800844c:	2300      	movs	r3, #0
 800844e:	f04f 32ff 	mov.w	r2, #4294967295
 8008452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008456:	f10a 0a01 	add.w	sl, sl, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	9307      	str	r3, [sp, #28]
 800845e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008462:	931a      	str	r3, [sp, #104]	@ 0x68
 8008464:	4654      	mov	r4, sl
 8008466:	2205      	movs	r2, #5
 8008468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846c:	484e      	ldr	r0, [pc, #312]	@ (80085a8 <_svfiprintf_r+0x1e4>)
 800846e:	f7f7 feb7 	bl	80001e0 <memchr>
 8008472:	9a04      	ldr	r2, [sp, #16]
 8008474:	b9d8      	cbnz	r0, 80084ae <_svfiprintf_r+0xea>
 8008476:	06d0      	lsls	r0, r2, #27
 8008478:	bf44      	itt	mi
 800847a:	2320      	movmi	r3, #32
 800847c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008480:	0711      	lsls	r1, r2, #28
 8008482:	bf44      	itt	mi
 8008484:	232b      	movmi	r3, #43	@ 0x2b
 8008486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800848a:	f89a 3000 	ldrb.w	r3, [sl]
 800848e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008490:	d015      	beq.n	80084be <_svfiprintf_r+0xfa>
 8008492:	9a07      	ldr	r2, [sp, #28]
 8008494:	4654      	mov	r4, sl
 8008496:	2000      	movs	r0, #0
 8008498:	f04f 0c0a 	mov.w	ip, #10
 800849c:	4621      	mov	r1, r4
 800849e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a2:	3b30      	subs	r3, #48	@ 0x30
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	d94b      	bls.n	8008540 <_svfiprintf_r+0x17c>
 80084a8:	b1b0      	cbz	r0, 80084d8 <_svfiprintf_r+0x114>
 80084aa:	9207      	str	r2, [sp, #28]
 80084ac:	e014      	b.n	80084d8 <_svfiprintf_r+0x114>
 80084ae:	eba0 0308 	sub.w	r3, r0, r8
 80084b2:	fa09 f303 	lsl.w	r3, r9, r3
 80084b6:	4313      	orrs	r3, r2
 80084b8:	9304      	str	r3, [sp, #16]
 80084ba:	46a2      	mov	sl, r4
 80084bc:	e7d2      	b.n	8008464 <_svfiprintf_r+0xa0>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	1d19      	adds	r1, r3, #4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	9103      	str	r1, [sp, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfbb      	ittet	lt
 80084ca:	425b      	neglt	r3, r3
 80084cc:	f042 0202 	orrlt.w	r2, r2, #2
 80084d0:	9307      	strge	r3, [sp, #28]
 80084d2:	9307      	strlt	r3, [sp, #28]
 80084d4:	bfb8      	it	lt
 80084d6:	9204      	strlt	r2, [sp, #16]
 80084d8:	7823      	ldrb	r3, [r4, #0]
 80084da:	2b2e      	cmp	r3, #46	@ 0x2e
 80084dc:	d10a      	bne.n	80084f4 <_svfiprintf_r+0x130>
 80084de:	7863      	ldrb	r3, [r4, #1]
 80084e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80084e2:	d132      	bne.n	800854a <_svfiprintf_r+0x186>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	1d1a      	adds	r2, r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	9203      	str	r2, [sp, #12]
 80084ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084f0:	3402      	adds	r4, #2
 80084f2:	9305      	str	r3, [sp, #20]
 80084f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085b8 <_svfiprintf_r+0x1f4>
 80084f8:	7821      	ldrb	r1, [r4, #0]
 80084fa:	2203      	movs	r2, #3
 80084fc:	4650      	mov	r0, sl
 80084fe:	f7f7 fe6f 	bl	80001e0 <memchr>
 8008502:	b138      	cbz	r0, 8008514 <_svfiprintf_r+0x150>
 8008504:	9b04      	ldr	r3, [sp, #16]
 8008506:	eba0 000a 	sub.w	r0, r0, sl
 800850a:	2240      	movs	r2, #64	@ 0x40
 800850c:	4082      	lsls	r2, r0
 800850e:	4313      	orrs	r3, r2
 8008510:	3401      	adds	r4, #1
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008518:	4824      	ldr	r0, [pc, #144]	@ (80085ac <_svfiprintf_r+0x1e8>)
 800851a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800851e:	2206      	movs	r2, #6
 8008520:	f7f7 fe5e 	bl	80001e0 <memchr>
 8008524:	2800      	cmp	r0, #0
 8008526:	d036      	beq.n	8008596 <_svfiprintf_r+0x1d2>
 8008528:	4b21      	ldr	r3, [pc, #132]	@ (80085b0 <_svfiprintf_r+0x1ec>)
 800852a:	bb1b      	cbnz	r3, 8008574 <_svfiprintf_r+0x1b0>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	3307      	adds	r3, #7
 8008530:	f023 0307 	bic.w	r3, r3, #7
 8008534:	3308      	adds	r3, #8
 8008536:	9303      	str	r3, [sp, #12]
 8008538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853a:	4433      	add	r3, r6
 800853c:	9309      	str	r3, [sp, #36]	@ 0x24
 800853e:	e76a      	b.n	8008416 <_svfiprintf_r+0x52>
 8008540:	fb0c 3202 	mla	r2, ip, r2, r3
 8008544:	460c      	mov	r4, r1
 8008546:	2001      	movs	r0, #1
 8008548:	e7a8      	b.n	800849c <_svfiprintf_r+0xd8>
 800854a:	2300      	movs	r3, #0
 800854c:	3401      	adds	r4, #1
 800854e:	9305      	str	r3, [sp, #20]
 8008550:	4619      	mov	r1, r3
 8008552:	f04f 0c0a 	mov.w	ip, #10
 8008556:	4620      	mov	r0, r4
 8008558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800855c:	3a30      	subs	r2, #48	@ 0x30
 800855e:	2a09      	cmp	r2, #9
 8008560:	d903      	bls.n	800856a <_svfiprintf_r+0x1a6>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0c6      	beq.n	80084f4 <_svfiprintf_r+0x130>
 8008566:	9105      	str	r1, [sp, #20]
 8008568:	e7c4      	b.n	80084f4 <_svfiprintf_r+0x130>
 800856a:	fb0c 2101 	mla	r1, ip, r1, r2
 800856e:	4604      	mov	r4, r0
 8008570:	2301      	movs	r3, #1
 8008572:	e7f0      	b.n	8008556 <_svfiprintf_r+0x192>
 8008574:	ab03      	add	r3, sp, #12
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	462a      	mov	r2, r5
 800857a:	4b0e      	ldr	r3, [pc, #56]	@ (80085b4 <_svfiprintf_r+0x1f0>)
 800857c:	a904      	add	r1, sp, #16
 800857e:	4638      	mov	r0, r7
 8008580:	f3af 8000 	nop.w
 8008584:	1c42      	adds	r2, r0, #1
 8008586:	4606      	mov	r6, r0
 8008588:	d1d6      	bne.n	8008538 <_svfiprintf_r+0x174>
 800858a:	89ab      	ldrh	r3, [r5, #12]
 800858c:	065b      	lsls	r3, r3, #25
 800858e:	f53f af2d 	bmi.w	80083ec <_svfiprintf_r+0x28>
 8008592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008594:	e72c      	b.n	80083f0 <_svfiprintf_r+0x2c>
 8008596:	ab03      	add	r3, sp, #12
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	462a      	mov	r2, r5
 800859c:	4b05      	ldr	r3, [pc, #20]	@ (80085b4 <_svfiprintf_r+0x1f0>)
 800859e:	a904      	add	r1, sp, #16
 80085a0:	4638      	mov	r0, r7
 80085a2:	f000 f879 	bl	8008698 <_printf_i>
 80085a6:	e7ed      	b.n	8008584 <_svfiprintf_r+0x1c0>
 80085a8:	08008c51 	.word	0x08008c51
 80085ac:	08008c5b 	.word	0x08008c5b
 80085b0:	00000000 	.word	0x00000000
 80085b4:	0800830d 	.word	0x0800830d
 80085b8:	08008c57 	.word	0x08008c57

080085bc <_printf_common>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	4616      	mov	r6, r2
 80085c2:	4698      	mov	r8, r3
 80085c4:	688a      	ldr	r2, [r1, #8]
 80085c6:	690b      	ldr	r3, [r1, #16]
 80085c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	bfb8      	it	lt
 80085d0:	4613      	movlt	r3, r2
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085d8:	4607      	mov	r7, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b10a      	cbz	r2, 80085e2 <_printf_common+0x26>
 80085de:	3301      	adds	r3, #1
 80085e0:	6033      	str	r3, [r6, #0]
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	0699      	lsls	r1, r3, #26
 80085e6:	bf42      	ittt	mi
 80085e8:	6833      	ldrmi	r3, [r6, #0]
 80085ea:	3302      	addmi	r3, #2
 80085ec:	6033      	strmi	r3, [r6, #0]
 80085ee:	6825      	ldr	r5, [r4, #0]
 80085f0:	f015 0506 	ands.w	r5, r5, #6
 80085f4:	d106      	bne.n	8008604 <_printf_common+0x48>
 80085f6:	f104 0a19 	add.w	sl, r4, #25
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	6832      	ldr	r2, [r6, #0]
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	42ab      	cmp	r3, r5
 8008602:	dc26      	bgt.n	8008652 <_printf_common+0x96>
 8008604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008608:	6822      	ldr	r2, [r4, #0]
 800860a:	3b00      	subs	r3, #0
 800860c:	bf18      	it	ne
 800860e:	2301      	movne	r3, #1
 8008610:	0692      	lsls	r2, r2, #26
 8008612:	d42b      	bmi.n	800866c <_printf_common+0xb0>
 8008614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008618:	4641      	mov	r1, r8
 800861a:	4638      	mov	r0, r7
 800861c:	47c8      	blx	r9
 800861e:	3001      	adds	r0, #1
 8008620:	d01e      	beq.n	8008660 <_printf_common+0xa4>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	6922      	ldr	r2, [r4, #16]
 8008626:	f003 0306 	and.w	r3, r3, #6
 800862a:	2b04      	cmp	r3, #4
 800862c:	bf02      	ittt	eq
 800862e:	68e5      	ldreq	r5, [r4, #12]
 8008630:	6833      	ldreq	r3, [r6, #0]
 8008632:	1aed      	subeq	r5, r5, r3
 8008634:	68a3      	ldr	r3, [r4, #8]
 8008636:	bf0c      	ite	eq
 8008638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800863c:	2500      	movne	r5, #0
 800863e:	4293      	cmp	r3, r2
 8008640:	bfc4      	itt	gt
 8008642:	1a9b      	subgt	r3, r3, r2
 8008644:	18ed      	addgt	r5, r5, r3
 8008646:	2600      	movs	r6, #0
 8008648:	341a      	adds	r4, #26
 800864a:	42b5      	cmp	r5, r6
 800864c:	d11a      	bne.n	8008684 <_printf_common+0xc8>
 800864e:	2000      	movs	r0, #0
 8008650:	e008      	b.n	8008664 <_printf_common+0xa8>
 8008652:	2301      	movs	r3, #1
 8008654:	4652      	mov	r2, sl
 8008656:	4641      	mov	r1, r8
 8008658:	4638      	mov	r0, r7
 800865a:	47c8      	blx	r9
 800865c:	3001      	adds	r0, #1
 800865e:	d103      	bne.n	8008668 <_printf_common+0xac>
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	3501      	adds	r5, #1
 800866a:	e7c6      	b.n	80085fa <_printf_common+0x3e>
 800866c:	18e1      	adds	r1, r4, r3
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	2030      	movs	r0, #48	@ 0x30
 8008672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008676:	4422      	add	r2, r4
 8008678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800867c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008680:	3302      	adds	r3, #2
 8008682:	e7c7      	b.n	8008614 <_printf_common+0x58>
 8008684:	2301      	movs	r3, #1
 8008686:	4622      	mov	r2, r4
 8008688:	4641      	mov	r1, r8
 800868a:	4638      	mov	r0, r7
 800868c:	47c8      	blx	r9
 800868e:	3001      	adds	r0, #1
 8008690:	d0e6      	beq.n	8008660 <_printf_common+0xa4>
 8008692:	3601      	adds	r6, #1
 8008694:	e7d9      	b.n	800864a <_printf_common+0x8e>
	...

08008698 <_printf_i>:
 8008698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	7e0f      	ldrb	r7, [r1, #24]
 800869e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80086a0:	2f78      	cmp	r7, #120	@ 0x78
 80086a2:	4691      	mov	r9, r2
 80086a4:	4680      	mov	r8, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	469a      	mov	sl, r3
 80086aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80086ae:	d807      	bhi.n	80086c0 <_printf_i+0x28>
 80086b0:	2f62      	cmp	r7, #98	@ 0x62
 80086b2:	d80a      	bhi.n	80086ca <_printf_i+0x32>
 80086b4:	2f00      	cmp	r7, #0
 80086b6:	f000 80d2 	beq.w	800885e <_printf_i+0x1c6>
 80086ba:	2f58      	cmp	r7, #88	@ 0x58
 80086bc:	f000 80b9 	beq.w	8008832 <_printf_i+0x19a>
 80086c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086c8:	e03a      	b.n	8008740 <_printf_i+0xa8>
 80086ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086ce:	2b15      	cmp	r3, #21
 80086d0:	d8f6      	bhi.n	80086c0 <_printf_i+0x28>
 80086d2:	a101      	add	r1, pc, #4	@ (adr r1, 80086d8 <_printf_i+0x40>)
 80086d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d8:	08008731 	.word	0x08008731
 80086dc:	08008745 	.word	0x08008745
 80086e0:	080086c1 	.word	0x080086c1
 80086e4:	080086c1 	.word	0x080086c1
 80086e8:	080086c1 	.word	0x080086c1
 80086ec:	080086c1 	.word	0x080086c1
 80086f0:	08008745 	.word	0x08008745
 80086f4:	080086c1 	.word	0x080086c1
 80086f8:	080086c1 	.word	0x080086c1
 80086fc:	080086c1 	.word	0x080086c1
 8008700:	080086c1 	.word	0x080086c1
 8008704:	08008845 	.word	0x08008845
 8008708:	0800876f 	.word	0x0800876f
 800870c:	080087ff 	.word	0x080087ff
 8008710:	080086c1 	.word	0x080086c1
 8008714:	080086c1 	.word	0x080086c1
 8008718:	08008867 	.word	0x08008867
 800871c:	080086c1 	.word	0x080086c1
 8008720:	0800876f 	.word	0x0800876f
 8008724:	080086c1 	.word	0x080086c1
 8008728:	080086c1 	.word	0x080086c1
 800872c:	08008807 	.word	0x08008807
 8008730:	6833      	ldr	r3, [r6, #0]
 8008732:	1d1a      	adds	r2, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6032      	str	r2, [r6, #0]
 8008738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800873c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008740:	2301      	movs	r3, #1
 8008742:	e09d      	b.n	8008880 <_printf_i+0x1e8>
 8008744:	6833      	ldr	r3, [r6, #0]
 8008746:	6820      	ldr	r0, [r4, #0]
 8008748:	1d19      	adds	r1, r3, #4
 800874a:	6031      	str	r1, [r6, #0]
 800874c:	0606      	lsls	r6, r0, #24
 800874e:	d501      	bpl.n	8008754 <_printf_i+0xbc>
 8008750:	681d      	ldr	r5, [r3, #0]
 8008752:	e003      	b.n	800875c <_printf_i+0xc4>
 8008754:	0645      	lsls	r5, r0, #25
 8008756:	d5fb      	bpl.n	8008750 <_printf_i+0xb8>
 8008758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800875c:	2d00      	cmp	r5, #0
 800875e:	da03      	bge.n	8008768 <_printf_i+0xd0>
 8008760:	232d      	movs	r3, #45	@ 0x2d
 8008762:	426d      	negs	r5, r5
 8008764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008768:	4859      	ldr	r0, [pc, #356]	@ (80088d0 <_printf_i+0x238>)
 800876a:	230a      	movs	r3, #10
 800876c:	e011      	b.n	8008792 <_printf_i+0xfa>
 800876e:	6821      	ldr	r1, [r4, #0]
 8008770:	6833      	ldr	r3, [r6, #0]
 8008772:	0608      	lsls	r0, r1, #24
 8008774:	f853 5b04 	ldr.w	r5, [r3], #4
 8008778:	d402      	bmi.n	8008780 <_printf_i+0xe8>
 800877a:	0649      	lsls	r1, r1, #25
 800877c:	bf48      	it	mi
 800877e:	b2ad      	uxthmi	r5, r5
 8008780:	2f6f      	cmp	r7, #111	@ 0x6f
 8008782:	4853      	ldr	r0, [pc, #332]	@ (80088d0 <_printf_i+0x238>)
 8008784:	6033      	str	r3, [r6, #0]
 8008786:	bf14      	ite	ne
 8008788:	230a      	movne	r3, #10
 800878a:	2308      	moveq	r3, #8
 800878c:	2100      	movs	r1, #0
 800878e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008792:	6866      	ldr	r6, [r4, #4]
 8008794:	60a6      	str	r6, [r4, #8]
 8008796:	2e00      	cmp	r6, #0
 8008798:	bfa2      	ittt	ge
 800879a:	6821      	ldrge	r1, [r4, #0]
 800879c:	f021 0104 	bicge.w	r1, r1, #4
 80087a0:	6021      	strge	r1, [r4, #0]
 80087a2:	b90d      	cbnz	r5, 80087a8 <_printf_i+0x110>
 80087a4:	2e00      	cmp	r6, #0
 80087a6:	d04b      	beq.n	8008840 <_printf_i+0x1a8>
 80087a8:	4616      	mov	r6, r2
 80087aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80087ae:	fb03 5711 	mls	r7, r3, r1, r5
 80087b2:	5dc7      	ldrb	r7, [r0, r7]
 80087b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087b8:	462f      	mov	r7, r5
 80087ba:	42bb      	cmp	r3, r7
 80087bc:	460d      	mov	r5, r1
 80087be:	d9f4      	bls.n	80087aa <_printf_i+0x112>
 80087c0:	2b08      	cmp	r3, #8
 80087c2:	d10b      	bne.n	80087dc <_printf_i+0x144>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	07df      	lsls	r7, r3, #31
 80087c8:	d508      	bpl.n	80087dc <_printf_i+0x144>
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	6861      	ldr	r1, [r4, #4]
 80087ce:	4299      	cmp	r1, r3
 80087d0:	bfde      	ittt	le
 80087d2:	2330      	movle	r3, #48	@ 0x30
 80087d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087dc:	1b92      	subs	r2, r2, r6
 80087de:	6122      	str	r2, [r4, #16]
 80087e0:	f8cd a000 	str.w	sl, [sp]
 80087e4:	464b      	mov	r3, r9
 80087e6:	aa03      	add	r2, sp, #12
 80087e8:	4621      	mov	r1, r4
 80087ea:	4640      	mov	r0, r8
 80087ec:	f7ff fee6 	bl	80085bc <_printf_common>
 80087f0:	3001      	adds	r0, #1
 80087f2:	d14a      	bne.n	800888a <_printf_i+0x1f2>
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	b004      	add	sp, #16
 80087fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	f043 0320 	orr.w	r3, r3, #32
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	4833      	ldr	r0, [pc, #204]	@ (80088d4 <_printf_i+0x23c>)
 8008808:	2778      	movs	r7, #120	@ 0x78
 800880a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	6831      	ldr	r1, [r6, #0]
 8008812:	061f      	lsls	r7, r3, #24
 8008814:	f851 5b04 	ldr.w	r5, [r1], #4
 8008818:	d402      	bmi.n	8008820 <_printf_i+0x188>
 800881a:	065f      	lsls	r7, r3, #25
 800881c:	bf48      	it	mi
 800881e:	b2ad      	uxthmi	r5, r5
 8008820:	6031      	str	r1, [r6, #0]
 8008822:	07d9      	lsls	r1, r3, #31
 8008824:	bf44      	itt	mi
 8008826:	f043 0320 	orrmi.w	r3, r3, #32
 800882a:	6023      	strmi	r3, [r4, #0]
 800882c:	b11d      	cbz	r5, 8008836 <_printf_i+0x19e>
 800882e:	2310      	movs	r3, #16
 8008830:	e7ac      	b.n	800878c <_printf_i+0xf4>
 8008832:	4827      	ldr	r0, [pc, #156]	@ (80088d0 <_printf_i+0x238>)
 8008834:	e7e9      	b.n	800880a <_printf_i+0x172>
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	f023 0320 	bic.w	r3, r3, #32
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	e7f6      	b.n	800882e <_printf_i+0x196>
 8008840:	4616      	mov	r6, r2
 8008842:	e7bd      	b.n	80087c0 <_printf_i+0x128>
 8008844:	6833      	ldr	r3, [r6, #0]
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	6961      	ldr	r1, [r4, #20]
 800884a:	1d18      	adds	r0, r3, #4
 800884c:	6030      	str	r0, [r6, #0]
 800884e:	062e      	lsls	r6, r5, #24
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	d501      	bpl.n	8008858 <_printf_i+0x1c0>
 8008854:	6019      	str	r1, [r3, #0]
 8008856:	e002      	b.n	800885e <_printf_i+0x1c6>
 8008858:	0668      	lsls	r0, r5, #25
 800885a:	d5fb      	bpl.n	8008854 <_printf_i+0x1bc>
 800885c:	8019      	strh	r1, [r3, #0]
 800885e:	2300      	movs	r3, #0
 8008860:	6123      	str	r3, [r4, #16]
 8008862:	4616      	mov	r6, r2
 8008864:	e7bc      	b.n	80087e0 <_printf_i+0x148>
 8008866:	6833      	ldr	r3, [r6, #0]
 8008868:	1d1a      	adds	r2, r3, #4
 800886a:	6032      	str	r2, [r6, #0]
 800886c:	681e      	ldr	r6, [r3, #0]
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	2100      	movs	r1, #0
 8008872:	4630      	mov	r0, r6
 8008874:	f7f7 fcb4 	bl	80001e0 <memchr>
 8008878:	b108      	cbz	r0, 800887e <_printf_i+0x1e6>
 800887a:	1b80      	subs	r0, r0, r6
 800887c:	6060      	str	r0, [r4, #4]
 800887e:	6863      	ldr	r3, [r4, #4]
 8008880:	6123      	str	r3, [r4, #16]
 8008882:	2300      	movs	r3, #0
 8008884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008888:	e7aa      	b.n	80087e0 <_printf_i+0x148>
 800888a:	6923      	ldr	r3, [r4, #16]
 800888c:	4632      	mov	r2, r6
 800888e:	4649      	mov	r1, r9
 8008890:	4640      	mov	r0, r8
 8008892:	47d0      	blx	sl
 8008894:	3001      	adds	r0, #1
 8008896:	d0ad      	beq.n	80087f4 <_printf_i+0x15c>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	079b      	lsls	r3, r3, #30
 800889c:	d413      	bmi.n	80088c6 <_printf_i+0x22e>
 800889e:	68e0      	ldr	r0, [r4, #12]
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	4298      	cmp	r0, r3
 80088a4:	bfb8      	it	lt
 80088a6:	4618      	movlt	r0, r3
 80088a8:	e7a6      	b.n	80087f8 <_printf_i+0x160>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4632      	mov	r2, r6
 80088ae:	4649      	mov	r1, r9
 80088b0:	4640      	mov	r0, r8
 80088b2:	47d0      	blx	sl
 80088b4:	3001      	adds	r0, #1
 80088b6:	d09d      	beq.n	80087f4 <_printf_i+0x15c>
 80088b8:	3501      	adds	r5, #1
 80088ba:	68e3      	ldr	r3, [r4, #12]
 80088bc:	9903      	ldr	r1, [sp, #12]
 80088be:	1a5b      	subs	r3, r3, r1
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	dcf2      	bgt.n	80088aa <_printf_i+0x212>
 80088c4:	e7eb      	b.n	800889e <_printf_i+0x206>
 80088c6:	2500      	movs	r5, #0
 80088c8:	f104 0619 	add.w	r6, r4, #25
 80088cc:	e7f5      	b.n	80088ba <_printf_i+0x222>
 80088ce:	bf00      	nop
 80088d0:	08008c62 	.word	0x08008c62
 80088d4:	08008c73 	.word	0x08008c73

080088d8 <memmove>:
 80088d8:	4288      	cmp	r0, r1
 80088da:	b510      	push	{r4, lr}
 80088dc:	eb01 0402 	add.w	r4, r1, r2
 80088e0:	d902      	bls.n	80088e8 <memmove+0x10>
 80088e2:	4284      	cmp	r4, r0
 80088e4:	4623      	mov	r3, r4
 80088e6:	d807      	bhi.n	80088f8 <memmove+0x20>
 80088e8:	1e43      	subs	r3, r0, #1
 80088ea:	42a1      	cmp	r1, r4
 80088ec:	d008      	beq.n	8008900 <memmove+0x28>
 80088ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088f6:	e7f8      	b.n	80088ea <memmove+0x12>
 80088f8:	4402      	add	r2, r0
 80088fa:	4601      	mov	r1, r0
 80088fc:	428a      	cmp	r2, r1
 80088fe:	d100      	bne.n	8008902 <memmove+0x2a>
 8008900:	bd10      	pop	{r4, pc}
 8008902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800890a:	e7f7      	b.n	80088fc <memmove+0x24>

0800890c <_realloc_r>:
 800890c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008910:	4680      	mov	r8, r0
 8008912:	4615      	mov	r5, r2
 8008914:	460c      	mov	r4, r1
 8008916:	b921      	cbnz	r1, 8008922 <_realloc_r+0x16>
 8008918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891c:	4611      	mov	r1, r2
 800891e:	f7ff bae9 	b.w	8007ef4 <_malloc_r>
 8008922:	b92a      	cbnz	r2, 8008930 <_realloc_r+0x24>
 8008924:	f7ff fca8 	bl	8008278 <_free_r>
 8008928:	2400      	movs	r4, #0
 800892a:	4620      	mov	r0, r4
 800892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008930:	f000 f81a 	bl	8008968 <_malloc_usable_size_r>
 8008934:	4285      	cmp	r5, r0
 8008936:	4606      	mov	r6, r0
 8008938:	d802      	bhi.n	8008940 <_realloc_r+0x34>
 800893a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800893e:	d8f4      	bhi.n	800892a <_realloc_r+0x1e>
 8008940:	4629      	mov	r1, r5
 8008942:	4640      	mov	r0, r8
 8008944:	f7ff fad6 	bl	8007ef4 <_malloc_r>
 8008948:	4607      	mov	r7, r0
 800894a:	2800      	cmp	r0, #0
 800894c:	d0ec      	beq.n	8008928 <_realloc_r+0x1c>
 800894e:	42b5      	cmp	r5, r6
 8008950:	462a      	mov	r2, r5
 8008952:	4621      	mov	r1, r4
 8008954:	bf28      	it	cs
 8008956:	4632      	movcs	r2, r6
 8008958:	f7ff fc80 	bl	800825c <memcpy>
 800895c:	4621      	mov	r1, r4
 800895e:	4640      	mov	r0, r8
 8008960:	f7ff fc8a 	bl	8008278 <_free_r>
 8008964:	463c      	mov	r4, r7
 8008966:	e7e0      	b.n	800892a <_realloc_r+0x1e>

08008968 <_malloc_usable_size_r>:
 8008968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800896c:	1f18      	subs	r0, r3, #4
 800896e:	2b00      	cmp	r3, #0
 8008970:	bfbc      	itt	lt
 8008972:	580b      	ldrlt	r3, [r1, r0]
 8008974:	18c0      	addlt	r0, r0, r3
 8008976:	4770      	bx	lr

08008978 <_init>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr

08008984 <_fini>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr
